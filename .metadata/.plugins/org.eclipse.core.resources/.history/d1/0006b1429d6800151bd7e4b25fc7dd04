/*
 * 
 */
package filesystem.diagram.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.RoundedRectangle;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Color;

import filesystem.diagram.edit.policies.ForItemSemanticEditPolicy;
import filesystem.diagram.edit.policies.OpenDiagramEditPolicy;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class ForEditPart extends ShapeNodeEditPart {

	/**
	 * @generated
	 */
	public static final int VISUAL_ID = 2011;

	/**
	 * @generated
	 */
	protected IFigure contentPane;

	/**
	 * @generated
	 */
	protected IFigure primaryShape;

	/**
	 * @generated
	 */
	public ForEditPart(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
				new ForItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		installEditPolicy(EditPolicyRoles.OPEN_ROLE,
				new OpenDiagramEditPolicy()); // XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = child
						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
				}
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
			}
		};
		return lep;
	}

	/**
	 * @generated
	 */
	protected IFigure createNodeShape() {
		return primaryShape = new ForFigure();
	}

	/**
	 * @generated
	 */
	public ForFigure getPrimaryShape() {
		return (ForFigure) primaryShape;
	}

	/**
	 * @generated
	 */
	protected boolean addFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof ForNameExecutablePartEditPart) {
			((ForNameExecutablePartEditPart) childEditPart)
					.setLabel(getPrimaryShape().getFigureForLabelFigure());
			return true;
		}
		if (childEditPart instanceof ForForIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForIfsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForCasesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForInsertsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForUpdatesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForDeletesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForSelectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForOutuputsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForCursorsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForWhilesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForForsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForLoopsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ForForLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof ForNameExecutablePartEditPart) {
			return true;
		}
		if (childEditPart instanceof ForForIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForIfsCompartmentFigure();
			pane.remove(((ForForIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForCasesCompartmentFigure();
			pane.remove(((ForForCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForInsertsCompartmentFigure();
			pane.remove(((ForForInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForUpdatesCompartmentFigure();
			pane.remove(((ForForUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForDeletesCompartmentFigure();
			pane.remove(((ForForDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForSelectsCompartmentFigure();
			pane.remove(((ForForSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForOutuputsCompartmentFigure();
			pane.remove(((ForForOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForCursorsCompartmentFigure();
			pane.remove(((ForForCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForWhilesCompartmentFigure();
			pane.remove(((ForForWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForForsCompartmentFigure();
			pane.remove(((ForForForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ForForLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getForLoopsCompartmentFigure();
			pane.remove(((ForForLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	/**
	 * @generated
	 */
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if (editPart instanceof ForForIfsCompartment2EditPart) {
			return getPrimaryShape().getForIfsCompartmentFigure();
		}
		if (editPart instanceof ForForCasesCompartment2EditPart) {
			return getPrimaryShape().getForCasesCompartmentFigure();
		}
		if (editPart instanceof ForForInsertsCompartment2EditPart) {
			return getPrimaryShape().getForInsertsCompartmentFigure();
		}
		if (editPart instanceof ForForUpdatesCompartment2EditPart) {
			return getPrimaryShape().getForUpdatesCompartmentFigure();
		}
		if (editPart instanceof ForForDeletesCompartment2EditPart) {
			return getPrimaryShape().getForDeletesCompartmentFigure();
		}
		if (editPart instanceof ForForSelectsCompartment2EditPart) {
			return getPrimaryShape().getForSelectsCompartmentFigure();
		}
		if (editPart instanceof ForForOutuputsCompartment2EditPart) {
			return getPrimaryShape().getForOutuputsCompartmentFigure();
		}
		if (editPart instanceof ForForCursorsCompartment2EditPart) {
			return getPrimaryShape().getForCursorsCompartmentFigure();
		}
		if (editPart instanceof ForForWhilesCompartment2EditPart) {
			return getPrimaryShape().getForWhilesCompartmentFigure();
		}
		if (editPart instanceof ForForForsCompartment2EditPart) {
			return getPrimaryShape().getForForsCompartmentFigure();
		}
		if (editPart instanceof ForForLoopsCompartment2EditPart) {
			return getPrimaryShape().getForLoopsCompartmentFigure();
		}
		return getContentPane();
	}

	/**
	 * @generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(40, 40);
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @generated
	 */
	protected void setForegroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setBackgroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineWidth(width);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineType(int style) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineStyle(style);
		}
	}

	/**
	 * @generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(FilesystemVisualIDRegistry
				.getType(ForNameExecutablePartEditPart.VISUAL_ID));
	}

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(Notification event) {
		if (event.getNotifier() == getModel()
				&& EcorePackage.eINSTANCE.getEModelElement_EAnnotations()
						.equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}

	/**
	 * @generated
	 */
	public class ForFigure extends RoundedRectangle {

		/**
		 * @generated
		 */
		private WrappingLabel fFigureForLabelFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForIfsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForCasesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForInsertsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForUpdatesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForDeletesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForSelectsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForOutuputsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForCursorsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForWhilesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForForsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fForLoopsCompartmentFigure;

		/**
		 * @generated
		 */
		public ForFigure() {
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8),
					getMapMode().DPtoLP(8)));
			this.setBorder(new MarginBorder(getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5), getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5)));
			createContents();
		}

		/**
		 * @generated
		 */
		private void createContents() {

			fFigureForLabelFigure = new WrappingLabel();

			fFigureForLabelFigure.setText("For");
			fFigureForLabelFigure.setMaximumSize(new Dimension(getMapMode()
					.DPtoLP(10000), getMapMode().DPtoLP(50)));

			this.add(fFigureForLabelFigure);

			fForIfsCompartmentFigure = new RectangleFigure();

			fForIfsCompartmentFigure.setOutline(false);

			this.add(fForIfsCompartmentFigure);

			fForCasesCompartmentFigure = new RectangleFigure();

			fForCasesCompartmentFigure.setOutline(false);

			this.add(fForCasesCompartmentFigure);

			fForInsertsCompartmentFigure = new RectangleFigure();

			fForInsertsCompartmentFigure.setOutline(false);

			this.add(fForInsertsCompartmentFigure);

			fForUpdatesCompartmentFigure = new RectangleFigure();

			fForUpdatesCompartmentFigure.setOutline(false);

			this.add(fForUpdatesCompartmentFigure);

			fForDeletesCompartmentFigure = new RectangleFigure();

			fForDeletesCompartmentFigure.setOutline(false);

			this.add(fForDeletesCompartmentFigure);

			fForSelectsCompartmentFigure = new RectangleFigure();

			fForSelectsCompartmentFigure.setOutline(false);

			this.add(fForSelectsCompartmentFigure);

			fForOutuputsCompartmentFigure = new RectangleFigure();

			fForOutuputsCompartmentFigure.setOutline(false);

			this.add(fForOutuputsCompartmentFigure);

			fForCursorsCompartmentFigure = new RectangleFigure();

			fForCursorsCompartmentFigure.setOutline(false);

			this.add(fForCursorsCompartmentFigure);

			fForWhilesCompartmentFigure = new RectangleFigure();

			fForWhilesCompartmentFigure.setOutline(false);

			this.add(fForWhilesCompartmentFigure);

			fForForsCompartmentFigure = new RectangleFigure();

			fForForsCompartmentFigure.setOutline(false);

			this.add(fForForsCompartmentFigure);

			fForLoopsCompartmentFigure = new RectangleFigure();

			fForLoopsCompartmentFigure.setOutline(false);

			this.add(fForLoopsCompartmentFigure);

		}

		/**
		 * @generated
		 */
		public WrappingLabel getFigureForLabelFigure() {
			return fFigureForLabelFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForIfsCompartmentFigure() {
			return fForIfsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForCasesCompartmentFigure() {
			return fForCasesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForInsertsCompartmentFigure() {
			return fForInsertsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForUpdatesCompartmentFigure() {
			return fForUpdatesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForDeletesCompartmentFigure() {
			return fForDeletesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForSelectsCompartmentFigure() {
			return fForSelectsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForOutuputsCompartmentFigure() {
			return fForOutuputsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForCursorsCompartmentFigure() {
			return fForCursorsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForWhilesCompartmentFigure() {
			return fForWhilesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForForsCompartmentFigure() {
			return fForForsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getForLoopsCompartmentFigure() {
			return fForLoopsCompartmentFigure;
		}

	}

}
