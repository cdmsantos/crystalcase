@namespace(uri="test_function", prefix="test_function")
@gmf

package test_function;

@gmf.diagram(model.extension="test_function")
class Test_Function {
    //val Sync[*] syncs;

	val Sections[*] Sections;
}

class Sections extends Parameters, Return, Declarative_Part, Executable_Part{
	val Declarative_Part[1] Declarative_Part;
    val Executable_Part[1] Executable_Part;
    val Return[1] Return;
    val Parameters[1] Parameters;
}

class Parameters{
	val ParameterIn[*] Parameter_In;
	val ParameterOut[*] Parameter_Out;
	val ParameterInOut[*] Parameter_In_Out;
	attr String Parameter_Name;
}

class Return{
}

class Declarative_Part {
}

class Executable_Part {
}

class Data_Type extends Return, Declarative_Part{
}

@gmf.node(label = "name")
class ParameterIn extends Parameters{
	attr String Parameter_In_Name;
}

@gmf.node(label = "name")
class ParameterOut extends Parameters{
	attr String Parameter_Out_Name;
}

@gmf.node(label = "name")
class ParameterInOut extends Parameters{
	attr String Parameter_In_Out_Name;
}
/*
//class ExceptionCommand extends ExceptionPart{
//}

class If extends Executable_Part{
}

class Case extends Executable_Part{
}

class Insert extends Executable_Part{
}

class Update extends Executable_Part{
}

class Delete extends Executable_Part{
}

class Select extends Executable_Part{
}

class Output extends Executable_Part{
}

class Cursor extends Executable_Part{
}

class While extends Executable_Part{
}

class For extends Executable_Part{
}

class Loop extends Executable_Part{
}

//Links
@gmf.link(source="source", target="target", style="dot", width="2")
class Sync {
    ref Select source;
    ref Output target;
}*/