	/*
 * 
 */
package master.diagram.navigator;

/**
 * @generated
 */
public class MasterNavigatorLabelProvider extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.ui.navigator.ICommonLabelProvider, org.eclipse.jface.viewers.ITreePathLabelProvider {

		/**
 * @generated
 */
static {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
public void updateLabel(org.eclipse.jface.viewers.ViewerLabel label, org.eclipse.jface.viewers.TreePath elementPath) {
	Object element = elementPath.getLastSegment();
	if (element instanceof master.diagram.navigator.MasterNavigatorItem && !isOwnView(((master.diagram.navigator.MasterNavigatorItem) element).getView())) {
		return;
	}
	label.setText(getText(element));
	label.setImage(getImage(element));
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(Object element) {
	if (element instanceof master.diagram.navigator.MasterNavigatorGroup) {
	master.diagram.navigator.MasterNavigatorGroup group = (master.diagram.navigator.MasterNavigatorGroup) element;
	return master.diagram.part.MasterDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
}

	if (element instanceof master.diagram.navigator.MasterNavigatorItem) {
	master.diagram.navigator.MasterNavigatorItem navigatorItem = (master.diagram.navigator.MasterNavigatorItem) element;
	if (!isOwnView(navigatorItem.getView())) {
		return super.getImage(element);
	}
	return getImage(navigatorItem.getView());
}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getImage(view);
	}
}

		return super.getImage(element);
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getImage("Navigator?Diagram?master?master", master.diagram.providers.MasterElementTypes.Master_1000); //$NON-NLS-1$
case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?master?Parameters", master.diagram.providers.MasterElementTypes.Parameters_2001); //$NON-NLS-1$
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?master?Return", master.diagram.providers.MasterElementTypes.Return_2002); //$NON-NLS-1$
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?master?DeclarativePart", master.diagram.providers.MasterElementTypes.DeclarativePart_2003); //$NON-NLS-1$
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?master?ExecutablePart", master.diagram.providers.MasterElementTypes.ExecutablePart_2004); //$NON-NLS-1$
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?DataType", master.diagram.providers.MasterElementTypes.DataType_3001); //$NON-NLS-1$
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Collections", master.diagram.providers.MasterElementTypes.Collections_3002); //$NON-NLS-1$
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Records", master.diagram.providers.MasterElementTypes.Records_3003); //$NON-NLS-1$
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Cursor", master.diagram.providers.MasterElementTypes.Cursor_3004); //$NON-NLS-1$
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?DataType", master.diagram.providers.MasterElementTypes.DataType_3005); //$NON-NLS-1$
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Collections", master.diagram.providers.MasterElementTypes.Collections_3006); //$NON-NLS-1$
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Records", master.diagram.providers.MasterElementTypes.Records_3007); //$NON-NLS-1$
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Cursor", master.diagram.providers.MasterElementTypes.Cursor_3008); //$NON-NLS-1$
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?DataType", master.diagram.providers.MasterElementTypes.DataType_3009); //$NON-NLS-1$
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Collections", master.diagram.providers.MasterElementTypes.Collections_3010); //$NON-NLS-1$
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Records", master.diagram.providers.MasterElementTypes.Records_3011); //$NON-NLS-1$
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Cursor", master.diagram.providers.MasterElementTypes.Cursor_3012); //$NON-NLS-1$
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Expressions", master.diagram.providers.MasterElementTypes.Expressions_3013); //$NON-NLS-1$
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Exception", master.diagram.providers.MasterElementTypes.Exception_3014); //$NON-NLS-1$
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?If", master.diagram.providers.MasterElementTypes.If_3015); //$NON-NLS-1$
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Case", master.diagram.providers.MasterElementTypes.Case_3016); //$NON-NLS-1$
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Insert", master.diagram.providers.MasterElementTypes.Insert_3017); //$NON-NLS-1$
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Update", master.diagram.providers.MasterElementTypes.Update_3018); //$NON-NLS-1$
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Delete", master.diagram.providers.MasterElementTypes.Delete_3019); //$NON-NLS-1$
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Select", master.diagram.providers.MasterElementTypes.Select_3020); //$NON-NLS-1$
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?While", master.diagram.providers.MasterElementTypes.While_3021); //$NON-NLS-1$
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?For", master.diagram.providers.MasterElementTypes.For_3022); //$NON-NLS-1$
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Loop", master.diagram.providers.MasterElementTypes.Loop_3023); //$NON-NLS-1$
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Open", master.diagram.providers.MasterElementTypes.Open_3024); //$NON-NLS-1$
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Fetch", master.diagram.providers.MasterElementTypes.Fetch_3025); //$NON-NLS-1$
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getImage("Navigator?Node?master?Close", master.diagram.providers.MasterElementTypes.Close_3026); //$NON-NLS-1$
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getImage("Navigator?Link?master?Transition", master.diagram.providers.MasterElementTypes.Transition_4001); //$NON-NLS-1$
	}
		return getImage("Navigator?UnknownElement", null);  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
private org.eclipse.swt.graphics.Image getImage(String key, org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	org.eclipse.jface.resource.ImageRegistry imageRegistry = master.diagram.part.MasterDiagramEditorPlugin.getInstance().getImageRegistry();
	org.eclipse.swt.graphics.Image image = imageRegistry.get(key);
	if (image == null && elementType != null && master.diagram.providers.MasterElementTypes.isKnownElementType(elementType)) {
		image = master.diagram.providers.MasterElementTypes.getImage(elementType);
		imageRegistry.put(key, image);
	}
			
	if (image == null) {
		image = imageRegistry.get("Navigator?ImageNotFound");  //$NON-NLS-1$
		imageRegistry.put(key, image);
	}
	return image;
}
	
		/**
 * @generated
 */
public String getText(Object element) {
	if (element instanceof master.diagram.navigator.MasterNavigatorGroup) {
	master.diagram.navigator.MasterNavigatorGroup group = (master.diagram.navigator.MasterNavigatorGroup) element;
	return group.getGroupName();
}

	if (element instanceof master.diagram.navigator.MasterNavigatorItem) {
	master.diagram.navigator.MasterNavigatorItem navigatorItem = (master.diagram.navigator.MasterNavigatorItem) element;
   		if (!isOwnView(navigatorItem.getView())) {
   			return null;
   		}
   		return getText(navigatorItem.getView());
	}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getText(view);
	}
}

		return super.getText(element);
}
	
		/**
 * @generated
 */
public String getText(org.eclipse.gmf.runtime.notation.View view) {
	if (view.getElement() != null && view.getElement().eIsProxy()) {
		return getUnresolvedDomainElementProxyText(view);
	}
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getMaster_1000Text(view);
case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001Text(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002Text(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003Text(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004Text(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001Text(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002Text(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003Text(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004Text(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005Text(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006Text(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007Text(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008Text(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009Text(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010Text(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011Text(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012Text(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013Text(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014Text(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015Text(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3016Text(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3017Text(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3018Text(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3019Text(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3020Text(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3021Text(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3022Text(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3023Text(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3024Text(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3025Text(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3026Text(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001Text(view);
	}
		return getUnknownElementText(view);
}
	
		/**
 * @generated
 */
private String getMaster_1000Text(org.eclipse.gmf.runtime.notation.View view) {
					return "";  //$NON-NLS-1$
	}
	/**
 * @generated
 */
private String getParameters_2001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Parameters_2001, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ParametersNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getReturn_2002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Return_2002, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ReturnNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5010); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDeclarativePart_2003Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.DeclarativePart_2003, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.DeclarativePartNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5015); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getExecutablePart_2004Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.ExecutablePart_2004, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ExecutablePartNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5030); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDataType_3001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.DataType_3001, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.DataTypeDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCollections_3002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Collections_3002, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CollectionsDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getRecords_3003Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Records_3003, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.RecordsDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCursor_3004Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Cursor_3004, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CursorDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDataType_3005Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.DataType_3005, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.DataTypeDescription2EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5006); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCollections_3006Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Collections_3006, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CollectionsDescription2EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5007); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getRecords_3007Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Records_3007, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.RecordsDescription2EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5008); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCursor_3008Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Cursor_3008, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CursorDescription2EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5009); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDataType_3009Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.DataType_3009, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.DataTypeDescription3EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5011); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCollections_3010Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Collections_3010, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CollectionsDescription3EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5012); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getRecords_3011Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Records_3011, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.RecordsDescription3EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5013); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCursor_3012Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Cursor_3012, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CursorDescription3EditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5014); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getExpressions_3013Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Expressions_3013, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ExpressionsDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5016); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getException_3014Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Exception_3014, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ExceptionDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5017); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getIf_3015Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.If_3015, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.IfDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5018); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCase_3016Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Case_3016, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CaseDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5019); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getInsert_3017Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Insert_3017, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.InsertDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5020); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getUpdate_3018Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Update_3018, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.UpdateDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5021); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDelete_3019Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Delete_3019, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.DeleteDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5022); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getSelect_3020Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Select_3020, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.SelectDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5023); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getWhile_3021Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.While_3021, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.WhileDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5024); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getFor_3022Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.For_3022, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.ForDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5025); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getLoop_3023Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Loop_3023, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.LoopDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5026); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getOpen_3024Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Open_3024, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.OpenDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5027); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getFetch_3025Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Fetch_3025, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.FetchDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5028); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getClose_3026Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = master.diagram.providers.MasterParserProvider.getParser(master.diagram.providers.MasterElementTypes.Close_3026, view.getElement() != null ? view.getElement() : view, master.diagram.part.MasterVisualIDRegistry.getType(master.diagram.edit.parts.CloseDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5029); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getTransition_4001Text(org.eclipse.gmf.runtime.notation.View view) {
						master.Transition domainModelElement = (master.Transition) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getName();
} else {
	master.diagram.part.MasterDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4001);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
		}
	
		/**
 * @generated
 */
private String getUnknownElementText(org.eclipse.gmf.runtime.notation.View view) {
	return "<UnknownElement Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
private String getUnresolvedDomainElementProxyText(org.eclipse.gmf.runtime.notation.View view) {
	return "<Unresolved domain element Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}

		/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

		/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
	
		/**
 * @generated
 */
public String getDescription(Object anElement) {
	return null;
}
	
		/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return master.diagram.edit.parts.MasterEditPart.MODEL_ID.equals(master.diagram.part.MasterVisualIDRegistry.getModelID(view));
}

	}
