/*
 * 
 */
package filesystem.diagram.edit.parts;

import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gef.tools.CellEditorLocator;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.directedit.locator.CellEditorLocatorAccess;

import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class FilesystemEditPartFactory implements EditPartFactory {

	/**
	 * @generated
	 */
	public EditPart createEditPart(EditPart context, Object model) {
		if (model instanceof View) {
			View view = (View) model;
			switch (FilesystemVisualIDRegistry.getVisualID(view)) {

			case FilesystemEditPart.VISUAL_ID:
				return new FilesystemEditPart(view);

			case Data_TypeEditPart.VISUAL_ID:
				return new Data_TypeEditPart(view);

			case Data_TypeNameReturnEditPart.VISUAL_ID:
				return new Data_TypeNameReturnEditPart(view);

			case IfEditPart.VISUAL_ID:
				return new IfEditPart(view);

			case IfNameExecutablePartEditPart.VISUAL_ID:
				return new IfNameExecutablePartEditPart(view);

			case CaseEditPart.VISUAL_ID:
				return new CaseEditPart(view);

			case CaseNameExecutablePartEditPart.VISUAL_ID:
				return new CaseNameExecutablePartEditPart(view);

			case InsertEditPart.VISUAL_ID:
				return new InsertEditPart(view);

			case InsertNameExecutablePartEditPart.VISUAL_ID:
				return new InsertNameExecutablePartEditPart(view);

			case UpdateEditPart.VISUAL_ID:
				return new UpdateEditPart(view);

			case UpdateNameExecutablePartEditPart.VISUAL_ID:
				return new UpdateNameExecutablePartEditPart(view);

			case DeleteEditPart.VISUAL_ID:
				return new DeleteEditPart(view);

			case DeleteNameExecutablePartEditPart.VISUAL_ID:
				return new DeleteNameExecutablePartEditPart(view);

			case OutputEditPart.VISUAL_ID:
				return new OutputEditPart(view);

			case OutputNameExecutablePartEditPart.VISUAL_ID:
				return new OutputNameExecutablePartEditPart(view);

			case SelectEditPart.VISUAL_ID:
				return new SelectEditPart(view);

			case SelectNameExecutablePartEditPart.VISUAL_ID:
				return new SelectNameExecutablePartEditPart(view);

			case CursorEditPart.VISUAL_ID:
				return new CursorEditPart(view);

			case CursorNameExecutablePartEditPart.VISUAL_ID:
				return new CursorNameExecutablePartEditPart(view);

			case WhileEditPart.VISUAL_ID:
				return new WhileEditPart(view);

			case WhileNameExecutablePartEditPart.VISUAL_ID:
				return new WhileNameExecutablePartEditPart(view);

			case ForEditPart.VISUAL_ID:
				return new ForEditPart(view);

			case ForNameExecutablePartEditPart.VISUAL_ID:
				return new ForNameExecutablePartEditPart(view);

			case LoopEditPart.VISUAL_ID:
				return new LoopEditPart(view);

			case LoopNameExecutablePartEditPart.VISUAL_ID:
				return new LoopNameExecutablePartEditPart(view);

			case ExceptionCommandEditPart.VISUAL_ID:
				return new ExceptionCommandEditPart(view);

			case ExceptionCommandNameExceptionPartEditPart.VISUAL_ID:
				return new ExceptionCommandNameExceptionPartEditPart(view);

			case DeclarativePartEditPart.VISUAL_ID:
				return new DeclarativePartEditPart(view);

			case DeclarativePartNameDeclarativePartEditPart.VISUAL_ID:
				return new DeclarativePartNameDeclarativePartEditPart(view);

			case ExecutablePartEditPart.VISUAL_ID:
				return new ExecutablePartEditPart(view);

			case ExecutablePartNameExecutablePartEditPart.VISUAL_ID:
				return new ExecutablePartNameExecutablePartEditPart(view);

			case ExceptionPartEditPart.VISUAL_ID:
				return new ExceptionPartEditPart(view);

			case ExceptionPartNameExceptionPartEditPart.VISUAL_ID:
				return new ExceptionPartNameExceptionPartEditPart(view);

			case Data_Type2EditPart.VISUAL_ID:
				return new Data_Type2EditPart(view);

			case Data_TypeNameReturn2EditPart.VISUAL_ID:
				return new Data_TypeNameReturn2EditPart(view);

			case Data_Type3EditPart.VISUAL_ID:
				return new Data_Type3EditPart(view);

			case Data_TypeNameReturn3EditPart.VISUAL_ID:
				return new Data_TypeNameReturn3EditPart(view);

			case ExceptionCommand2EditPart.VISUAL_ID:
				return new ExceptionCommand2EditPart(view);

			case ExceptionCommandNameExceptionPart2EditPart.VISUAL_ID:
				return new ExceptionCommandNameExceptionPart2EditPart(view);

			case Data_TypeData_TypeTipo_retornoCompartmentEditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipo_retornoCompartmentEditPart(
						view);

			case Data_TypeData_TypeTipos_dadosCompartmentEditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipos_dadosCompartmentEditPart(
						view);

			case Data_TypeData_TypeTipo_retornoCompartment2EditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipo_retornoCompartment2EditPart(
						view);

			case Data_TypeData_TypeTipos_dadosCompartment2EditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipos_dadosCompartment2EditPart(
						view);

			case Data_TypeData_TypeTipo_retornoCompartment3EditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipo_retornoCompartment3EditPart(
						view);

			case Data_TypeData_TypeTipos_dadosCompartment3EditPart.VISUAL_ID:
				return new Data_TypeData_TypeTipos_dadosCompartment3EditPart(
						view);

			case ExceptionCommandExceptionCommandExcecoesCompartmentEditPart.VISUAL_ID:
				return new ExceptionCommandExceptionCommandExcecoesCompartmentEditPart(
						view);

			case ExceptionCommandExceptionCommandExcecoesCompartment2EditPart.VISUAL_ID:
				return new ExceptionCommandExceptionCommandExcecoesCompartment2EditPart(
						view);

			case DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart.VISUAL_ID:
				return new DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart(
						view);

			case ExceptionPartExceptionPartExcecoesCompartmentEditPart.VISUAL_ID:
				return new ExceptionPartExceptionPartExcecoesCompartmentEditPart(
						view);

			case SyncEditPart.VISUAL_ID:
				return new SyncEditPart(view);

			}
		}
		return createUnrecognizedEditPart(context, model);
	}

	/**
	 * @generated
	 */
	private EditPart createUnrecognizedEditPart(EditPart context, Object model) {
		// Handle creation of unrecognized child node EditParts here
		return null;
	}

	/**
	 * @generated
	 */
	public static CellEditorLocator getTextCellEditorLocator(
			ITextAwareEditPart source) {
		return CellEditorLocatorAccess.INSTANCE
				.getTextCellEditorLocator(source);
	}

}
