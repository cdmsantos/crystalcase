	/*
 * 
 */
package master.diagram.part;

	/**
 * @generated
 */
public class MasterDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getMaster_1000SemanticChildren(view);
case master.diagram.edit.parts.ParametersParametersVariablesCompartmentEditPart.VISUAL_ID:
	return getParametersParametersVariablesCompartment_7001SemanticChildren(view);
case master.diagram.edit.parts.ReturnReturnVariablesCompartmentEditPart.VISUAL_ID:
	return getReturnReturnVariablesCompartment_7002SemanticChildren(view);
case master.diagram.edit.parts.DeclarativePartDeclarativePartVariablesCompartmentEditPart.VISUAL_ID:
	return getDeclarativePartDeclarativePartVariablesCompartment_7003SemanticChildren(view);
case master.diagram.edit.parts.ExecutablePartExecutablePartObjectsCompartmentEditPart.VISUAL_ID:
	return getExecutablePartExecutablePartObjectsCompartment_7004SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartmentEditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7005SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment2EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7006SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartmentEditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7007SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment3EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7008SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartmentEditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7009SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment4EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7010SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartmentEditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7011SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment5EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7012SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartmentEditPart.VISUAL_ID:
	return getForForObjectsCompartment_7013SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment6EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7014SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartmentEditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7015SemanticChildren(view);
case master.diagram.edit.parts.IfIfObjectsCompartment7EditPart.VISUAL_ID:
	return getIfIfObjectsCompartment_7016SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment2EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7017SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment3EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7018SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment2EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7019SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment4EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7020SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment2EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7021SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment5EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7022SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment2EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7023SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment6EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7024SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment2EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7025SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment3EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7026SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment4EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7027SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment3EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7028SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment5EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7029SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment3EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7030SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment6EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7031SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment3EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7032SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment4EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7033SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment5EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7034SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment4EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7035SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment6EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7036SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment4EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7037SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment5EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7038SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment6EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7039SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment5EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7040SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment6EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7041SemanticChildren(view);
case master.diagram.edit.parts.CaseCaseObjectsCompartment7EditPart.VISUAL_ID:
	return getCaseCaseObjectsCompartment_7042SemanticChildren(view);
case master.diagram.edit.parts.SelectSelectObjectsCompartment7EditPart.VISUAL_ID:
	return getSelectSelectObjectsCompartment_7043SemanticChildren(view);
case master.diagram.edit.parts.WhileWhileObjectsCompartment7EditPart.VISUAL_ID:
	return getWhileWhileObjectsCompartment_7044SemanticChildren(view);
case master.diagram.edit.parts.ForForObjectsCompartment7EditPart.VISUAL_ID:
	return getForForObjectsCompartment_7045SemanticChildren(view);
case master.diagram.edit.parts.LoopLoopObjectsCompartment7EditPart.VISUAL_ID:
	return getLoopLoopObjectsCompartment_7046SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getMaster_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Master modelElement = (master.Master) view.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						{ master.Parameters childElement = modelElement.getParameters();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ParametersEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.Return childElement = modelElement.getReturn();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ReturnEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.DeclarativePart childElement = modelElement.getDeclarativePart();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.ExecutablePart childElement = modelElement.getExecutablePart();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getParametersParametersVariablesCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Parameters modelElement = (master.Parameters) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.RecordsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CursorEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getReturnReturnVariablesCompartment_7002SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Return modelElement = (master.Return) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataType2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Collections2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Records2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getDeclarativePartDeclarativePartVariablesCompartment_7003SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.DeclarativePart modelElement = (master.DeclarativePart) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataType3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Collections3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Records3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getExecutablePartExecutablePartObjectsCompartment_7004SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.ExecutablePart modelElement = (master.ExecutablePart) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.IfEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7005SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7006SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7007SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7008SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7009SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7010SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7011SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7012SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7013SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7014SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7015SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getIfIfObjectsCompartment_7016SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.If modelElement = (master.If) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7017SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7018SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7019SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7020SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7021SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7022SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7023SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7024SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7025SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7026SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7027SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7028SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7029SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7030SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7031SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7032SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7033SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7034SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7035SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7036SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7037SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7038SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7039SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7040SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7041SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getCaseCaseObjectsCompartment_7042SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Case modelElement = (master.Case) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSelectSelectObjectsCompartment_7043SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Select modelElement = (master.Select) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getWhileWhileObjectsCompartment_7044SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.While modelElement = (master.While) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getForForObjectsCompartment_7045SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.For modelElement = (master.For) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getLoopLoopObjectsCompartment_7046SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Loop modelElement = (master.Loop) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Exception7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.If7EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Case2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Insert3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Update3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Delete3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Select3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.While4EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.For5EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Loop6EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Open2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Close2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getMaster_1000ContainedLinks(view);
case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001ContainedLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002ContainedLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003ContainedLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004ContainedLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001ContainedLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002ContainedLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003ContainedLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004ContainedLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005ContainedLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006ContainedLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007ContainedLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008ContainedLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009ContainedLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010ContainedLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011ContainedLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012ContainedLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013ContainedLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014ContainedLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015ContainedLinks(view);
case master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID:
	return getExpressions_3016ContainedLinks(view);
case master.diagram.edit.parts.Exception2EditPart.VISUAL_ID:
	return getException_3017ContainedLinks(view);
case master.diagram.edit.parts.If2EditPart.VISUAL_ID:
	return getIf_3018ContainedLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3019ContainedLinks(view);
case master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID:
	return getExpressions_3020ContainedLinks(view);
case master.diagram.edit.parts.Exception3EditPart.VISUAL_ID:
	return getException_3021ContainedLinks(view);
case master.diagram.edit.parts.If3EditPart.VISUAL_ID:
	return getIf_3022ContainedLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3023ContainedLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3024ContainedLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3025ContainedLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3026ContainedLinks(view);
case master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID:
	return getExpressions_3027ContainedLinks(view);
case master.diagram.edit.parts.Exception4EditPart.VISUAL_ID:
	return getException_3028ContainedLinks(view);
case master.diagram.edit.parts.If4EditPart.VISUAL_ID:
	return getIf_3029ContainedLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3030ContainedLinks(view);
case master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID:
	return getExpressions_3031ContainedLinks(view);
case master.diagram.edit.parts.Exception5EditPart.VISUAL_ID:
	return getException_3032ContainedLinks(view);
case master.diagram.edit.parts.If5EditPart.VISUAL_ID:
	return getIf_3033ContainedLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3034ContainedLinks(view);
case master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID:
	return getExpressions_3035ContainedLinks(view);
case master.diagram.edit.parts.Exception6EditPart.VISUAL_ID:
	return getException_3036ContainedLinks(view);
case master.diagram.edit.parts.If6EditPart.VISUAL_ID:
	return getIf_3037ContainedLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3038ContainedLinks(view);
case master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID:
	return getExpressions_3039ContainedLinks(view);
case master.diagram.edit.parts.Exception7EditPart.VISUAL_ID:
	return getException_3040ContainedLinks(view);
case master.diagram.edit.parts.If7EditPart.VISUAL_ID:
	return getIf_3041ContainedLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3042ContainedLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3043ContainedLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3044ContainedLinks(view);
case master.diagram.edit.parts.Case2EditPart.VISUAL_ID:
	return getCase_3045ContainedLinks(view);
case master.diagram.edit.parts.Case3EditPart.VISUAL_ID:
	return getCase_3046ContainedLinks(view);
case master.diagram.edit.parts.Insert2EditPart.VISUAL_ID:
	return getInsert_3047ContainedLinks(view);
case master.diagram.edit.parts.Update2EditPart.VISUAL_ID:
	return getUpdate_3048ContainedLinks(view);
case master.diagram.edit.parts.Delete2EditPart.VISUAL_ID:
	return getDelete_3049ContainedLinks(view);
case master.diagram.edit.parts.Select2EditPart.VISUAL_ID:
	return getSelect_3050ContainedLinks(view);
case master.diagram.edit.parts.Case4EditPart.VISUAL_ID:
	return getCase_3051ContainedLinks(view);
case master.diagram.edit.parts.While2EditPart.VISUAL_ID:
	return getWhile_3052ContainedLinks(view);
case master.diagram.edit.parts.Case5EditPart.VISUAL_ID:
	return getCase_3053ContainedLinks(view);
case master.diagram.edit.parts.For2EditPart.VISUAL_ID:
	return getFor_3054ContainedLinks(view);
case master.diagram.edit.parts.Case6EditPart.VISUAL_ID:
	return getCase_3055ContainedLinks(view);
case master.diagram.edit.parts.Loop2EditPart.VISUAL_ID:
	return getLoop_3056ContainedLinks(view);
case master.diagram.edit.parts.Insert3EditPart.VISUAL_ID:
	return getInsert_3057ContainedLinks(view);
case master.diagram.edit.parts.Update3EditPart.VISUAL_ID:
	return getUpdate_3058ContainedLinks(view);
case master.diagram.edit.parts.Delete3EditPart.VISUAL_ID:
	return getDelete_3059ContainedLinks(view);
case master.diagram.edit.parts.Select3EditPart.VISUAL_ID:
	return getSelect_3060ContainedLinks(view);
case master.diagram.edit.parts.Insert4EditPart.VISUAL_ID:
	return getInsert_3061ContainedLinks(view);
case master.diagram.edit.parts.Update4EditPart.VISUAL_ID:
	return getUpdate_3062ContainedLinks(view);
case master.diagram.edit.parts.Delete4EditPart.VISUAL_ID:
	return getDelete_3063ContainedLinks(view);
case master.diagram.edit.parts.Select4EditPart.VISUAL_ID:
	return getSelect_3064ContainedLinks(view);
case master.diagram.edit.parts.While3EditPart.VISUAL_ID:
	return getWhile_3065ContainedLinks(view);
case master.diagram.edit.parts.Insert5EditPart.VISUAL_ID:
	return getInsert_3066ContainedLinks(view);
case master.diagram.edit.parts.Update5EditPart.VISUAL_ID:
	return getUpdate_3067ContainedLinks(view);
case master.diagram.edit.parts.Delete5EditPart.VISUAL_ID:
	return getDelete_3068ContainedLinks(view);
case master.diagram.edit.parts.Select5EditPart.VISUAL_ID:
	return getSelect_3069ContainedLinks(view);
case master.diagram.edit.parts.For3EditPart.VISUAL_ID:
	return getFor_3070ContainedLinks(view);
case master.diagram.edit.parts.Insert6EditPart.VISUAL_ID:
	return getInsert_3071ContainedLinks(view);
case master.diagram.edit.parts.Update6EditPart.VISUAL_ID:
	return getUpdate_3072ContainedLinks(view);
case master.diagram.edit.parts.Delete6EditPart.VISUAL_ID:
	return getDelete_3073ContainedLinks(view);
case master.diagram.edit.parts.Select6EditPart.VISUAL_ID:
	return getSelect_3074ContainedLinks(view);
case master.diagram.edit.parts.Loop3EditPart.VISUAL_ID:
	return getLoop_3075ContainedLinks(view);
case master.diagram.edit.parts.While4EditPart.VISUAL_ID:
	return getWhile_3076ContainedLinks(view);
case master.diagram.edit.parts.While5EditPart.VISUAL_ID:
	return getWhile_3077ContainedLinks(view);
case master.diagram.edit.parts.For4EditPart.VISUAL_ID:
	return getFor_3078ContainedLinks(view);
case master.diagram.edit.parts.While6EditPart.VISUAL_ID:
	return getWhile_3079ContainedLinks(view);
case master.diagram.edit.parts.Loop4EditPart.VISUAL_ID:
	return getLoop_3080ContainedLinks(view);
case master.diagram.edit.parts.For5EditPart.VISUAL_ID:
	return getFor_3081ContainedLinks(view);
case master.diagram.edit.parts.For6EditPart.VISUAL_ID:
	return getFor_3082ContainedLinks(view);
case master.diagram.edit.parts.Loop5EditPart.VISUAL_ID:
	return getLoop_3083ContainedLinks(view);
case master.diagram.edit.parts.Loop6EditPart.VISUAL_ID:
	return getLoop_3084ContainedLinks(view);
case master.diagram.edit.parts.Open2EditPart.VISUAL_ID:
	return getOpen_3085ContainedLinks(view);
case master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID:
	return getFetch_3086ContainedLinks(view);
case master.diagram.edit.parts.Close2EditPart.VISUAL_ID:
	return getClose_3087ContainedLinks(view);
case master.diagram.edit.parts.Open3EditPart.VISUAL_ID:
	return getOpen_3088ContainedLinks(view);
case master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID:
	return getFetch_3089ContainedLinks(view);
case master.diagram.edit.parts.Close3EditPart.VISUAL_ID:
	return getClose_3090ContainedLinks(view);
case master.diagram.edit.parts.Open4EditPart.VISUAL_ID:
	return getOpen_3091ContainedLinks(view);
case master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID:
	return getFetch_3092ContainedLinks(view);
case master.diagram.edit.parts.Close4EditPart.VISUAL_ID:
	return getClose_3093ContainedLinks(view);
case master.diagram.edit.parts.Open5EditPart.VISUAL_ID:
	return getOpen_3094ContainedLinks(view);
case master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID:
	return getFetch_3095ContainedLinks(view);
case master.diagram.edit.parts.Close5EditPart.VISUAL_ID:
	return getClose_3096ContainedLinks(view);
case master.diagram.edit.parts.Open6EditPart.VISUAL_ID:
	return getOpen_3097ContainedLinks(view);
case master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID:
	return getFetch_3098ContainedLinks(view);
case master.diagram.edit.parts.Close6EditPart.VISUAL_ID:
	return getClose_3099ContainedLinks(view);
case master.diagram.edit.parts.Case7EditPart.VISUAL_ID:
	return getCase_3100ContainedLinks(view);
case master.diagram.edit.parts.Insert7EditPart.VISUAL_ID:
	return getInsert_3101ContainedLinks(view);
case master.diagram.edit.parts.Update7EditPart.VISUAL_ID:
	return getUpdate_3102ContainedLinks(view);
case master.diagram.edit.parts.Delete7EditPart.VISUAL_ID:
	return getDelete_3103ContainedLinks(view);
case master.diagram.edit.parts.Select7EditPart.VISUAL_ID:
	return getSelect_3104ContainedLinks(view);
case master.diagram.edit.parts.While7EditPart.VISUAL_ID:
	return getWhile_3105ContainedLinks(view);
case master.diagram.edit.parts.For7EditPart.VISUAL_ID:
	return getFor_3106ContainedLinks(view);
case master.diagram.edit.parts.Loop7EditPart.VISUAL_ID:
	return getLoop_3107ContainedLinks(view);
case master.diagram.edit.parts.Open7EditPart.VISUAL_ID:
	return getOpen_3108ContainedLinks(view);
case master.diagram.edit.parts.Fetch7EditPart.VISUAL_ID:
	return getFetch_3109ContainedLinks(view);
case master.diagram.edit.parts.Close7EditPart.VISUAL_ID:
	return getClose_3110ContainedLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001IncomingLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002IncomingLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003IncomingLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004IncomingLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001IncomingLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002IncomingLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003IncomingLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004IncomingLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005IncomingLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006IncomingLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007IncomingLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008IncomingLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009IncomingLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010IncomingLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011IncomingLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012IncomingLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013IncomingLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014IncomingLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015IncomingLinks(view);
case master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID:
	return getExpressions_3016IncomingLinks(view);
case master.diagram.edit.parts.Exception2EditPart.VISUAL_ID:
	return getException_3017IncomingLinks(view);
case master.diagram.edit.parts.If2EditPart.VISUAL_ID:
	return getIf_3018IncomingLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3019IncomingLinks(view);
case master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID:
	return getExpressions_3020IncomingLinks(view);
case master.diagram.edit.parts.Exception3EditPart.VISUAL_ID:
	return getException_3021IncomingLinks(view);
case master.diagram.edit.parts.If3EditPart.VISUAL_ID:
	return getIf_3022IncomingLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3023IncomingLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3024IncomingLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3025IncomingLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3026IncomingLinks(view);
case master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID:
	return getExpressions_3027IncomingLinks(view);
case master.diagram.edit.parts.Exception4EditPart.VISUAL_ID:
	return getException_3028IncomingLinks(view);
case master.diagram.edit.parts.If4EditPart.VISUAL_ID:
	return getIf_3029IncomingLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3030IncomingLinks(view);
case master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID:
	return getExpressions_3031IncomingLinks(view);
case master.diagram.edit.parts.Exception5EditPart.VISUAL_ID:
	return getException_3032IncomingLinks(view);
case master.diagram.edit.parts.If5EditPart.VISUAL_ID:
	return getIf_3033IncomingLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3034IncomingLinks(view);
case master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID:
	return getExpressions_3035IncomingLinks(view);
case master.diagram.edit.parts.Exception6EditPart.VISUAL_ID:
	return getException_3036IncomingLinks(view);
case master.diagram.edit.parts.If6EditPart.VISUAL_ID:
	return getIf_3037IncomingLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3038IncomingLinks(view);
case master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID:
	return getExpressions_3039IncomingLinks(view);
case master.diagram.edit.parts.Exception7EditPart.VISUAL_ID:
	return getException_3040IncomingLinks(view);
case master.diagram.edit.parts.If7EditPart.VISUAL_ID:
	return getIf_3041IncomingLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3042IncomingLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3043IncomingLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3044IncomingLinks(view);
case master.diagram.edit.parts.Case2EditPart.VISUAL_ID:
	return getCase_3045IncomingLinks(view);
case master.diagram.edit.parts.Case3EditPart.VISUAL_ID:
	return getCase_3046IncomingLinks(view);
case master.diagram.edit.parts.Insert2EditPart.VISUAL_ID:
	return getInsert_3047IncomingLinks(view);
case master.diagram.edit.parts.Update2EditPart.VISUAL_ID:
	return getUpdate_3048IncomingLinks(view);
case master.diagram.edit.parts.Delete2EditPart.VISUAL_ID:
	return getDelete_3049IncomingLinks(view);
case master.diagram.edit.parts.Select2EditPart.VISUAL_ID:
	return getSelect_3050IncomingLinks(view);
case master.diagram.edit.parts.Case4EditPart.VISUAL_ID:
	return getCase_3051IncomingLinks(view);
case master.diagram.edit.parts.While2EditPart.VISUAL_ID:
	return getWhile_3052IncomingLinks(view);
case master.diagram.edit.parts.Case5EditPart.VISUAL_ID:
	return getCase_3053IncomingLinks(view);
case master.diagram.edit.parts.For2EditPart.VISUAL_ID:
	return getFor_3054IncomingLinks(view);
case master.diagram.edit.parts.Case6EditPart.VISUAL_ID:
	return getCase_3055IncomingLinks(view);
case master.diagram.edit.parts.Loop2EditPart.VISUAL_ID:
	return getLoop_3056IncomingLinks(view);
case master.diagram.edit.parts.Insert3EditPart.VISUAL_ID:
	return getInsert_3057IncomingLinks(view);
case master.diagram.edit.parts.Update3EditPart.VISUAL_ID:
	return getUpdate_3058IncomingLinks(view);
case master.diagram.edit.parts.Delete3EditPart.VISUAL_ID:
	return getDelete_3059IncomingLinks(view);
case master.diagram.edit.parts.Select3EditPart.VISUAL_ID:
	return getSelect_3060IncomingLinks(view);
case master.diagram.edit.parts.Insert4EditPart.VISUAL_ID:
	return getInsert_3061IncomingLinks(view);
case master.diagram.edit.parts.Update4EditPart.VISUAL_ID:
	return getUpdate_3062IncomingLinks(view);
case master.diagram.edit.parts.Delete4EditPart.VISUAL_ID:
	return getDelete_3063IncomingLinks(view);
case master.diagram.edit.parts.Select4EditPart.VISUAL_ID:
	return getSelect_3064IncomingLinks(view);
case master.diagram.edit.parts.While3EditPart.VISUAL_ID:
	return getWhile_3065IncomingLinks(view);
case master.diagram.edit.parts.Insert5EditPart.VISUAL_ID:
	return getInsert_3066IncomingLinks(view);
case master.diagram.edit.parts.Update5EditPart.VISUAL_ID:
	return getUpdate_3067IncomingLinks(view);
case master.diagram.edit.parts.Delete5EditPart.VISUAL_ID:
	return getDelete_3068IncomingLinks(view);
case master.diagram.edit.parts.Select5EditPart.VISUAL_ID:
	return getSelect_3069IncomingLinks(view);
case master.diagram.edit.parts.For3EditPart.VISUAL_ID:
	return getFor_3070IncomingLinks(view);
case master.diagram.edit.parts.Insert6EditPart.VISUAL_ID:
	return getInsert_3071IncomingLinks(view);
case master.diagram.edit.parts.Update6EditPart.VISUAL_ID:
	return getUpdate_3072IncomingLinks(view);
case master.diagram.edit.parts.Delete6EditPart.VISUAL_ID:
	return getDelete_3073IncomingLinks(view);
case master.diagram.edit.parts.Select6EditPart.VISUAL_ID:
	return getSelect_3074IncomingLinks(view);
case master.diagram.edit.parts.Loop3EditPart.VISUAL_ID:
	return getLoop_3075IncomingLinks(view);
case master.diagram.edit.parts.While4EditPart.VISUAL_ID:
	return getWhile_3076IncomingLinks(view);
case master.diagram.edit.parts.While5EditPart.VISUAL_ID:
	return getWhile_3077IncomingLinks(view);
case master.diagram.edit.parts.For4EditPart.VISUAL_ID:
	return getFor_3078IncomingLinks(view);
case master.diagram.edit.parts.While6EditPart.VISUAL_ID:
	return getWhile_3079IncomingLinks(view);
case master.diagram.edit.parts.Loop4EditPart.VISUAL_ID:
	return getLoop_3080IncomingLinks(view);
case master.diagram.edit.parts.For5EditPart.VISUAL_ID:
	return getFor_3081IncomingLinks(view);
case master.diagram.edit.parts.For6EditPart.VISUAL_ID:
	return getFor_3082IncomingLinks(view);
case master.diagram.edit.parts.Loop5EditPart.VISUAL_ID:
	return getLoop_3083IncomingLinks(view);
case master.diagram.edit.parts.Loop6EditPart.VISUAL_ID:
	return getLoop_3084IncomingLinks(view);
case master.diagram.edit.parts.Open2EditPart.VISUAL_ID:
	return getOpen_3085IncomingLinks(view);
case master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID:
	return getFetch_3086IncomingLinks(view);
case master.diagram.edit.parts.Close2EditPart.VISUAL_ID:
	return getClose_3087IncomingLinks(view);
case master.diagram.edit.parts.Open3EditPart.VISUAL_ID:
	return getOpen_3088IncomingLinks(view);
case master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID:
	return getFetch_3089IncomingLinks(view);
case master.diagram.edit.parts.Close3EditPart.VISUAL_ID:
	return getClose_3090IncomingLinks(view);
case master.diagram.edit.parts.Open4EditPart.VISUAL_ID:
	return getOpen_3091IncomingLinks(view);
case master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID:
	return getFetch_3092IncomingLinks(view);
case master.diagram.edit.parts.Close4EditPart.VISUAL_ID:
	return getClose_3093IncomingLinks(view);
case master.diagram.edit.parts.Open5EditPart.VISUAL_ID:
	return getOpen_3094IncomingLinks(view);
case master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID:
	return getFetch_3095IncomingLinks(view);
case master.diagram.edit.parts.Close5EditPart.VISUAL_ID:
	return getClose_3096IncomingLinks(view);
case master.diagram.edit.parts.Open6EditPart.VISUAL_ID:
	return getOpen_3097IncomingLinks(view);
case master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID:
	return getFetch_3098IncomingLinks(view);
case master.diagram.edit.parts.Close6EditPart.VISUAL_ID:
	return getClose_3099IncomingLinks(view);
case master.diagram.edit.parts.Case7EditPart.VISUAL_ID:
	return getCase_3100IncomingLinks(view);
case master.diagram.edit.parts.Insert7EditPart.VISUAL_ID:
	return getInsert_3101IncomingLinks(view);
case master.diagram.edit.parts.Update7EditPart.VISUAL_ID:
	return getUpdate_3102IncomingLinks(view);
case master.diagram.edit.parts.Delete7EditPart.VISUAL_ID:
	return getDelete_3103IncomingLinks(view);
case master.diagram.edit.parts.Select7EditPart.VISUAL_ID:
	return getSelect_3104IncomingLinks(view);
case master.diagram.edit.parts.While7EditPart.VISUAL_ID:
	return getWhile_3105IncomingLinks(view);
case master.diagram.edit.parts.For7EditPart.VISUAL_ID:
	return getFor_3106IncomingLinks(view);
case master.diagram.edit.parts.Loop7EditPart.VISUAL_ID:
	return getLoop_3107IncomingLinks(view);
case master.diagram.edit.parts.Open7EditPart.VISUAL_ID:
	return getOpen_3108IncomingLinks(view);
case master.diagram.edit.parts.Fetch7EditPart.VISUAL_ID:
	return getFetch_3109IncomingLinks(view);
case master.diagram.edit.parts.Close7EditPart.VISUAL_ID:
	return getClose_3110IncomingLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001OutgoingLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002OutgoingLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003OutgoingLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004OutgoingLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001OutgoingLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002OutgoingLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003OutgoingLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004OutgoingLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005OutgoingLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006OutgoingLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007OutgoingLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008OutgoingLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009OutgoingLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010OutgoingLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011OutgoingLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012OutgoingLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013OutgoingLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014OutgoingLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015OutgoingLinks(view);
case master.diagram.edit.parts.Expressions2EditPart.VISUAL_ID:
	return getExpressions_3016OutgoingLinks(view);
case master.diagram.edit.parts.Exception2EditPart.VISUAL_ID:
	return getException_3017OutgoingLinks(view);
case master.diagram.edit.parts.If2EditPart.VISUAL_ID:
	return getIf_3018OutgoingLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3019OutgoingLinks(view);
case master.diagram.edit.parts.Expressions3EditPart.VISUAL_ID:
	return getExpressions_3020OutgoingLinks(view);
case master.diagram.edit.parts.Exception3EditPart.VISUAL_ID:
	return getException_3021OutgoingLinks(view);
case master.diagram.edit.parts.If3EditPart.VISUAL_ID:
	return getIf_3022OutgoingLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3023OutgoingLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3024OutgoingLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3025OutgoingLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3026OutgoingLinks(view);
case master.diagram.edit.parts.Expressions4EditPart.VISUAL_ID:
	return getExpressions_3027OutgoingLinks(view);
case master.diagram.edit.parts.Exception4EditPart.VISUAL_ID:
	return getException_3028OutgoingLinks(view);
case master.diagram.edit.parts.If4EditPart.VISUAL_ID:
	return getIf_3029OutgoingLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3030OutgoingLinks(view);
case master.diagram.edit.parts.Expressions5EditPart.VISUAL_ID:
	return getExpressions_3031OutgoingLinks(view);
case master.diagram.edit.parts.Exception5EditPart.VISUAL_ID:
	return getException_3032OutgoingLinks(view);
case master.diagram.edit.parts.If5EditPart.VISUAL_ID:
	return getIf_3033OutgoingLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3034OutgoingLinks(view);
case master.diagram.edit.parts.Expressions6EditPart.VISUAL_ID:
	return getExpressions_3035OutgoingLinks(view);
case master.diagram.edit.parts.Exception6EditPart.VISUAL_ID:
	return getException_3036OutgoingLinks(view);
case master.diagram.edit.parts.If6EditPart.VISUAL_ID:
	return getIf_3037OutgoingLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3038OutgoingLinks(view);
case master.diagram.edit.parts.Expressions7EditPart.VISUAL_ID:
	return getExpressions_3039OutgoingLinks(view);
case master.diagram.edit.parts.Exception7EditPart.VISUAL_ID:
	return getException_3040OutgoingLinks(view);
case master.diagram.edit.parts.If7EditPart.VISUAL_ID:
	return getIf_3041OutgoingLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3042OutgoingLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3043OutgoingLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3044OutgoingLinks(view);
case master.diagram.edit.parts.Case2EditPart.VISUAL_ID:
	return getCase_3045OutgoingLinks(view);
case master.diagram.edit.parts.Case3EditPart.VISUAL_ID:
	return getCase_3046OutgoingLinks(view);
case master.diagram.edit.parts.Insert2EditPart.VISUAL_ID:
	return getInsert_3047OutgoingLinks(view);
case master.diagram.edit.parts.Update2EditPart.VISUAL_ID:
	return getUpdate_3048OutgoingLinks(view);
case master.diagram.edit.parts.Delete2EditPart.VISUAL_ID:
	return getDelete_3049OutgoingLinks(view);
case master.diagram.edit.parts.Select2EditPart.VISUAL_ID:
	return getSelect_3050OutgoingLinks(view);
case master.diagram.edit.parts.Case4EditPart.VISUAL_ID:
	return getCase_3051OutgoingLinks(view);
case master.diagram.edit.parts.While2EditPart.VISUAL_ID:
	return getWhile_3052OutgoingLinks(view);
case master.diagram.edit.parts.Case5EditPart.VISUAL_ID:
	return getCase_3053OutgoingLinks(view);
case master.diagram.edit.parts.For2EditPart.VISUAL_ID:
	return getFor_3054OutgoingLinks(view);
case master.diagram.edit.parts.Case6EditPart.VISUAL_ID:
	return getCase_3055OutgoingLinks(view);
case master.diagram.edit.parts.Loop2EditPart.VISUAL_ID:
	return getLoop_3056OutgoingLinks(view);
case master.diagram.edit.parts.Insert3EditPart.VISUAL_ID:
	return getInsert_3057OutgoingLinks(view);
case master.diagram.edit.parts.Update3EditPart.VISUAL_ID:
	return getUpdate_3058OutgoingLinks(view);
case master.diagram.edit.parts.Delete3EditPart.VISUAL_ID:
	return getDelete_3059OutgoingLinks(view);
case master.diagram.edit.parts.Select3EditPart.VISUAL_ID:
	return getSelect_3060OutgoingLinks(view);
case master.diagram.edit.parts.Insert4EditPart.VISUAL_ID:
	return getInsert_3061OutgoingLinks(view);
case master.diagram.edit.parts.Update4EditPart.VISUAL_ID:
	return getUpdate_3062OutgoingLinks(view);
case master.diagram.edit.parts.Delete4EditPart.VISUAL_ID:
	return getDelete_3063OutgoingLinks(view);
case master.diagram.edit.parts.Select4EditPart.VISUAL_ID:
	return getSelect_3064OutgoingLinks(view);
case master.diagram.edit.parts.While3EditPart.VISUAL_ID:
	return getWhile_3065OutgoingLinks(view);
case master.diagram.edit.parts.Insert5EditPart.VISUAL_ID:
	return getInsert_3066OutgoingLinks(view);
case master.diagram.edit.parts.Update5EditPart.VISUAL_ID:
	return getUpdate_3067OutgoingLinks(view);
case master.diagram.edit.parts.Delete5EditPart.VISUAL_ID:
	return getDelete_3068OutgoingLinks(view);
case master.diagram.edit.parts.Select5EditPart.VISUAL_ID:
	return getSelect_3069OutgoingLinks(view);
case master.diagram.edit.parts.For3EditPart.VISUAL_ID:
	return getFor_3070OutgoingLinks(view);
case master.diagram.edit.parts.Insert6EditPart.VISUAL_ID:
	return getInsert_3071OutgoingLinks(view);
case master.diagram.edit.parts.Update6EditPart.VISUAL_ID:
	return getUpdate_3072OutgoingLinks(view);
case master.diagram.edit.parts.Delete6EditPart.VISUAL_ID:
	return getDelete_3073OutgoingLinks(view);
case master.diagram.edit.parts.Select6EditPart.VISUAL_ID:
	return getSelect_3074OutgoingLinks(view);
case master.diagram.edit.parts.Loop3EditPart.VISUAL_ID:
	return getLoop_3075OutgoingLinks(view);
case master.diagram.edit.parts.While4EditPart.VISUAL_ID:
	return getWhile_3076OutgoingLinks(view);
case master.diagram.edit.parts.While5EditPart.VISUAL_ID:
	return getWhile_3077OutgoingLinks(view);
case master.diagram.edit.parts.For4EditPart.VISUAL_ID:
	return getFor_3078OutgoingLinks(view);
case master.diagram.edit.parts.While6EditPart.VISUAL_ID:
	return getWhile_3079OutgoingLinks(view);
case master.diagram.edit.parts.Loop4EditPart.VISUAL_ID:
	return getLoop_3080OutgoingLinks(view);
case master.diagram.edit.parts.For5EditPart.VISUAL_ID:
	return getFor_3081OutgoingLinks(view);
case master.diagram.edit.parts.For6EditPart.VISUAL_ID:
	return getFor_3082OutgoingLinks(view);
case master.diagram.edit.parts.Loop5EditPart.VISUAL_ID:
	return getLoop_3083OutgoingLinks(view);
case master.diagram.edit.parts.Loop6EditPart.VISUAL_ID:
	return getLoop_3084OutgoingLinks(view);
case master.diagram.edit.parts.Open2EditPart.VISUAL_ID:
	return getOpen_3085OutgoingLinks(view);
case master.diagram.edit.parts.Fetch2EditPart.VISUAL_ID:
	return getFetch_3086OutgoingLinks(view);
case master.diagram.edit.parts.Close2EditPart.VISUAL_ID:
	return getClose_3087OutgoingLinks(view);
case master.diagram.edit.parts.Open3EditPart.VISUAL_ID:
	return getOpen_3088OutgoingLinks(view);
case master.diagram.edit.parts.Fetch3EditPart.VISUAL_ID:
	return getFetch_3089OutgoingLinks(view);
case master.diagram.edit.parts.Close3EditPart.VISUAL_ID:
	return getClose_3090OutgoingLinks(view);
case master.diagram.edit.parts.Open4EditPart.VISUAL_ID:
	return getOpen_3091OutgoingLinks(view);
case master.diagram.edit.parts.Fetch4EditPart.VISUAL_ID:
	return getFetch_3092OutgoingLinks(view);
case master.diagram.edit.parts.Close4EditPart.VISUAL_ID:
	return getClose_3093OutgoingLinks(view);
case master.diagram.edit.parts.Open5EditPart.VISUAL_ID:
	return getOpen_3094OutgoingLinks(view);
case master.diagram.edit.parts.Fetch5EditPart.VISUAL_ID:
	return getFetch_3095OutgoingLinks(view);
case master.diagram.edit.parts.Close5EditPart.VISUAL_ID:
	return getClose_3096OutgoingLinks(view);
case master.diagram.edit.parts.Open6EditPart.VISUAL_ID:
	return getOpen_3097OutgoingLinks(view);
case master.diagram.edit.parts.Fetch6EditPart.VISUAL_ID:
	return getFetch_3098OutgoingLinks(view);
case master.diagram.edit.parts.Close6EditPart.VISUAL_ID:
	return getClose_3099OutgoingLinks(view);
case master.diagram.edit.parts.Case7EditPart.VISUAL_ID:
	return getCase_3100OutgoingLinks(view);
case master.diagram.edit.parts.Insert7EditPart.VISUAL_ID:
	return getInsert_3101OutgoingLinks(view);
case master.diagram.edit.parts.Update7EditPart.VISUAL_ID:
	return getUpdate_3102OutgoingLinks(view);
case master.diagram.edit.parts.Delete7EditPart.VISUAL_ID:
	return getDelete_3103OutgoingLinks(view);
case master.diagram.edit.parts.Select7EditPart.VISUAL_ID:
	return getSelect_3104OutgoingLinks(view);
case master.diagram.edit.parts.While7EditPart.VISUAL_ID:
	return getWhile_3105OutgoingLinks(view);
case master.diagram.edit.parts.For7EditPart.VISUAL_ID:
	return getFor_3106OutgoingLinks(view);
case master.diagram.edit.parts.Loop7EditPart.VISUAL_ID:
	return getLoop_3107OutgoingLinks(view);
case master.diagram.edit.parts.Open7EditPart.VISUAL_ID:
	return getOpen_3108OutgoingLinks(view);
case master.diagram.edit.parts.Fetch7EditPart.VISUAL_ID:
	return getFetch_3109OutgoingLinks(view);
case master.diagram.edit.parts.Close7EditPart.VISUAL_ID:
	return getClose_3110OutgoingLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getMaster_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Master modelElement = (master.Master) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3016ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3017ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3018ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3019ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3020ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3021ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3022ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3023ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3024ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3025ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3026ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3027ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3028ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3029ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3030ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3031ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3032ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3033ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3034ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3035ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3036ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3037ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3038ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3039ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3040ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3041ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3042ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3043ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3044ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3045ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3046ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3047ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3048ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3049ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3050ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3051ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3052ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3053ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3054ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3055ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3056ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3057ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3058ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3059ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3060ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3061ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3062ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3063ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3064ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3065ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3066ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3067ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3068ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3069ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3070ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3071ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3072ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3073ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3074ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3075ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3076ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3077ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3078ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3079ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3080ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3081ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3082ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3083ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3084ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3085ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3086ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3087ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3088ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3089ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3090ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3091ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3092ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3093ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3094ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3095ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3096ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3097ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3098ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3099ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3100ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3101ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3102ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3103ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3104ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3105ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3106ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3107ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3108ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3109ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3110ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3016IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3017IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3018IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3019IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3020IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3021IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3022IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3023IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3024IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3025IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3026IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3027IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3028IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3029IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3030IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3031IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3032IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3033IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3034IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3035IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3036IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3037IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3038IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3039IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3040IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3041IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3042IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3043IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3044IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3045IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3046IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3047IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3048IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3049IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3050IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3051IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3052IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3053IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3054IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3055IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3056IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3057IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3058IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3059IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3060IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3061IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3062IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3063IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3064IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3065IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3066IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3067IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3068IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3069IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3070IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3071IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3072IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3073IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3074IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3075IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3076IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3077IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3078IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3079IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3080IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3081IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3082IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3083IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3084IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3085IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3086IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3087IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3088IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3089IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3090IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3091IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3092IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3093IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3094IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3095IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3096IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3097IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3098IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3099IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3100IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3101IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3102IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3103IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3104IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3105IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3106IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3107IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3108IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3109IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3110IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3016OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3017OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3018OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3019OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3020OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3021OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3022OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3023OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3024OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3025OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3026OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3027OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3028OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3029OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3030OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3031OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3032OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3033OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3034OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3035OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3036OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3037OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3038OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3039OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3040OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3041OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3042OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3043OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3044OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3045OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3046OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3047OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3048OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3049OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3050OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3051OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3052OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3053OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3054OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3055OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3056OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3057OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3058OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3059OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3060OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3061OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3062OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3063OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3064OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3065OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3066OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3067OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3068OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3069OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3070OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3071OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3072OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3073OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3074OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3075OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3076OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3077OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3078OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3079OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3080OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3081OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3082OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3083OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3084OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3085OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3086OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3087OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3088OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3089OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3090OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3091OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3092OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3093OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3094OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3095OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3096OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3097OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3098OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3099OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3100OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3101OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3102OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3103OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3104OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3105OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3106OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3107OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3108OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3109OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3110OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getContainedTypeModelFacetLinks_Transition_4001(master.Master container) {
	java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getTransitions().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof master.Transition) {
		continue;
	}
	master.Transition link = (master.Transition) linkObject;
		if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			master.Objects dst = link.getEnd();
							master.Objects src = link.getStart();
							result.add(new master.diagram.part.MasterLinkDescriptor(src, dst, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getIncomingTypeModelFacetLinks_Transition_4001(master.Objects target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != master.MasterPackage.eINSTANCE.getTransition_End() || false == setting.getEObject() instanceof master.Transition) {
	continue;
}
master.Transition link = (master.Transition) setting.getEObject();
	if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				master.Objects src = link.getStart();
			result.add(new master.diagram.part.MasterLinkDescriptor(src, target, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
				
		/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getOutgoingTypeModelFacetLinks_Transition_4001(master.Objects source) {
	master.Master container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof master.Master) {
			container = (master.Master) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getTransitions().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof master.Transition) {
		continue;
	}
	master.Transition link = (master.Transition) linkObject;
		if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			master.Objects dst = link.getEnd();
							master.Objects src = link.getStart();
								if (src != source) {
	continue;
}
						result.add(new master.diagram.part.MasterLinkDescriptor(src, dst, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}		
		
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
