/*
 * 
 */
package filesystem.diagram.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.RoundedRectangle;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Color;

import filesystem.diagram.edit.policies.OpenDiagramEditPolicy;
import filesystem.diagram.edit.policies.UpdateItemSemanticEditPolicy;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class UpdateEditPart extends ShapeNodeEditPart {

	/**
	 * @generated
	 */
	public static final int VISUAL_ID = 2005;

	/**
	 * @generated
	 */
	protected IFigure contentPane;

	/**
	 * @generated
	 */
	protected IFigure primaryShape;

	/**
	 * @generated
	 */
	public UpdateEditPart(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
				new UpdateItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		installEditPolicy(EditPolicyRoles.OPEN_ROLE,
				new OpenDiagramEditPolicy()); // XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = child
						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
				}
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
			}
		};
		return lep;
	}

	/**
	 * @generated
	 */
	protected IFigure createNodeShape() {
		return primaryShape = new UpdateFigure();
	}

	/**
	 * @generated
	 */
	public UpdateFigure getPrimaryShape() {
		return (UpdateFigure) primaryShape;
	}

	/**
	 * @generated
	 */
	protected boolean addFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof UpdateNameExecutablePartEditPart) {
			((UpdateNameExecutablePartEditPart) childEditPart)
					.setLabel(getPrimaryShape().getFigureUpdateLabelFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateIfsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateCasesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateInsertsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateUpdatesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateDeletesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateSelectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateOutuputsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateCursorsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateWhilesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateForsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateLoopsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((UpdateUpdateLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof UpdateNameExecutablePartEditPart) {
			return true;
		}
		if (childEditPart instanceof UpdateUpdateIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateIfsCompartmentFigure();
			pane.remove(((UpdateUpdateIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateCasesCompartmentFigure();
			pane.remove(((UpdateUpdateCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateInsertsCompartmentFigure();
			pane.remove(((UpdateUpdateInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateUpdatesCompartmentFigure();
			pane.remove(((UpdateUpdateUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateDeletesCompartmentFigure();
			pane.remove(((UpdateUpdateDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateSelectsCompartmentFigure();
			pane.remove(((UpdateUpdateSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateOutuputsCompartmentFigure();
			pane.remove(((UpdateUpdateOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getUpdateCursorsCompartmentFigure();
			pane.remove(((UpdateUpdateCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateWhilesCompartmentFigure();
			pane.remove(((UpdateUpdateWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateForsCompartmentFigure();
			pane.remove(((UpdateUpdateForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof UpdateUpdateLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getUpdateLoopsCompartmentFigure();
			pane.remove(((UpdateUpdateLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	/**
	 * @generated
	 */
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if (editPart instanceof UpdateUpdateIfsCompartment2EditPart) {
			return getPrimaryShape().getUpdateIfsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateCasesCompartment2EditPart) {
			return getPrimaryShape().getUpdateCasesCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateInsertsCompartment2EditPart) {
			return getPrimaryShape().getUpdateInsertsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateUpdatesCompartment2EditPart) {
			return getPrimaryShape().getUpdateUpdatesCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateDeletesCompartment2EditPart) {
			return getPrimaryShape().getUpdateDeletesCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateSelectsCompartment2EditPart) {
			return getPrimaryShape().getUpdateSelectsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateOutuputsCompartment2EditPart) {
			return getPrimaryShape().getUpdateOutuputsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateCursorsCompartment2EditPart) {
			return getPrimaryShape().getUpdateCursorsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateWhilesCompartment2EditPart) {
			return getPrimaryShape().getUpdateWhilesCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateForsCompartment2EditPart) {
			return getPrimaryShape().getUpdateForsCompartmentFigure();
		}
		if (editPart instanceof UpdateUpdateLoopsCompartment2EditPart) {
			return getPrimaryShape().getUpdateLoopsCompartmentFigure();
		}
		return getContentPane();
	}

	/**
	 * @generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(40, 40);
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @generated
	 */
	protected void setForegroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setBackgroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineWidth(width);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineType(int style) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineStyle(style);
		}
	}

	/**
	 * @generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(FilesystemVisualIDRegistry
				.getType(UpdateNameExecutablePartEditPart.VISUAL_ID));
	}

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(Notification event) {
		if (event.getNotifier() == getModel()
				&& EcorePackage.eINSTANCE.getEModelElement_EAnnotations()
						.equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}

	/**
	 * @generated
	 */
	public class UpdateFigure extends RoundedRectangle {

		/**
		 * @generated
		 */
		private WrappingLabel fFigureUpdateLabelFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateIfsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateCasesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateInsertsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateUpdatesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateDeletesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateSelectsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateOutuputsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateCursorsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateWhilesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateForsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fUpdateLoopsCompartmentFigure;

		/**
		 * @generated
		 */
		public UpdateFigure() {
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8),
					getMapMode().DPtoLP(8)));
			this.setBorder(new MarginBorder(getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5), getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5)));
			createContents();
		}

		/**
		 * @generated
		 */
		private void createContents() {

			fFigureUpdateLabelFigure = new WrappingLabel();

			fFigureUpdateLabelFigure.setText("Update");
			fFigureUpdateLabelFigure.setMaximumSize(new Dimension(getMapMode()
					.DPtoLP(10000), getMapMode().DPtoLP(50)));

			this.add(fFigureUpdateLabelFigure);

			fUpdateIfsCompartmentFigure = new RectangleFigure();

			fUpdateIfsCompartmentFigure.setOutline(false);

			this.add(fUpdateIfsCompartmentFigure);

			fUpdateCasesCompartmentFigure = new RectangleFigure();

			fUpdateCasesCompartmentFigure.setOutline(false);

			this.add(fUpdateCasesCompartmentFigure);

			fUpdateInsertsCompartmentFigure = new RectangleFigure();

			fUpdateInsertsCompartmentFigure.setOutline(false);

			this.add(fUpdateInsertsCompartmentFigure);

			fUpdateUpdatesCompartmentFigure = new RectangleFigure();

			fUpdateUpdatesCompartmentFigure.setOutline(false);

			this.add(fUpdateUpdatesCompartmentFigure);

			fUpdateDeletesCompartmentFigure = new RectangleFigure();

			fUpdateDeletesCompartmentFigure.setOutline(false);

			this.add(fUpdateDeletesCompartmentFigure);

			fUpdateSelectsCompartmentFigure = new RectangleFigure();

			fUpdateSelectsCompartmentFigure.setOutline(false);

			this.add(fUpdateSelectsCompartmentFigure);

			fUpdateOutuputsCompartmentFigure = new RectangleFigure();

			fUpdateOutuputsCompartmentFigure.setOutline(false);

			this.add(fUpdateOutuputsCompartmentFigure);

			fUpdateCursorsCompartmentFigure = new RectangleFigure();

			fUpdateCursorsCompartmentFigure.setOutline(false);

			this.add(fUpdateCursorsCompartmentFigure);

			fUpdateWhilesCompartmentFigure = new RectangleFigure();

			fUpdateWhilesCompartmentFigure.setOutline(false);

			this.add(fUpdateWhilesCompartmentFigure);

			fUpdateForsCompartmentFigure = new RectangleFigure();

			fUpdateForsCompartmentFigure.setOutline(false);

			this.add(fUpdateForsCompartmentFigure);

			fUpdateLoopsCompartmentFigure = new RectangleFigure();

			fUpdateLoopsCompartmentFigure.setOutline(false);

			this.add(fUpdateLoopsCompartmentFigure);

		}

		/**
		 * @generated
		 */
		public WrappingLabel getFigureUpdateLabelFigure() {
			return fFigureUpdateLabelFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateIfsCompartmentFigure() {
			return fUpdateIfsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateCasesCompartmentFigure() {
			return fUpdateCasesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateInsertsCompartmentFigure() {
			return fUpdateInsertsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateUpdatesCompartmentFigure() {
			return fUpdateUpdatesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateDeletesCompartmentFigure() {
			return fUpdateDeletesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateSelectsCompartmentFigure() {
			return fUpdateSelectsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateOutuputsCompartmentFigure() {
			return fUpdateOutuputsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateCursorsCompartmentFigure() {
			return fUpdateCursorsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateWhilesCompartmentFigure() {
			return fUpdateWhilesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateForsCompartmentFigure() {
			return fUpdateForsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getUpdateLoopsCompartmentFigure() {
			return fUpdateLoopsCompartmentFigure;
		}

	}

}
