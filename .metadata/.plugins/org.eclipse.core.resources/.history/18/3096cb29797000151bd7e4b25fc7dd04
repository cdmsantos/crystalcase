/*
 * 
 */
package filesystem.diagram.edit.policies;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;

import filesystem.diagram.edit.commands.CaseCreateCommand;
import filesystem.diagram.edit.commands.CursorCreateCommand;
import filesystem.diagram.edit.commands.Data_TypeCreateCommand;
import filesystem.diagram.edit.commands.DeclarativePartCreateCommand;
import filesystem.diagram.edit.commands.DeleteCreateCommand;
import filesystem.diagram.edit.commands.ExceptionCreateCommand;
import filesystem.diagram.edit.commands.ExecutablePartCreateCommand;
import filesystem.diagram.edit.commands.ForCreateCommand;
import filesystem.diagram.edit.commands.IfCreateCommand;
import filesystem.diagram.edit.commands.InsertCreateCommand;
import filesystem.diagram.edit.commands.LoopCreateCommand;
import filesystem.diagram.edit.commands.OutputCreateCommand;
import filesystem.diagram.edit.commands.ParameterInCreateCommand;
import filesystem.diagram.edit.commands.ParameterInOutCreateCommand;
import filesystem.diagram.edit.commands.ParameterOutCreateCommand;
import filesystem.diagram.edit.commands.ParametersCreateCommand;
import filesystem.diagram.edit.commands.ReturnCreateCommand;
import filesystem.diagram.edit.commands.SelectCreateCommand;
import filesystem.diagram.edit.commands.UpdateCreateCommand;
import filesystem.diagram.edit.commands.WhileCreateCommand;
import filesystem.diagram.providers.FilesystemElementTypes;

/**
 * @generated
 */
public class FilesystemItemSemanticEditPolicy extends
		FilesystemBaseItemSemanticEditPolicy {

	/**
	 * @generated
	 */
	public FilesystemItemSemanticEditPolicy() {
		super(FilesystemElementTypes.Filesystem_1000);
	}

	/**
	 * @generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		if (FilesystemElementTypes.Exception_2002 == req.getElementType()) {
			return getGEFWrapper(new ExceptionCreateCommand(req));
		}
		if (FilesystemElementTypes.If_2003 == req.getElementType()) {
			return getGEFWrapper(new IfCreateCommand(req));
		}
		if (FilesystemElementTypes.Case_2004 == req.getElementType()) {
			return getGEFWrapper(new CaseCreateCommand(req));
		}
		if (FilesystemElementTypes.Insert_2005 == req.getElementType()) {
			return getGEFWrapper(new InsertCreateCommand(req));
		}
		if (FilesystemElementTypes.Update_2006 == req.getElementType()) {
			return getGEFWrapper(new UpdateCreateCommand(req));
		}
		if (FilesystemElementTypes.Delete_2007 == req.getElementType()) {
			return getGEFWrapper(new DeleteCreateCommand(req));
		}
		if (FilesystemElementTypes.Select_2008 == req.getElementType()) {
			return getGEFWrapper(new SelectCreateCommand(req));
		}
		if (FilesystemElementTypes.Output_2009 == req.getElementType()) {
			return getGEFWrapper(new OutputCreateCommand(req));
		}
		if (FilesystemElementTypes.Cursor_2010 == req.getElementType()) {
			return getGEFWrapper(new CursorCreateCommand(req));
		}
		if (FilesystemElementTypes.While_2011 == req.getElementType()) {
			return getGEFWrapper(new WhileCreateCommand(req));
		}
		if (FilesystemElementTypes.For_2012 == req.getElementType()) {
			return getGEFWrapper(new ForCreateCommand(req));
		}
		if (FilesystemElementTypes.Loop_2013 == req.getElementType()) {
			return getGEFWrapper(new LoopCreateCommand(req));
		}
		if (FilesystemElementTypes.ParameterIn_2014 == req.getElementType()) {
			return getGEFWrapper(new ParameterInCreateCommand(req));
		}
		if (FilesystemElementTypes.ParameterOut_2015 == req.getElementType()) {
			return getGEFWrapper(new ParameterOutCreateCommand(req));
		}
		if (FilesystemElementTypes.ParameterInOut_2016 == req.getElementType()) {
			return getGEFWrapper(new ParameterInOutCreateCommand(req));
		}
		if (FilesystemElementTypes.DeclarativePart_2017 == req.getElementType()) {
			return getGEFWrapper(new DeclarativePartCreateCommand(req));
		}
		if (FilesystemElementTypes.ExecutablePart_2018 == req.getElementType()) {
			return getGEFWrapper(new ExecutablePartCreateCommand(req));
		}
		if (FilesystemElementTypes.Return_2019 == req.getElementType()) {
			return getGEFWrapper(new ReturnCreateCommand(req));
		}
		if (FilesystemElementTypes.Parameters_2020 == req.getElementType()) {
			return getGEFWrapper(new ParametersCreateCommand(req));
		}
		return super.getCreateCommand(req);
	}

	/**
	 * @generated
	 */
	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
				.getEditingDomain();
		return getGEFWrapper(new DuplicateAnythingCommand(editingDomain, req));
	}

	/**
	 * @generated
	 */
	private static class DuplicateAnythingCommand extends
			DuplicateEObjectsCommand {

		/**
		 * @generated
		 */
		public DuplicateAnythingCommand(
				TransactionalEditingDomain editingDomain,
				DuplicateElementsRequest req) {
			super(editingDomain, req.getLabel(), req
					.getElementsToBeDuplicated(), req
					.getAllDuplicatedElementsMap());
		}

	}

}
