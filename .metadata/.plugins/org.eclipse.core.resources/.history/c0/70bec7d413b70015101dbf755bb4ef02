@namespace(uri="master", prefix="master")
@gmf

package master;

@gmf.diagram
class Master {
	val Transition[*] transitions;
	
	val Parameters[1] parameters;
	val Return[1] return;
	val DeclarativePart[1] declarativePart;
	val ExecutablePart[1] executablePart;
	
	val Variables[*] variables;
	
} 


//Sections
class Sections{
}

@gmf.node(label="name", figure="rounded", size="150,200", border.color="255,13,13", border.style="dash", label.readOnly="true") //vermelho	
class Parameters extends Sections{
	attr String[1] name="Parameters";
	@gmf.compartment
	val Variables[*] variables;
}

@gmf.node(label="name", figure="rectangle", size="150,200", border.color="25,191,108", border.style="dash") //azul	
class Return extends Sections{
	attr String[1] name="Return";
	@gmf.compartment
	val Variables[*] variables;
}

@gmf.node(label="name", figure="rectangle", size="150,200", border.color="43,106,215", border.style="dash") //verde
class DeclarativePart extends Sections{
	attr String[1] name="Declarative Part";
	@gmf.compartment
	val Variables[*] variables;
}

@gmf.node(label="name", size="450,450", figure="rectangle", border.color="158,25,191", border.style="dash") //roxo	
class ExecutablePart extends Sections{
	attr String[1] name="Executable Part";
	@gmf.compartment
	val Objects[*] objects;
}

//Variables

class Variables{	
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/datatype.svg", label.icon="false", label.placement="none")
class DataType extends Variables{
	attr String[1] name="data type";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/collections.svg", label.icon="false", label.placement="none")
class Collections extends Variables{
	attr String[1] name="collections";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/records.svg", label.icon="false", label.placement="none")
class Records extends Variables{
	attr String[1] name="records";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/cursor.svg", label.icon="false", label.placement="none")
class Cursor extends Variables {
	attr String[1] name="cursor";
}

//Objects
class Objects{
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/expression.svg", label.icon="false", label.placement="none")
class Expressions extends Objects{
	attr String[1] name="expressions";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/exception.svg", label.icon="false", label.placement="none")
class Exception extends Objects{
	attr String[1] name="exception";
}

@gmf.node(label="name", figure="rounded", label.icon="false", label.placement="internal",
	size="70,70", border.color="158,25,191", border.style="dash")
class If extends Objects{
	attr String[1] name="if";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/case.svg", label.icon="false", label.placement="none")
class Case extends Objects{
	attr String[1] name="case";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/insert.svg", label.icon="false", label.placement="none")
class Insert extends Objects{
	attr String[1] name="insert";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/update.svg", label.icon="false", label.placement="none")
class Update extends Objects{
	attr String[1] name="update";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/delete.svg", label.icon="false", label.placement="none")
class Delete extends Objects{
	attr String[1] name="delete";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/select.svg", label.icon="false", label.placement="none")
class Select extends Objects{
	attr String[1] name="select";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/while.svg", label.icon="false", label.placement="none")
class While extends Objects{
	attr String[1] name="while";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/for.svg", label.icon="false", label.placement="none")
class For extends Objects{
	attr String[1] name="for";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/loop.svg", label.icon="false", label.placement="none")
class Loop extends Objects{
	attr String[1] name="loop";
	@gmf.compartment
	val Objects[*] objects;
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/open.svg", label.icon="false", label.placement="none")
class Open extends Objects{
	attr String[1] name="open";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/fetch.svg", label.icon="false", label.placement="none")
class Fetch extends Objects{
	attr String[1] name="fetch";
}

@gmf.node(label="name", figure="svg", svg.uri="platform:/plugin/CINproject/icons/close.svg", label.icon="false", label.placement="none")
class Close extends Objects{
	attr String[1] name="close";
}

@gmf.link(source="start", target="end", target.decoration="arrow", color="0,0,0")
class Transition{
	ref Objects start;
	ref Objects end;
}

