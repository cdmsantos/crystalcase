/*
 * 
 */
package filesystem.diagram.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.RoundedRectangle;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Color;

import filesystem.diagram.edit.policies.ExecutablePartItemSemanticEditPolicy;
import filesystem.diagram.edit.policies.OpenDiagramEditPolicy;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class ExecutablePartEditPart extends ShapeNodeEditPart {

	/**
	 * @generated
	 */
	public static final int VISUAL_ID = 2015;

	/**
	 * @generated
	 */
	protected IFigure contentPane;

	/**
	 * @generated
	 */
	protected IFigure primaryShape;

	/**
	 * @generated
	 */
	public ExecutablePartEditPart(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
				new ExecutablePartItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		installEditPolicy(EditPolicyRoles.OPEN_ROLE,
				new OpenDiagramEditPolicy()); // XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = child
						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
				}
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
			}
		};
		return lep;
	}

	/**
	 * @generated
	 */
	protected IFigure createNodeShape() {
		return primaryShape = new ExecutablePartFigure();
	}

	/**
	 * @generated
	 */
	public ExecutablePartFigure getPrimaryShape() {
		return (ExecutablePartFigure) primaryShape;
	}

	/**
	 * @generated
	 */
	protected boolean addFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof ExecutablePartNameExecutablePartEditPart) {
			((ExecutablePartNameExecutablePartEditPart) childEditPart)
					.setLabel(getPrimaryShape()
							.getFigureExecutablePartLabelFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartIfsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartIfsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartIfsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartCasesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartCasesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartCasesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartInsertsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartInsertsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartInsertsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartUpdatesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartUpdatesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartUpdatesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartDeletesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartDeletesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartDeletesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartSelectsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartSelectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartSelectsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartOutuputsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartOutuputsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartOutuputsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartCursorsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartCursorsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartCursorsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartWhilesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartWhilesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartWhilesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartForsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartForsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartForsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartLoopsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartLoopsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ExecutablePartExecutablePartLoopsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof ExecutablePartNameExecutablePartEditPart) {
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartIfsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartIfsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartIfsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartCasesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartCasesCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartCasesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartInsertsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartInsertsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartInsertsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartUpdatesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartUpdatesCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartUpdatesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartDeletesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartDeletesCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartDeletesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartSelectsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartSelectsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartSelectsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartOutuputsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartOutuputsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartOutuputsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartCursorsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartCursorsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartCursorsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartWhilesCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartWhilesCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartWhilesCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartForsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartForsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartForsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof ExecutablePartExecutablePartLoopsCompartmentEditPart) {
			IFigure pane = getPrimaryShape()
					.getExecutablePartLoopsCompartmentFigure();
			pane.remove(((ExecutablePartExecutablePartLoopsCompartmentEditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	/**
	 * @generated
	 */
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if (editPart instanceof ExecutablePartExecutablePartIfsCompartmentEditPart) {
			return getPrimaryShape().getExecutablePartIfsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartCasesCompartmentEditPart) {
			return getPrimaryShape().getExecutablePartCasesCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartInsertsCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartInsertsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartUpdatesCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartUpdatesCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartDeletesCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartDeletesCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartSelectsCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartSelectsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartOutuputsCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartOutuputsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartCursorsCompartmentEditPart) {
			return getPrimaryShape()
					.getExecutablePartCursorsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartWhilesCompartmentEditPart) {
			return getPrimaryShape().getExecutablePartWhilesCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartForsCompartmentEditPart) {
			return getPrimaryShape().getExecutablePartForsCompartmentFigure();
		}
		if (editPart instanceof ExecutablePartExecutablePartLoopsCompartmentEditPart) {
			return getPrimaryShape().getExecutablePartLoopsCompartmentFigure();
		}
		return getContentPane();
	}

	/**
	 * @generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(40, 40);
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @generated
	 */
	protected void setForegroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setBackgroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineWidth(width);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineType(int style) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineStyle(style);
		}
	}

	/**
	 * @generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(FilesystemVisualIDRegistry
				.getType(ExecutablePartNameExecutablePartEditPart.VISUAL_ID));
	}

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(Notification event) {
		if (event.getNotifier() == getModel()
				&& EcorePackage.eINSTANCE.getEModelElement_EAnnotations()
						.equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}

	/**
	 * @generated
	 */
	public class ExecutablePartFigure extends RoundedRectangle {

		/**
		 * @generated
		 */
		private WrappingLabel fFigureExecutablePartLabelFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartIfsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartCasesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartInsertsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartUpdatesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartDeletesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartSelectsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartOutuputsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartCursorsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartWhilesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartForsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fExecutablePartLoopsCompartmentFigure;

		/**
		 * @generated
		 */
		public ExecutablePartFigure() {
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8),
					getMapMode().DPtoLP(8)));
			this.setBorder(new MarginBorder(getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5), getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5)));
			createContents();
		}

		/**
		 * @generated
		 */
		private void createContents() {

			fFigureExecutablePartLabelFigure = new WrappingLabel();

			fFigureExecutablePartLabelFigure.setText("ExecutablePart");
			fFigureExecutablePartLabelFigure.setMaximumSize(new Dimension(
					getMapMode().DPtoLP(10000), getMapMode().DPtoLP(50)));

			this.add(fFigureExecutablePartLabelFigure);

			fExecutablePartIfsCompartmentFigure = new RectangleFigure();

			fExecutablePartIfsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartIfsCompartmentFigure);

			fExecutablePartCasesCompartmentFigure = new RectangleFigure();

			fExecutablePartCasesCompartmentFigure.setOutline(false);

			this.add(fExecutablePartCasesCompartmentFigure);

			fExecutablePartInsertsCompartmentFigure = new RectangleFigure();

			fExecutablePartInsertsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartInsertsCompartmentFigure);

			fExecutablePartUpdatesCompartmentFigure = new RectangleFigure();

			fExecutablePartUpdatesCompartmentFigure.setOutline(false);

			this.add(fExecutablePartUpdatesCompartmentFigure);

			fExecutablePartDeletesCompartmentFigure = new RectangleFigure();

			fExecutablePartDeletesCompartmentFigure.setOutline(false);

			this.add(fExecutablePartDeletesCompartmentFigure);

			fExecutablePartSelectsCompartmentFigure = new RectangleFigure();

			fExecutablePartSelectsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartSelectsCompartmentFigure);

			fExecutablePartOutuputsCompartmentFigure = new RectangleFigure();

			fExecutablePartOutuputsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartOutuputsCompartmentFigure);

			fExecutablePartCursorsCompartmentFigure = new RectangleFigure();

			fExecutablePartCursorsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartCursorsCompartmentFigure);

			fExecutablePartWhilesCompartmentFigure = new RectangleFigure();

			fExecutablePartWhilesCompartmentFigure.setOutline(false);

			this.add(fExecutablePartWhilesCompartmentFigure);

			fExecutablePartForsCompartmentFigure = new RectangleFigure();

			fExecutablePartForsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartForsCompartmentFigure);

			fExecutablePartLoopsCompartmentFigure = new RectangleFigure();

			fExecutablePartLoopsCompartmentFigure.setOutline(false);

			this.add(fExecutablePartLoopsCompartmentFigure);

		}

		/**
		 * @generated
		 */
		public WrappingLabel getFigureExecutablePartLabelFigure() {
			return fFigureExecutablePartLabelFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartIfsCompartmentFigure() {
			return fExecutablePartIfsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartCasesCompartmentFigure() {
			return fExecutablePartCasesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartInsertsCompartmentFigure() {
			return fExecutablePartInsertsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartUpdatesCompartmentFigure() {
			return fExecutablePartUpdatesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartDeletesCompartmentFigure() {
			return fExecutablePartDeletesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartSelectsCompartmentFigure() {
			return fExecutablePartSelectsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartOutuputsCompartmentFigure() {
			return fExecutablePartOutuputsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartCursorsCompartmentFigure() {
			return fExecutablePartCursorsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartWhilesCompartmentFigure() {
			return fExecutablePartWhilesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartForsCompartmentFigure() {
			return fExecutablePartForsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getExecutablePartLoopsCompartmentFigure() {
			return fExecutablePartLoopsCompartmentFigure;
		}

	}

}
