	/*
 * 
 */
package crystal.diagram.part;

	/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented
 * by a domain model object.
 * 
 * @generated
 */
public class CrystalVisualIDRegistry {

		/**
 * @generated
 */
	private static final String DEBUG_KEY = "br.ufpe.cin.crystalcase.diagram/debug/visualID";  //$NON-NLS-1$

		/**
 * @generated
 */
public static int getVisualID(org.eclipse.gmf.runtime.notation.View view) {
	if (view instanceof org.eclipse.gmf.runtime.notation.Diagram) {
		if (crystal.diagram.edit.parts.CrystalEditPart.MODEL_ID.equals(view.getType())) {
			return crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID;
		} else {
			return -1;
		}
	}
	return crystal.diagram.part.CrystalVisualIDRegistry.getVisualID(view.getType());
}
	
		/**
 * @generated
 */
public static String getModelID(org.eclipse.gmf.runtime.notation.View view) {
	org.eclipse.gmf.runtime.notation.View diagram = view.getDiagram();
	while (view != diagram) {
		org.eclipse.emf.ecore.EAnnotation annotation = view.getEAnnotation("Shortcut");  //$NON-NLS-1$
		if (annotation != null) {
			return (String) annotation.getDetails().get("modelID");  //$NON-NLS-1$
		}
		view = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
	}
	return diagram != null ? diagram.getType() : null;
}
	
		/**
 * @generated
 */
public static int getVisualID(String type) {
	try {
		return Integer.parseInt(type);
	} catch (NumberFormatException e) {
		if (Boolean.TRUE.toString().equalsIgnoreCase(org.eclipse.core.runtime.Platform.getDebugOption(DEBUG_KEY))) {
			crystal.diagram.part.CrystalDiagramEditorPlugin.getInstance().logError("Unable to parse view type as a visualID number: " + type);
		}
	}
	return -1;
}

	/**
 * @generated
 */
public static String getType(int visualID) {
	return Integer.toString(visualID);
}
	
		/**
 * @generated
 */
public static int getDiagramVisualID(org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null) {
		return -1;
	}
	if (crystal.CrystalPackage.eINSTANCE.getCrystal().isSuperTypeOf(domainElement.eClass()) && isDiagram((crystal.Crystal) domainElement)) {
	return crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID;
}
	return -1;
}
	
		/**
 * @generated
 */
public static int getNodeVisualID(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null) {
		return -1;
	}
	String containerModelID = crystal.diagram.part.CrystalVisualIDRegistry.getModelID(containerView);
	if (!crystal.diagram.edit.parts.CrystalEditPart.MODEL_ID.equals(containerModelID) && !"crystal".equals(containerModelID)) {  //$NON-NLS-1$
		return -1;
	}
	int containerVisualID;
	if (crystal.diagram.edit.parts.CrystalEditPart.MODEL_ID.equals(containerModelID)) {
		containerVisualID = crystal.diagram.part.CrystalVisualIDRegistry.getVisualID(containerView);
	} else {
		if (containerView instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			containerVisualID = crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID;		
		} else {
			return -1;
		}
	}
	switch (containerVisualID) {
			case crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getProcedure().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ProcedureEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFunction().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.FunctionEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getAnonymousBlock().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.AnonymousBlockEditPart.VISUAL_ID;
}
	break;
																																		case crystal.diagram.edit.parts.ProcedureProcedureDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.ProcedureProcedureExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getException().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getIf().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.IfEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCase().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getInsert().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getUpdate().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getDelete().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getSelect().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getWhile().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ForEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getLoop().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getOpen().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFetch().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getClose().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.ProcedureProcedureParametersCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataType2EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Collections2EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Records2EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Cursor2EditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.FunctionFunctionDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.FunctionFunctionExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getException().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getIf().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.IfEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCase().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getInsert().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getUpdate().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getDelete().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getSelect().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getWhile().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ForEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getLoop().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getOpen().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFetch().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getClose().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.FunctionFunctionParametersCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataType3EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Collections3EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Records3EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Cursor3EditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.FunctionFunctionReturnPartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataType4EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Collections4EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Records4EditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.Cursor4EditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getDataType().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCollections().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getRecords().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCursor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID;
}
	break;
		case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.CrystalPackage.eINSTANCE.getException().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getIf().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.IfEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getCase().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getInsert().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getUpdate().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getDelete().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getSelect().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getWhile().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFor().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.ForEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getLoop().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getOpen().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getFetch().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID;
}
if (crystal.CrystalPackage.eINSTANCE.getClose().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID;
}
	break;
		}
	return -1;
}
	
		/**
 * @generated
 */
public static boolean canCreateNode(org.eclipse.gmf.runtime.notation.View containerView, int nodeVisualID) {
	String containerModelID = crystal.diagram.part.CrystalVisualIDRegistry.getModelID(containerView);
	if (!crystal.diagram.edit.parts.CrystalEditPart.MODEL_ID.equals(containerModelID) && !"crystal".equals(containerModelID)) {  //$NON-NLS-1$
		return false;
	}
	int containerVisualID;
	if (crystal.diagram.edit.parts.CrystalEditPart.MODEL_ID.equals(containerModelID)) {
		containerVisualID = crystal.diagram.part.CrystalVisualIDRegistry.getVisualID(containerView);
	} else {
		if (containerView instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			containerVisualID = crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID;		
		} else {
			return false;
		}
	}
	switch (containerVisualID) {
		case crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ProcedureEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FunctionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.AnonymousBlockEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ProcedureEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ProcedureNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ProcedureProcedureDeclarativePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ProcedureProcedureExecutablePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ProcedureProcedureParametersCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FunctionEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.FunctionNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FunctionFunctionDeclarativePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FunctionFunctionExecutablePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FunctionFunctionParametersCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FunctionFunctionReturnPartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.AnonymousBlockEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.AnonymousBlockNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockDeclarativePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockExecutablePartCompartmentEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CollectionsNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.RecordsNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CursorNameEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ExceptionDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.IfEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.IfDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CaseDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.InsertDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.UpdateDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DeleteDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.SelectDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.WhileDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ForEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ForDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.LoopDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.OpenDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.FetchDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CloseDescriptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeName2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CollectionsName2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.RecordsName2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CursorName2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeName3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CollectionsName3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.RecordsName3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CursorName3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.DataType4EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeName4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Collections4EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CollectionsName4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Records4EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.RecordsName4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.Cursor4EditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.CursorName4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ProcedureProcedureDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ProcedureProcedureExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.IfEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ForEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.ProcedureProcedureParametersCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataType2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Collections2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Records2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Cursor2EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FunctionFunctionDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FunctionFunctionExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.IfEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ForEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FunctionFunctionParametersCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataType3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Collections3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Records3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Cursor3EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.FunctionFunctionReturnPartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataType4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Collections4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Records4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.Cursor4EditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockDeclarativePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockExecutablePartCompartmentEditPart.VISUAL_ID:
	if (crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.IfEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.ForEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
if (crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID == nodeVisualID) {
	return true;
}
	break;
			}
	return false;
}
	
		/**
 * @generated
 */
public static int getLinkWithClassVisualID(org.eclipse.emf.ecore.EObject domainElement) {
	if (domainElement == null) {
		return -1;
	}
	if (crystal.CrystalPackage.eINSTANCE.getTransition().isSuperTypeOf(domainElement.eClass())) {
	return crystal.diagram.edit.parts.TransitionEditPart.VISUAL_ID;
}
	return -1;
}
	
				/**
 * User can change implementation of this method to handle some specific
 * situations not covered by default logic.
 * 
 * @generated
 */
private static boolean isDiagram(crystal.Crystal element) {
	return true;
}
	
		
	
	/**
 * @generated
 */
	public static boolean checkNodeVisualID(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement, int candidate) {
		if (candidate == -1){
			//unrecognized id is always bad
			return false;
		}
				int basic = getNodeVisualID(containerView, domainElement);
		return basic == candidate;
	}

		/**
 * @generated
 */
	public static boolean isCompartmentVisualID(int visualID) {
					switch (visualID) {
				case crystal.diagram.edit.parts.ProcedureProcedureDeclarativePartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.ProcedureProcedureExecutablePartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.ProcedureProcedureParametersCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.FunctionFunctionDeclarativePartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.FunctionFunctionExecutablePartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.FunctionFunctionParametersCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.FunctionFunctionReturnPartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockDeclarativePartCompartmentEditPart.VISUAL_ID:case crystal.diagram.edit.parts.AnonymousBlockAnonymousBlockExecutablePartCompartmentEditPart.VISUAL_ID:
					return true;
				default:
					break;
			}
				return false;
	}

		/**
 * @generated
 */
	public static boolean isSemanticLeafVisualID(int visualID) {
		switch (visualID) {
						case crystal.diagram.edit.parts.CrystalEditPart.VISUAL_ID:
				return false;
									case crystal.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:case crystal.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:case crystal.diagram.edit.parts.RecordsEditPart.VISUAL_ID:case crystal.diagram.edit.parts.CursorEditPart.VISUAL_ID:case crystal.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:case crystal.diagram.edit.parts.IfEditPart.VISUAL_ID:case crystal.diagram.edit.parts.CaseEditPart.VISUAL_ID:case crystal.diagram.edit.parts.InsertEditPart.VISUAL_ID:case crystal.diagram.edit.parts.UpdateEditPart.VISUAL_ID:case crystal.diagram.edit.parts.DeleteEditPart.VISUAL_ID:case crystal.diagram.edit.parts.SelectEditPart.VISUAL_ID:case crystal.diagram.edit.parts.WhileEditPart.VISUAL_ID:case crystal.diagram.edit.parts.ForEditPart.VISUAL_ID:case crystal.diagram.edit.parts.LoopEditPart.VISUAL_ID:case crystal.diagram.edit.parts.OpenEditPart.VISUAL_ID:case crystal.diagram.edit.parts.FetchEditPart.VISUAL_ID:case crystal.diagram.edit.parts.CloseEditPart.VISUAL_ID:case crystal.diagram.edit.parts.DataType2EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Collections2EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Records2EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:case crystal.diagram.edit.parts.DataType3EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Collections3EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Records3EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:case crystal.diagram.edit.parts.DataType4EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Collections4EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Records4EditPart.VISUAL_ID:case crystal.diagram.edit.parts.Cursor4EditPart.VISUAL_ID:
				return true;
									default:
				break;
		}
		return false;
	}

		/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.structure.DiagramStructure TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.structure.DiagramStructure() {
		/**
 * @generated
 */
		@Override

		public int getVisualID(org.eclipse.gmf.runtime.notation.View view) {
			return crystal.diagram.part.CrystalVisualIDRegistry.getVisualID(view);
		}
		
		/**
 * @generated
 */
		@Override

		public String getModelID(org.eclipse.gmf.runtime.notation.View view) {
			return crystal.diagram.part.CrystalVisualIDRegistry.getModelID(view);
		}
		
		/**
 * @generated
 */
		@Override

		public int getNodeVisualID(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement) {
			return crystal.diagram.part.CrystalVisualIDRegistry.getNodeVisualID(containerView, domainElement);
		}
		
		/**
 * @generated
 */
		@Override

		public boolean checkNodeVisualID(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement, int candidate) {
			return crystal.diagram.part.CrystalVisualIDRegistry.checkNodeVisualID(containerView, domainElement, candidate);
		}

		/**
 * @generated
 */
		@Override

		public boolean isCompartmentVisualID(int visualID) {
			return crystal.diagram.part.CrystalVisualIDRegistry.isCompartmentVisualID(visualID);
		}

		/**
 * @generated
 */
		@Override

		public boolean isSemanticLeafVisualID(int visualID) {
			return crystal.diagram.part.CrystalVisualIDRegistry.isSemanticLeafVisualID(visualID);
		}
	};

	}
