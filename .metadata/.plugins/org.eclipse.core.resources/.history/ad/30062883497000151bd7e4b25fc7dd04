@namespace(uri="test_function", prefix="test_function")
@gmf

package test_function;

@gmf.diagram(model.extension="test_function")
class Test_Function {
    val Sync[*] syncs;
    
    val DeclarativePart[1] Declarative_Part;
    val ExecutablePart[1] Executable_Part;
    val Return[1] Return;
    val Parameters[1] Parameters;
}

@gmf.node(label="nameParameters")	
class Parameters{
}

@gmf.node(label="nameReturn")	
class Return{
    attr String nameReturn;
}

@gmf.node(label="nameDeclarativePart")	
class DeclarativePart {
	val Data_Type[*] tipos_dados;
    attr String nameDeclarativePart;
}

@gmf.node(label="nameExecutablePart")	
class ExecutablePart {
    attr String nameExecutablePart;
}

//@gmf.node(label="nameExceptionPart")	
//class ExceptionPart {
	//val ExceptionCommand[*] excecoes;
    //attr String nameExceptionPart;
//}

class Data_Type extends Return, DeclarativePart{
}

class ParameterIn extends Parameters{
}

class ParameterOut extends Parameters{
}

class ParameterInOut extends Parameters{
}

//class ExceptionCommand extends ExceptionPart{
//}

class If extends ExecutablePart{
}

class Case extends ExecutablePart{
}

class Insert extends ExecutablePart{
}

class Update extends ExecutablePart{
}

class Delete extends ExecutablePart{
}

class Select extends ExecutablePart{
}

class Output extends ExecutablePart{
}

class Cursor extends ExecutablePart{
}

class While extends ExecutablePart{
}

class For extends ExecutablePart{
}

class Loop extends ExecutablePart{
}

//Links
@gmf.link(source="source", target="target", style="dot", width="2")
class Sync {
    ref Select source;
    ref Output target;
}