/*
 * 
 */
package filesystem.diagram.part;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.structure.DiagramStructure;

import filesystem.Filesystem;
import filesystem.FilesystemPackage;
import filesystem.diagram.edit.parts.CaseEditPart;
import filesystem.diagram.edit.parts.CaseNameEditPart;
import filesystem.diagram.edit.parts.CursorEditPart;
import filesystem.diagram.edit.parts.CursorNameEditPart;
import filesystem.diagram.edit.parts.DatatypeEditPart;
import filesystem.diagram.edit.parts.DatatypeNameNameEditPart;
import filesystem.diagram.edit.parts.DeclarativePartEditPart;
import filesystem.diagram.edit.parts.DeclarativePartNameEditPart;
import filesystem.diagram.edit.parts.DeleteEditPart;
import filesystem.diagram.edit.parts.DeleteNameEditPart;
import filesystem.diagram.edit.parts.Drive2EditPart;
import filesystem.diagram.edit.parts.DriveDriveContentsCompartment2EditPart;
import filesystem.diagram.edit.parts.DriveDriveContentsCompartmentEditPart;
import filesystem.diagram.edit.parts.DriveEditPart;
import filesystem.diagram.edit.parts.DriveName2EditPart;
import filesystem.diagram.edit.parts.DriveNameEditPart;
import filesystem.diagram.edit.parts.ExceptionEditPart;
import filesystem.diagram.edit.parts.ExceptionNameEditPart;
import filesystem.diagram.edit.parts.ExceptionPartEditPart;
import filesystem.diagram.edit.parts.ExceptionPartNameEditPart;
import filesystem.diagram.edit.parts.ExecutablePartEditPart;
import filesystem.diagram.edit.parts.ExecutablePartNameEditPart;
import filesystem.diagram.edit.parts.FileEditPart;
import filesystem.diagram.edit.parts.FileNameEditPart;
import filesystem.diagram.edit.parts.FilesystemEditPart;
import filesystem.diagram.edit.parts.FolderEditPart;
import filesystem.diagram.edit.parts.FolderFolderContentsCompartmentEditPart;
import filesystem.diagram.edit.parts.FolderNameEditPart;
import filesystem.diagram.edit.parts.ForEditPart;
import filesystem.diagram.edit.parts.ForNameEditPart;
import filesystem.diagram.edit.parts.IfEditPart;
import filesystem.diagram.edit.parts.IfNameEditPart;
import filesystem.diagram.edit.parts.InsertEditPart;
import filesystem.diagram.edit.parts.InsertNameEditPart;
import filesystem.diagram.edit.parts.LoopEditPart;
import filesystem.diagram.edit.parts.LoopNameEditPart;
import filesystem.diagram.edit.parts.OutputEditPart;
import filesystem.diagram.edit.parts.OutputNameEditPart;
import filesystem.diagram.edit.parts.ParameterInEditPart;
import filesystem.diagram.edit.parts.ParameterInNameEditPart;
import filesystem.diagram.edit.parts.ParameterInOutEditPart;
import filesystem.diagram.edit.parts.ParameterInOutNameEditPart;
import filesystem.diagram.edit.parts.ParameterOutEditPart;
import filesystem.diagram.edit.parts.ParameterOutNameEditPart;
import filesystem.diagram.edit.parts.ParametersEditPart;
import filesystem.diagram.edit.parts.ParametersNameEditPart;
import filesystem.diagram.edit.parts.ReturnEditPart;
import filesystem.diagram.edit.parts.ReturnNameEditPart;
import filesystem.diagram.edit.parts.SelectEditPart;
import filesystem.diagram.edit.parts.SelectNameEditPart;
import filesystem.diagram.edit.parts.ShortcutEditPart;
import filesystem.diagram.edit.parts.ShortcutNameEditPart;
import filesystem.diagram.edit.parts.ShortcutTargetEditPart;
import filesystem.diagram.edit.parts.SyncEditPart;
import filesystem.diagram.edit.parts.UpdateEditPart;
import filesystem.diagram.edit.parts.UpdateNameEditPart;
import filesystem.diagram.edit.parts.WhileEditPart;
import filesystem.diagram.edit.parts.WhileNameEditPart;
import filesystem.diagram.edit.parts.WrappingLabelEditPart;

/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented
 * by a domain model object.
 * 
 * @generated
 */
public class FilesystemVisualIDRegistry {

	/**
	 * @generated
	 */
	private static final String DEBUG_KEY = "teste.diagram/debug/visualID"; //$NON-NLS-1$

	/**
	 * @generated
	 */
	public static int getVisualID(View view) {
		if (view instanceof Diagram) {
			if (FilesystemEditPart.MODEL_ID.equals(view.getType())) {
				return FilesystemEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		return filesystem.diagram.part.FilesystemVisualIDRegistry
				.getVisualID(view.getType());
	}

	/**
	 * @generated
	 */
	public static String getModelID(View view) {
		View diagram = view.getDiagram();
		while (view != diagram) {
			EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
			if (annotation != null) {
				return (String) annotation.getDetails().get("modelID"); //$NON-NLS-1$
			}
			view = (View) view.eContainer();
		}
		return diagram != null ? diagram.getType() : null;
	}

	/**
	 * @generated
	 */
	public static int getVisualID(String type) {
		try {
			return Integer.parseInt(type);
		} catch (NumberFormatException e) {
			if (Boolean.TRUE.toString().equalsIgnoreCase(
					Platform.getDebugOption(DEBUG_KEY))) {
				FilesystemDiagramEditorPlugin.getInstance().logError(
						"Unable to parse view type as a visualID number: "
								+ type);
			}
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static String getType(int visualID) {
		return Integer.toString(visualID);
	}

	/**
	 * @generated
	 */
	public static int getDiagramVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (FilesystemPackage.eINSTANCE.getFilesystem().isSuperTypeOf(
				domainElement.eClass())
				&& isDiagram((Filesystem) domainElement)) {
			return FilesystemEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static int getNodeVisualID(View containerView, EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		String containerModelID = filesystem.diagram.part.FilesystemVisualIDRegistry
				.getModelID(containerView);
		if (!FilesystemEditPart.MODEL_ID.equals(containerModelID)
				&& !"filesystem".equals(containerModelID)) { //$NON-NLS-1$
			return -1;
		}
		int containerVisualID;
		if (FilesystemEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = filesystem.diagram.part.FilesystemVisualIDRegistry
					.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = FilesystemEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		switch (containerVisualID) {
		case FilesystemEditPart.VISUAL_ID:
			if (FilesystemPackage.eINSTANCE.getDrive().isSuperTypeOf(
					domainElement.eClass())) {
				return DriveEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getDatatype().isSuperTypeOf(
					domainElement.eClass())) {
				return DatatypeEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getIf().isSuperTypeOf(
					domainElement.eClass())) {
				return IfEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getCase().isSuperTypeOf(
					domainElement.eClass())) {
				return CaseEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getInsert().isSuperTypeOf(
					domainElement.eClass())) {
				return InsertEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getUpdate().isSuperTypeOf(
					domainElement.eClass())) {
				return UpdateEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getDelete().isSuperTypeOf(
					domainElement.eClass())) {
				return DeleteEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getOutput().isSuperTypeOf(
					domainElement.eClass())) {
				return OutputEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getSelect().isSuperTypeOf(
					domainElement.eClass())) {
				return SelectEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getCursor().isSuperTypeOf(
					domainElement.eClass())) {
				return CursorEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getWhile().isSuperTypeOf(
					domainElement.eClass())) {
				return WhileEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFor().isSuperTypeOf(
					domainElement.eClass())) {
				return ForEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getLoop().isSuperTypeOf(
					domainElement.eClass())) {
				return LoopEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getException().isSuperTypeOf(
					domainElement.eClass())) {
				return ExceptionEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getParameterIn().isSuperTypeOf(
					domainElement.eClass())) {
				return ParameterInEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getParameterOut().isSuperTypeOf(
					domainElement.eClass())) {
				return ParameterOutEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getParameterInOut().isSuperTypeOf(
					domainElement.eClass())) {
				return ParameterInOutEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getDeclarativePart().isSuperTypeOf(
					domainElement.eClass())) {
				return DeclarativePartEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getExecutablePart().isSuperTypeOf(
					domainElement.eClass())) {
				return ExecutablePartEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getExceptionPart().isSuperTypeOf(
					domainElement.eClass())) {
				return ExceptionPartEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getParameters().isSuperTypeOf(
					domainElement.eClass())) {
				return ParametersEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getReturn().isSuperTypeOf(
					domainElement.eClass())) {
				return ReturnEditPart.VISUAL_ID;
			}
			break;
		case DriveDriveContentsCompartmentEditPart.VISUAL_ID:
			if (FilesystemPackage.eINSTANCE.getDrive().isSuperTypeOf(
					domainElement.eClass())) {
				return Drive2EditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFolder().isSuperTypeOf(
					domainElement.eClass())) {
				return FolderEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getShortcut().isSuperTypeOf(
					domainElement.eClass())) {
				return ShortcutEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFile().isSuperTypeOf(
					domainElement.eClass())) {
				return FileEditPart.VISUAL_ID;
			}
			break;
		case DriveDriveContentsCompartment2EditPart.VISUAL_ID:
			if (FilesystemPackage.eINSTANCE.getDrive().isSuperTypeOf(
					domainElement.eClass())) {
				return Drive2EditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFolder().isSuperTypeOf(
					domainElement.eClass())) {
				return FolderEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getShortcut().isSuperTypeOf(
					domainElement.eClass())) {
				return ShortcutEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFile().isSuperTypeOf(
					domainElement.eClass())) {
				return FileEditPart.VISUAL_ID;
			}
			break;
		case FolderFolderContentsCompartmentEditPart.VISUAL_ID:
			if (FilesystemPackage.eINSTANCE.getDrive().isSuperTypeOf(
					domainElement.eClass())) {
				return Drive2EditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFolder().isSuperTypeOf(
					domainElement.eClass())) {
				return FolderEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getShortcut().isSuperTypeOf(
					domainElement.eClass())) {
				return ShortcutEditPart.VISUAL_ID;
			}
			if (FilesystemPackage.eINSTANCE.getFile().isSuperTypeOf(
					domainElement.eClass())) {
				return FileEditPart.VISUAL_ID;
			}
			break;
		}
		return -1;
	}

	/**
	 * @generated
	 */
	public static boolean canCreateNode(View containerView, int nodeVisualID) {
		String containerModelID = filesystem.diagram.part.FilesystemVisualIDRegistry
				.getModelID(containerView);
		if (!FilesystemEditPart.MODEL_ID.equals(containerModelID)
				&& !"filesystem".equals(containerModelID)) { //$NON-NLS-1$
			return false;
		}
		int containerVisualID;
		if (FilesystemEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = filesystem.diagram.part.FilesystemVisualIDRegistry
					.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = FilesystemEditPart.VISUAL_ID;
			} else {
				return false;
			}
		}
		switch (containerVisualID) {
		case FilesystemEditPart.VISUAL_ID:
			if (DriveEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DatatypeEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (IfEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (CaseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (InsertEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (UpdateEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DeleteEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (OutputEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (SelectEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (CursorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (WhileEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ForEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LoopEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ExceptionEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ParameterInEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ParameterOutEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ParameterInOutEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DeclarativePartEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ExecutablePartEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ExceptionPartEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ParametersEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ReturnEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DriveEditPart.VISUAL_ID:
			if (DriveNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DriveDriveContentsCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DatatypeEditPart.VISUAL_ID:
			if (DatatypeNameNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case IfEditPart.VISUAL_ID:
			if (IfNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case CaseEditPart.VISUAL_ID:
			if (CaseNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case InsertEditPart.VISUAL_ID:
			if (InsertNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case UpdateEditPart.VISUAL_ID:
			if (UpdateNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DeleteEditPart.VISUAL_ID:
			if (DeleteNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case OutputEditPart.VISUAL_ID:
			if (OutputNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case SelectEditPart.VISUAL_ID:
			if (SelectNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case CursorEditPart.VISUAL_ID:
			if (CursorNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case WhileEditPart.VISUAL_ID:
			if (WhileNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ForEditPart.VISUAL_ID:
			if (ForNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case LoopEditPart.VISUAL_ID:
			if (LoopNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ExceptionEditPart.VISUAL_ID:
			if (ExceptionNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ParameterInEditPart.VISUAL_ID:
			if (ParameterInNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ParameterOutEditPart.VISUAL_ID:
			if (ParameterOutNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ParameterInOutEditPart.VISUAL_ID:
			if (ParameterInOutNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DeclarativePartEditPart.VISUAL_ID:
			if (DeclarativePartNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ExecutablePartEditPart.VISUAL_ID:
			if (ExecutablePartNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ExceptionPartEditPart.VISUAL_ID:
			if (ExceptionPartNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ParametersEditPart.VISUAL_ID:
			if (ParametersNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ReturnEditPart.VISUAL_ID:
			if (ReturnNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Drive2EditPart.VISUAL_ID:
			if (DriveName2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DriveDriveContentsCompartment2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FolderEditPart.VISUAL_ID:
			if (FolderNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FolderFolderContentsCompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ShortcutEditPart.VISUAL_ID:
			if (ShortcutNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FileEditPart.VISUAL_ID:
			if (FileNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DriveDriveContentsCompartmentEditPart.VISUAL_ID:
			if (Drive2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FolderEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ShortcutEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FileEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DriveDriveContentsCompartment2EditPart.VISUAL_ID:
			if (Drive2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FolderEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ShortcutEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FileEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FolderFolderContentsCompartmentEditPart.VISUAL_ID:
			if (Drive2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FolderEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ShortcutEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FileEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ShortcutTargetEditPart.VISUAL_ID:
			if (WrappingLabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static int getLinkWithClassVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (FilesystemPackage.eINSTANCE.getSync().isSuperTypeOf(
				domainElement.eClass())) {
			return SyncEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 * 
	 * @generated
	 */
	private static boolean isDiagram(Filesystem element) {
		return true;
	}

	/**
	 * @generated
	 */
	public static boolean checkNodeVisualID(View containerView,
			EObject domainElement, int candidate) {
		if (candidate == -1) {
			//unrecognized id is always bad
			return false;
		}
		int basic = getNodeVisualID(containerView, domainElement);
		return basic == candidate;
	}

	/**
	 * @generated
	 */
	public static boolean isCompartmentVisualID(int visualID) {
		switch (visualID) {
		case DriveDriveContentsCompartmentEditPart.VISUAL_ID:
		case DriveDriveContentsCompartment2EditPart.VISUAL_ID:
		case FolderFolderContentsCompartmentEditPart.VISUAL_ID:
			return true;
		default:
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static boolean isSemanticLeafVisualID(int visualID) {
		switch (visualID) {
		case FilesystemEditPart.VISUAL_ID:
			return false;
		case DeclarativePartEditPart.VISUAL_ID:
		case ExecutablePartEditPart.VISUAL_ID:
		case ExceptionPartEditPart.VISUAL_ID:
		case DatatypeEditPart.VISUAL_ID:
		case IfEditPart.VISUAL_ID:
		case CaseEditPart.VISUAL_ID:
		case InsertEditPart.VISUAL_ID:
		case UpdateEditPart.VISUAL_ID:
		case DeleteEditPart.VISUAL_ID:
		case OutputEditPart.VISUAL_ID:
		case SelectEditPart.VISUAL_ID:
		case CursorEditPart.VISUAL_ID:
		case WhileEditPart.VISUAL_ID:
		case ForEditPart.VISUAL_ID:
		case LoopEditPart.VISUAL_ID:
		case ExceptionEditPart.VISUAL_ID:
		case ParameterInEditPart.VISUAL_ID:
		case ParameterOutEditPart.VISUAL_ID:
		case ParameterInOutEditPart.VISUAL_ID:
		case ParametersEditPart.VISUAL_ID:
		case ReturnEditPart.VISUAL_ID:
		case FileEditPart.VISUAL_ID:
		case ShortcutEditPart.VISUAL_ID:
			return true;
		default:
			break;
		}
		return false;
	}

	/**
	 * @generated
	 */
	public static final DiagramStructure TYPED_INSTANCE = new DiagramStructure() {
		/**
		 * @generated
		 */
		@Override
		public int getVisualID(View view) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.getVisualID(view);
		}

		/**
		 * @generated
		 */
		@Override
		public String getModelID(View view) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.getModelID(view);
		}

		/**
		 * @generated
		 */
		@Override
		public int getNodeVisualID(View containerView, EObject domainElement) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.getNodeVisualID(containerView, domainElement);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean checkNodeVisualID(View containerView,
				EObject domainElement, int candidate) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.checkNodeVisualID(containerView, domainElement, candidate);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean isCompartmentVisualID(int visualID) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.isCompartmentVisualID(visualID);
		}

		/**
		 * @generated
		 */
		@Override
		public boolean isSemanticLeafVisualID(int visualID) {
			return filesystem.diagram.part.FilesystemVisualIDRegistry
					.isSemanticLeafVisualID(visualID);
		}
	};

}
