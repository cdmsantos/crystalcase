	/*
 * 
 */
package filesystem.diagram.edit.policies;

/**
 * @generated
 */
public class FileItemSemanticEditPolicy extends filesystem.diagram.edit.policies.FilesystemBaseItemSemanticEditPolicy {

		/**
 * @generated
 */
	public FileItemSemanticEditPolicy() {
				super(filesystem.diagram.providers.FilesystemElementTypes.File_3004);
	}

	
	/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand cmd = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(getEditingDomain(), null);
	cmd.setTransactionNestingEnabled(false);
		for (java.util.Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge incomingLink = (org.eclipse.gmf.runtime.notation.Edge) it.next();
		if (filesystem.diagram.part.FilesystemVisualIDRegistry.getVisualID(incomingLink) == filesystem.diagram.edit.parts.SyncEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(incomingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
		if (filesystem.diagram.part.FilesystemVisualIDRegistry.getVisualID(incomingLink) == filesystem.diagram.edit.parts.ShortcutTargetEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest(incomingLink.getSource().getElement(), null, incomingLink.getTarget().getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), incomingLink));
			continue;
		}
	}
	for (java.util.Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge outgoingLink = (org.eclipse.gmf.runtime.notation.Edge) it.next();
		if (filesystem.diagram.part.FilesystemVisualIDRegistry.getVisualID(outgoingLink) == filesystem.diagram.edit.parts.SyncEditPart.VISUAL_ID) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest r = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(outgoingLink.getElement(), false);
			cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(r));
			cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), outgoingLink));
			continue;
		}
	}
	org.eclipse.emf.ecore.EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
	if (annotation == null) {
		// there are indirectly referenced children, need extra commands: false
		addDestroyShortcutsCommand(cmd, view);
		// delete host element
		cmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(req));
	} else {
		cmd.add(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(getEditingDomain(), view));
	}
	return getGEFWrapper(cmd.reduce());
}
					
/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	org.eclipse.gef.commands.Command command = req.getTarget() == null ?
			getStartCreateRelationshipCommand(req) : getCompleteCreateRelationshipCommand(req);
	return command != null ? command : super.getCreateRelationshipCommand(req);
}

/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getStartCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	if (filesystem.diagram.providers.FilesystemElementTypes.Sync_4001 == req.getElementType()) {
		return getGEFWrapper(new filesystem.diagram.edit.commands.SyncCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (filesystem.diagram.providers.FilesystemElementTypes.ShortcutTarget_4002 == req.getElementType()) {
		return null;
	}
	return null;
}

/**
 * @generated
 */
protected org.eclipse.gef.commands.Command getCompleteCreateRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	if (filesystem.diagram.providers.FilesystemElementTypes.Sync_4001 == req.getElementType()) {
		return getGEFWrapper(new filesystem.diagram.edit.commands.SyncCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
if (filesystem.diagram.providers.FilesystemElementTypes.ShortcutTarget_4002 == req.getElementType()) {
		return getGEFWrapper(new filesystem.diagram.edit.commands.ShortcutTargetCreateCommand(req,
					req.getSource(), req.getTarget()
			));
	}
	return null;
}
				
/**
 * Returns command to reorient EClass based link. New link target or source
 * should be the domain model element associated with this node.
 * 
 * @generated
 */
protected org.eclipse.gef.commands.Command getReorientRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest req) {
	switch (getVisualID(req)) {
	case filesystem.diagram.edit.parts.SyncEditPart.VISUAL_ID:
	return getGEFWrapper(new filesystem.diagram.edit.commands.SyncReorientCommand(req));
	}
	return super.getReorientRelationshipCommand(req);
}
				
/**
 * Returns command to reorient EReference based link. New link target or source
 * should be the domain model element associated with this node.
 * 
 * @generated
 */
protected org.eclipse.gef.commands.Command getReorientReferenceRelationshipCommand(
		org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest req) {
	switch (getVisualID(req)) {
	case filesystem.diagram.edit.parts.ShortcutTargetEditPart.VISUAL_ID:
	return getGEFWrapper(new filesystem.diagram.edit.commands.ShortcutTargetReorientCommand(req));
	}
	return super.getReorientReferenceRelationshipCommand(req);
}
	
	}
