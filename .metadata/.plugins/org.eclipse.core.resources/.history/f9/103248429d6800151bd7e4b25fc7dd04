/*
 * 
 */
package filesystem.diagram.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.RoundedRectangle;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Color;

import filesystem.diagram.edit.policies.DeleteItemSemanticEditPolicy;
import filesystem.diagram.edit.policies.OpenDiagramEditPolicy;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class DeleteEditPart extends ShapeNodeEditPart {

	/**
	 * @generated
	 */
	public static final int VISUAL_ID = 2006;

	/**
	 * @generated
	 */
	protected IFigure contentPane;

	/**
	 * @generated
	 */
	protected IFigure primaryShape;

	/**
	 * @generated
	 */
	public DeleteEditPart(View view) {
		super(view);
	}

	/**
	 * @generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
				new DeleteItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		installEditPolicy(EditPolicyRoles.OPEN_ROLE,
				new OpenDiagramEditPolicy()); // XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = child
						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
				}
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
			}
		};
		return lep;
	}

	/**
	 * @generated
	 */
	protected IFigure createNodeShape() {
		return primaryShape = new DeleteFigure();
	}

	/**
	 * @generated
	 */
	public DeleteFigure getPrimaryShape() {
		return (DeleteFigure) primaryShape;
	}

	/**
	 * @generated
	 */
	protected boolean addFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof DeleteNameExecutablePartEditPart) {
			((DeleteNameExecutablePartEditPart) childEditPart)
					.setLabel(getPrimaryShape().getFigureDeleteLabelFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteIfsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteCasesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteInsertsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteUpdatesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteDeletesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteSelectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteOutuputsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteCursorsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteWhilesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteForsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteLoopsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((DeleteDeleteLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof DeleteNameExecutablePartEditPart) {
			return true;
		}
		if (childEditPart instanceof DeleteDeleteIfsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteIfsCompartmentFigure();
			pane.remove(((DeleteDeleteIfsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteCasesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteCasesCompartmentFigure();
			pane.remove(((DeleteDeleteCasesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteInsertsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteInsertsCompartmentFigure();
			pane.remove(((DeleteDeleteInsertsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteUpdatesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteUpdatesCompartmentFigure();
			pane.remove(((DeleteDeleteUpdatesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteDeletesCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteDeletesCompartmentFigure();
			pane.remove(((DeleteDeleteDeletesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteSelectsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteSelectsCompartmentFigure();
			pane.remove(((DeleteDeleteSelectsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteOutuputsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteOutuputsCompartmentFigure();
			pane.remove(((DeleteDeleteOutuputsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteCursorsCompartment2EditPart) {
			IFigure pane = getPrimaryShape()
					.getDeleteCursorsCompartmentFigure();
			pane.remove(((DeleteDeleteCursorsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteWhilesCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteWhilesCompartmentFigure();
			pane.remove(((DeleteDeleteWhilesCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteForsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteForsCompartmentFigure();
			pane.remove(((DeleteDeleteForsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		if (childEditPart instanceof DeleteDeleteLoopsCompartment2EditPart) {
			IFigure pane = getPrimaryShape().getDeleteLoopsCompartmentFigure();
			pane.remove(((DeleteDeleteLoopsCompartment2EditPart) childEditPart)
					.getFigure());
			return true;
		}
		return false;
	}

	/**
	 * @generated
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	/**
	 * @generated
	 */
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if (editPart instanceof DeleteDeleteIfsCompartment2EditPart) {
			return getPrimaryShape().getDeleteIfsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteCasesCompartment2EditPart) {
			return getPrimaryShape().getDeleteCasesCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteInsertsCompartment2EditPart) {
			return getPrimaryShape().getDeleteInsertsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteUpdatesCompartment2EditPart) {
			return getPrimaryShape().getDeleteUpdatesCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteDeletesCompartment2EditPart) {
			return getPrimaryShape().getDeleteDeletesCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteSelectsCompartment2EditPart) {
			return getPrimaryShape().getDeleteSelectsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteOutuputsCompartment2EditPart) {
			return getPrimaryShape().getDeleteOutuputsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteCursorsCompartment2EditPart) {
			return getPrimaryShape().getDeleteCursorsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteWhilesCompartment2EditPart) {
			return getPrimaryShape().getDeleteWhilesCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteForsCompartment2EditPart) {
			return getPrimaryShape().getDeleteForsCompartmentFigure();
		}
		if (editPart instanceof DeleteDeleteLoopsCompartment2EditPart) {
			return getPrimaryShape().getDeleteLoopsCompartmentFigure();
		}
		return getContentPane();
	}

	/**
	 * @generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(40, 40);
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @param nodeShape instance of generated figure class
	 * @generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @generated
	 */
	protected void setForegroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setBackgroundColor(Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineWidth(width);
		}
	}

	/**
	 * @generated
	 */
	protected void setLineType(int style) {
		if (primaryShape instanceof Shape) {
			((Shape) primaryShape).setLineStyle(style);
		}
	}

	/**
	 * @generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(FilesystemVisualIDRegistry
				.getType(DeleteNameExecutablePartEditPart.VISUAL_ID));
	}

	/**
	 * @generated
	 */
	protected void handleNotificationEvent(Notification event) {
		if (event.getNotifier() == getModel()
				&& EcorePackage.eINSTANCE.getEModelElement_EAnnotations()
						.equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}

	/**
	 * @generated
	 */
	public class DeleteFigure extends RoundedRectangle {

		/**
		 * @generated
		 */
		private WrappingLabel fFigureDeleteLabelFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteIfsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteCasesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteInsertsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteUpdatesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteDeletesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteSelectsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteOutuputsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteCursorsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteWhilesCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteForsCompartmentFigure;

		/**
		 * @generated
		 */
		private RectangleFigure fDeleteLoopsCompartmentFigure;

		/**
		 * @generated
		 */
		public DeleteFigure() {
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8),
					getMapMode().DPtoLP(8)));
			this.setBorder(new MarginBorder(getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5), getMapMode().DPtoLP(5),
					getMapMode().DPtoLP(5)));
			createContents();
		}

		/**
		 * @generated
		 */
		private void createContents() {

			fFigureDeleteLabelFigure = new WrappingLabel();

			fFigureDeleteLabelFigure.setText("Delete");
			fFigureDeleteLabelFigure.setMaximumSize(new Dimension(getMapMode()
					.DPtoLP(10000), getMapMode().DPtoLP(50)));

			this.add(fFigureDeleteLabelFigure);

			fDeleteIfsCompartmentFigure = new RectangleFigure();

			fDeleteIfsCompartmentFigure.setOutline(false);

			this.add(fDeleteIfsCompartmentFigure);

			fDeleteCasesCompartmentFigure = new RectangleFigure();

			fDeleteCasesCompartmentFigure.setOutline(false);

			this.add(fDeleteCasesCompartmentFigure);

			fDeleteInsertsCompartmentFigure = new RectangleFigure();

			fDeleteInsertsCompartmentFigure.setOutline(false);

			this.add(fDeleteInsertsCompartmentFigure);

			fDeleteUpdatesCompartmentFigure = new RectangleFigure();

			fDeleteUpdatesCompartmentFigure.setOutline(false);

			this.add(fDeleteUpdatesCompartmentFigure);

			fDeleteDeletesCompartmentFigure = new RectangleFigure();

			fDeleteDeletesCompartmentFigure.setOutline(false);

			this.add(fDeleteDeletesCompartmentFigure);

			fDeleteSelectsCompartmentFigure = new RectangleFigure();

			fDeleteSelectsCompartmentFigure.setOutline(false);

			this.add(fDeleteSelectsCompartmentFigure);

			fDeleteOutuputsCompartmentFigure = new RectangleFigure();

			fDeleteOutuputsCompartmentFigure.setOutline(false);

			this.add(fDeleteOutuputsCompartmentFigure);

			fDeleteCursorsCompartmentFigure = new RectangleFigure();

			fDeleteCursorsCompartmentFigure.setOutline(false);

			this.add(fDeleteCursorsCompartmentFigure);

			fDeleteWhilesCompartmentFigure = new RectangleFigure();

			fDeleteWhilesCompartmentFigure.setOutline(false);

			this.add(fDeleteWhilesCompartmentFigure);

			fDeleteForsCompartmentFigure = new RectangleFigure();

			fDeleteForsCompartmentFigure.setOutline(false);

			this.add(fDeleteForsCompartmentFigure);

			fDeleteLoopsCompartmentFigure = new RectangleFigure();

			fDeleteLoopsCompartmentFigure.setOutline(false);

			this.add(fDeleteLoopsCompartmentFigure);

		}

		/**
		 * @generated
		 */
		public WrappingLabel getFigureDeleteLabelFigure() {
			return fFigureDeleteLabelFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteIfsCompartmentFigure() {
			return fDeleteIfsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteCasesCompartmentFigure() {
			return fDeleteCasesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteInsertsCompartmentFigure() {
			return fDeleteInsertsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteUpdatesCompartmentFigure() {
			return fDeleteUpdatesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteDeletesCompartmentFigure() {
			return fDeleteDeletesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteSelectsCompartmentFigure() {
			return fDeleteSelectsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteOutuputsCompartmentFigure() {
			return fDeleteOutuputsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteCursorsCompartmentFigure() {
			return fDeleteCursorsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteWhilesCompartmentFigure() {
			return fDeleteWhilesCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteForsCompartmentFigure() {
			return fDeleteForsCompartmentFigure;
		}

		/**
		 * @generated
		 */
		public RectangleFigure getDeleteLoopsCompartmentFigure() {
			return fDeleteLoopsCompartmentFigure;
		}

	}

}
