/*
 * 
 */
package filesystem.diagram.providers;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;
import org.eclipse.gmf.runtime.notation.View;

import filesystem.FilesystemPackage;
import filesystem.diagram.edit.parts.CaseNameEditPart;
import filesystem.diagram.edit.parts.CursorNameEditPart;
import filesystem.diagram.edit.parts.Data_TypeNameNameEditPart;
import filesystem.diagram.edit.parts.DeclarativePartNameEditPart;
import filesystem.diagram.edit.parts.DeleteNameEditPart;
import filesystem.diagram.edit.parts.DriveName2EditPart;
import filesystem.diagram.edit.parts.DriveNameEditPart;
import filesystem.diagram.edit.parts.ExceptionCommandNameEditPart;
import filesystem.diagram.edit.parts.ExceptionPartNameEditPart;
import filesystem.diagram.edit.parts.ExecutablePartNameEditPart;
import filesystem.diagram.edit.parts.FileNameEditPart;
import filesystem.diagram.edit.parts.FolderNameEditPart;
import filesystem.diagram.edit.parts.ForNameEditPart;
import filesystem.diagram.edit.parts.IfNameEditPart;
import filesystem.diagram.edit.parts.InsertNameEditPart;
import filesystem.diagram.edit.parts.LoopNameEditPart;
import filesystem.diagram.edit.parts.OutputNameEditPart;
import filesystem.diagram.edit.parts.ParameterInNameEditPart;
import filesystem.diagram.edit.parts.ParameterInOutNameEditPart;
import filesystem.diagram.edit.parts.ParameterOutNameEditPart;
import filesystem.diagram.edit.parts.ParametersNameEditPart;
import filesystem.diagram.edit.parts.ReturnNameEditPart;
import filesystem.diagram.edit.parts.SelectNameEditPart;
import filesystem.diagram.edit.parts.ShortcutNameEditPart;
import filesystem.diagram.edit.parts.UpdateNameEditPart;
import filesystem.diagram.edit.parts.WhileNameEditPart;
import filesystem.diagram.parsers.MessageFormatParser;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class FilesystemParserProvider extends AbstractProvider implements
		IParserProvider {

	/**
	 * @generated
	 */
	private IParser driveName_5005Parser;

	/**
	 * @generated
	 */
	private IParser getDriveName_5005Parser() {
		if (driveName_5005Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getFile_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			driveName_5005Parser = parser;
		}
		return driveName_5005Parser;
	}

	/**
	 * @generated
	 */
	private IParser data_TypeNameName_5006Parser;

	/**
	 * @generated
	 */
	private IParser getData_TypeNameName_5006Parser() {
		if (data_TypeNameName_5006Parser == null) {
			EAttribute[] features = new EAttribute[] {
					FilesystemPackage.eINSTANCE.getReturn_Name(),
					FilesystemPackage.eINSTANCE.getDeclarativePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			data_TypeNameName_5006Parser = parser;
		}
		return data_TypeNameName_5006Parser;
	}

	/**
	 * @generated
	 */
	private IParser ifName_5007Parser;

	/**
	 * @generated
	 */
	private IParser getIfName_5007Parser() {
		if (ifName_5007Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			ifName_5007Parser = parser;
		}
		return ifName_5007Parser;
	}

	/**
	 * @generated
	 */
	private IParser caseName_5008Parser;

	/**
	 * @generated
	 */
	private IParser getCaseName_5008Parser() {
		if (caseName_5008Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			caseName_5008Parser = parser;
		}
		return caseName_5008Parser;
	}

	/**
	 * @generated
	 */
	private IParser insertName_5009Parser;

	/**
	 * @generated
	 */
	private IParser getInsertName_5009Parser() {
		if (insertName_5009Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			insertName_5009Parser = parser;
		}
		return insertName_5009Parser;
	}

	/**
	 * @generated
	 */
	private IParser updateName_5010Parser;

	/**
	 * @generated
	 */
	private IParser getUpdateName_5010Parser() {
		if (updateName_5010Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			updateName_5010Parser = parser;
		}
		return updateName_5010Parser;
	}

	/**
	 * @generated
	 */
	private IParser deleteName_5011Parser;

	/**
	 * @generated
	 */
	private IParser getDeleteName_5011Parser() {
		if (deleteName_5011Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			deleteName_5011Parser = parser;
		}
		return deleteName_5011Parser;
	}

	/**
	 * @generated
	 */
	private IParser outputName_5012Parser;

	/**
	 * @generated
	 */
	private IParser getOutputName_5012Parser() {
		if (outputName_5012Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			outputName_5012Parser = parser;
		}
		return outputName_5012Parser;
	}

	/**
	 * @generated
	 */
	private IParser selectName_5013Parser;

	/**
	 * @generated
	 */
	private IParser getSelectName_5013Parser() {
		if (selectName_5013Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			selectName_5013Parser = parser;
		}
		return selectName_5013Parser;
	}

	/**
	 * @generated
	 */
	private IParser cursorName_5014Parser;

	/**
	 * @generated
	 */
	private IParser getCursorName_5014Parser() {
		if (cursorName_5014Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			cursorName_5014Parser = parser;
		}
		return cursorName_5014Parser;
	}

	/**
	 * @generated
	 */
	private IParser whileName_5015Parser;

	/**
	 * @generated
	 */
	private IParser getWhileName_5015Parser() {
		if (whileName_5015Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			whileName_5015Parser = parser;
		}
		return whileName_5015Parser;
	}

	/**
	 * @generated
	 */
	private IParser forName_5016Parser;

	/**
	 * @generated
	 */
	private IParser getForName_5016Parser() {
		if (forName_5016Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			forName_5016Parser = parser;
		}
		return forName_5016Parser;
	}

	/**
	 * @generated
	 */
	private IParser loopName_5017Parser;

	/**
	 * @generated
	 */
	private IParser getLoopName_5017Parser() {
		if (loopName_5017Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			loopName_5017Parser = parser;
		}
		return loopName_5017Parser;
	}

	/**
	 * @generated
	 */
	private IParser exceptionCommandName_5018Parser;

	/**
	 * @generated
	 */
	private IParser getExceptionCommandName_5018Parser() {
		if (exceptionCommandName_5018Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExceptionPart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			exceptionCommandName_5018Parser = parser;
		}
		return exceptionCommandName_5018Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterInName_5019Parser;

	/**
	 * @generated
	 */
	private IParser getParameterInName_5019Parser() {
		if (parameterInName_5019Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterInName_5019Parser = parser;
		}
		return parameterInName_5019Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterOutName_5020Parser;

	/**
	 * @generated
	 */
	private IParser getParameterOutName_5020Parser() {
		if (parameterOutName_5020Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterOutName_5020Parser = parser;
		}
		return parameterOutName_5020Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterInOutName_5021Parser;

	/**
	 * @generated
	 */
	private IParser getParameterInOutName_5021Parser() {
		if (parameterInOutName_5021Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterInOutName_5021Parser = parser;
		}
		return parameterInOutName_5021Parser;
	}

	/**
	 * @generated
	 */
	private IParser declarativePartName_5022Parser;

	/**
	 * @generated
	 */
	private IParser getDeclarativePartName_5022Parser() {
		if (declarativePartName_5022Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getDeclarativePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			declarativePartName_5022Parser = parser;
		}
		return declarativePartName_5022Parser;
	}

	/**
	 * @generated
	 */
	private IParser executablePartName_5023Parser;

	/**
	 * @generated
	 */
	private IParser getExecutablePartName_5023Parser() {
		if (executablePartName_5023Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			executablePartName_5023Parser = parser;
		}
		return executablePartName_5023Parser;
	}

	/**
	 * @generated
	 */
	private IParser exceptionPartName_5024Parser;

	/**
	 * @generated
	 */
	private IParser getExceptionPartName_5024Parser() {
		if (exceptionPartName_5024Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExceptionPart_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			exceptionPartName_5024Parser = parser;
		}
		return exceptionPartName_5024Parser;
	}

	/**
	 * @generated
	 */
	private IParser parametersName_5025Parser;

	/**
	 * @generated
	 */
	private IParser getParametersName_5025Parser() {
		if (parametersName_5025Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parametersName_5025Parser = parser;
		}
		return parametersName_5025Parser;
	}

	/**
	 * @generated
	 */
	private IParser returnName_5026Parser;

	/**
	 * @generated
	 */
	private IParser getReturnName_5026Parser() {
		if (returnName_5026Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getReturn_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			returnName_5026Parser = parser;
		}
		return returnName_5026Parser;
	}

	/**
	 * @generated
	 */
	private IParser driveName_5004Parser;

	/**
	 * @generated
	 */
	private IParser getDriveName_5004Parser() {
		if (driveName_5004Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getFile_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			driveName_5004Parser = parser;
		}
		return driveName_5004Parser;
	}

	/**
	 * @generated
	 */
	private IParser folderName_5003Parser;

	/**
	 * @generated
	 */
	private IParser getFolderName_5003Parser() {
		if (folderName_5003Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getFile_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			folderName_5003Parser = parser;
		}
		return folderName_5003Parser;
	}

	/**
	 * @generated
	 */
	private IParser shortcutName_5001Parser;

	/**
	 * @generated
	 */
	private IParser getShortcutName_5001Parser() {
		if (shortcutName_5001Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getFile_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			shortcutName_5001Parser = parser;
		}
		return shortcutName_5001Parser;
	}

	/**
	 * @generated
	 */
	private IParser fileName_5002Parser;

	/**
	 * @generated
	 */
	private IParser getFileName_5002Parser() {
		if (fileName_5002Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getFile_Name() };
			MessageFormatParser parser = new MessageFormatParser(features);
			fileName_5002Parser = parser;
		}
		return fileName_5002Parser;
	}

	/**
	 * @generated
	 */
	protected IParser getParser(int visualID) {
		switch (visualID) {
		case DriveNameEditPart.VISUAL_ID:
			return getDriveName_5005Parser();
		case Data_TypeNameNameEditPart.VISUAL_ID:
			return getData_TypeNameName_5006Parser();
		case IfNameEditPart.VISUAL_ID:
			return getIfName_5007Parser();
		case CaseNameEditPart.VISUAL_ID:
			return getCaseName_5008Parser();
		case InsertNameEditPart.VISUAL_ID:
			return getInsertName_5009Parser();
		case UpdateNameEditPart.VISUAL_ID:
			return getUpdateName_5010Parser();
		case DeleteNameEditPart.VISUAL_ID:
			return getDeleteName_5011Parser();
		case OutputNameEditPart.VISUAL_ID:
			return getOutputName_5012Parser();
		case SelectNameEditPart.VISUAL_ID:
			return getSelectName_5013Parser();
		case CursorNameEditPart.VISUAL_ID:
			return getCursorName_5014Parser();
		case WhileNameEditPart.VISUAL_ID:
			return getWhileName_5015Parser();
		case ForNameEditPart.VISUAL_ID:
			return getForName_5016Parser();
		case LoopNameEditPart.VISUAL_ID:
			return getLoopName_5017Parser();
		case ExceptionCommandNameEditPart.VISUAL_ID:
			return getExceptionCommandName_5018Parser();
		case ParameterInNameEditPart.VISUAL_ID:
			return getParameterInName_5019Parser();
		case ParameterOutNameEditPart.VISUAL_ID:
			return getParameterOutName_5020Parser();
		case ParameterInOutNameEditPart.VISUAL_ID:
			return getParameterInOutName_5021Parser();
		case DeclarativePartNameEditPart.VISUAL_ID:
			return getDeclarativePartName_5022Parser();
		case ExecutablePartNameEditPart.VISUAL_ID:
			return getExecutablePartName_5023Parser();
		case ExceptionPartNameEditPart.VISUAL_ID:
			return getExceptionPartName_5024Parser();
		case ParametersNameEditPart.VISUAL_ID:
			return getParametersName_5025Parser();
		case ReturnNameEditPart.VISUAL_ID:
			return getReturnName_5026Parser();
		case DriveName2EditPart.VISUAL_ID:
			return getDriveName_5004Parser();
		case FolderNameEditPart.VISUAL_ID:
			return getFolderName_5003Parser();
		case ShortcutNameEditPart.VISUAL_ID:
			return getShortcutName_5001Parser();
		case FileNameEditPart.VISUAL_ID:
			return getFileName_5002Parser();
		}
		return null;
	}

	/**
	 * Utility method that consults ParserService
	 * @generated
	 */
	public static IParser getParser(IElementType type, EObject object,
			String parserHint) {
		return ParserService.getInstance().getParser(
				new HintAdapter(type, object, parserHint));
	}

	/**
	 * @generated
	 */
	public IParser getParser(IAdaptable hint) {
		String vid = (String) hint.getAdapter(String.class);
		if (vid != null) {
			return getParser(FilesystemVisualIDRegistry.getVisualID(vid));
		}
		View view = (View) hint.getAdapter(View.class);
		if (view != null) {
			return getParser(FilesystemVisualIDRegistry.getVisualID(view));
		}
		return null;
	}

	/**
	 * @generated
	 */
	public boolean provides(IOperation operation) {
		if (operation instanceof GetParserOperation) {
			IAdaptable hint = ((GetParserOperation) operation).getHint();
			if (FilesystemElementTypes.getElement(hint) == null) {
				return false;
			}
			return getParser(hint) != null;
		}
		return false;
	}

	/**
	 * @generated
	 */
	private static class HintAdapter extends ParserHintAdapter {

		/**
		 * @generated
		 */
		private final IElementType elementType;

		/**
		 * @generated
		 */
		public HintAdapter(IElementType type, EObject object, String parserHint) {
			super(object, parserHint);
			assert type != null;
			elementType = type;
		}

		/**
		 * @generated
		 */
		public Object getAdapter(Class adapter) {
			if (IElementType.class.equals(adapter)) {
				return elementType;
			}
			return super.getAdapter(adapter);
		}
	}

}
