/*
 * 
 */
package filesystem.diagram.part;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

import filesystem.Case;
import filesystem.Cursor;
import filesystem.Data_Type;
import filesystem.DeclarativePart;
import filesystem.Delete;
import filesystem.ExceptionCommand;
import filesystem.ExceptionPart;
import filesystem.ExecutablePart;
import filesystem.Filesystem;
import filesystem.FilesystemPackage;
import filesystem.For;
import filesystem.If;
import filesystem.Insert;
import filesystem.Loop;
import filesystem.Output;
import filesystem.ParameterIn;
import filesystem.ParameterInOut;
import filesystem.ParameterOut;
import filesystem.Parameters;
import filesystem.Return;
import filesystem.Select;
import filesystem.Sync;
import filesystem.Update;
import filesystem.While;
import filesystem.diagram.edit.parts.*;
import filesystem.diagram.edit.parts.CaseCaseIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.CaseEditPart;
import filesystem.diagram.edit.parts.CursorCursorIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.CursorEditPart;
import filesystem.diagram.edit.parts.Data_Type2EditPart;
import filesystem.diagram.edit.parts.Data_Type3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartment2EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartment3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartmentEditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartment2EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartment3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartmentEditPart;
import filesystem.diagram.edit.parts.Data_TypeEditPart;
import filesystem.diagram.edit.parts.DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart;
import filesystem.diagram.edit.parts.DeclarativePartEditPart;
import filesystem.diagram.edit.parts.DeleteDeleteIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.DeleteEditPart;
import filesystem.diagram.edit.parts.ExceptionCommand2EditPart;
import filesystem.diagram.edit.parts.ExceptionCommandEditPart;
import filesystem.diagram.edit.parts.ExceptionCommandExceptionCommandExcecoesCompartment2EditPart;
import filesystem.diagram.edit.parts.ExceptionCommandExceptionCommandExcecoesCompartmentEditPart;
import filesystem.diagram.edit.parts.ExceptionPartEditPart;
import filesystem.diagram.edit.parts.ExceptionPartExceptionPartExcecoesCompartmentEditPart;
import filesystem.diagram.edit.parts.ExecutablePartEditPart;
import filesystem.diagram.edit.parts.ExecutablePartExecutablePartIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.FilesystemEditPart;
import filesystem.diagram.edit.parts.ForEditPart;
import filesystem.diagram.edit.parts.ForForIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.If2EditPart;
import filesystem.diagram.edit.parts.IfEditPart;
import filesystem.diagram.edit.parts.IfIfIfsCompartment2EditPart;
import filesystem.diagram.edit.parts.IfIfIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.InsertEditPart;
import filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.LoopEditPart;
import filesystem.diagram.edit.parts.LoopLoopIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.OutputEditPart;
import filesystem.diagram.edit.parts.OutputOutputIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterIn2EditPart;
import filesystem.diagram.edit.parts.ParameterInEditPart;
import filesystem.diagram.edit.parts.ParameterInOutEditPart;
import filesystem.diagram.edit.parts.ParameterInOutParameterInOutParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterInParameterInParametros_inCompartment2EditPart;
import filesystem.diagram.edit.parts.ParameterInParameterInParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterOutEditPart;
import filesystem.diagram.edit.parts.ParameterOutParameterOutParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParametersEditPart;
import filesystem.diagram.edit.parts.ParametersParametersParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ReturnEditPart;
import filesystem.diagram.edit.parts.ReturnReturnTipo_retornoCompartmentEditPart;
import filesystem.diagram.edit.parts.SelectEditPart;
import filesystem.diagram.edit.parts.SelectSelectIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.SyncEditPart;
import filesystem.diagram.edit.parts.UpdateEditPart;
import filesystem.diagram.edit.parts.UpdateUpdateIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.WhileEditPart;
import filesystem.diagram.edit.parts.WhileWhileIfsCompartmentEditPart;
import filesystem.diagram.providers.FilesystemElementTypes;

/**
 * @generated
 */
public class FilesystemDiagramUpdater {

	/**
	 * @generated
	 */
	public static boolean isShortcutOrphaned(View view) {
		return !view.isSetElement() || view.getElement() == null
				|| view.getElement().eIsProxy();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSemanticChildren(View view) {
		switch (FilesystemVisualIDRegistry.getVisualID(view)) {
		case FilesystemEditPart.VISUAL_ID:
			return getFilesystem_1000SemanticChildren(view);
		case Data_TypeData_TypeTipo_retornoCompartmentEditPart.VISUAL_ID:
			return getData_TypeData_TypeTipo_retornoCompartment_7001SemanticChildren(view);
		case Data_TypeData_TypeTipos_dadosCompartmentEditPart.VISUAL_ID:
			return getData_TypeData_TypeTipos_dadosCompartment_7002SemanticChildren(view);
		case Data_TypeData_TypeTipo_retornoCompartment2EditPart.VISUAL_ID:
			return getData_TypeData_TypeTipo_retornoCompartment_7003SemanticChildren(view);
		case Data_TypeData_TypeTipos_dadosCompartment2EditPart.VISUAL_ID:
			return getData_TypeData_TypeTipos_dadosCompartment_7004SemanticChildren(view);
		case Data_TypeData_TypeTipo_retornoCompartment3EditPart.VISUAL_ID:
			return getData_TypeData_TypeTipo_retornoCompartment_7005SemanticChildren(view);
		case Data_TypeData_TypeTipos_dadosCompartment3EditPart.VISUAL_ID:
			return getData_TypeData_TypeTipos_dadosCompartment_7006SemanticChildren(view);
		case IfIfIfsCompartmentEditPart.VISUAL_ID:
			return getIfIfIfsCompartment_7011SemanticChildren(view);
		case IfIfCasesCompartmentEditPart.VISUAL_ID:
			return getIfIfCasesCompartment_7030SemanticChildren(view);
		case IfIfInsertsCompartmentEditPart.VISUAL_ID:
			return getIfIfInsertsCompartment_7031SemanticChildren(view);
		case IfIfUpdatesCompartmentEditPart.VISUAL_ID:
			return getIfIfUpdatesCompartment_7032SemanticChildren(view);
		case IfIfDeletesCompartmentEditPart.VISUAL_ID:
			return getIfIfDeletesCompartment_7033SemanticChildren(view);
		case IfIfSelectsCompartmentEditPart.VISUAL_ID:
			return getIfIfSelectsCompartment_7034SemanticChildren(view);
		case IfIfOutuputsCompartmentEditPart.VISUAL_ID:
			return getIfIfOutuputsCompartment_7035SemanticChildren(view);
		case IfIfCursorsCompartmentEditPart.VISUAL_ID:
			return getIfIfCursorsCompartment_7036SemanticChildren(view);
		case IfIfWhilesCompartmentEditPart.VISUAL_ID:
			return getIfIfWhilesCompartment_7037SemanticChildren(view);
		case IfIfForsCompartmentEditPart.VISUAL_ID:
			return getIfIfForsCompartment_7038SemanticChildren(view);
		case IfIfLoopsCompartmentEditPart.VISUAL_ID:
			return getIfIfLoopsCompartment_7039SemanticChildren(view);
		case IfIfIfsCompartment2EditPart.VISUAL_ID:
			return getIfIfIfsCompartment_7012SemanticChildren(view);
		case IfIfCasesCompartment2EditPart.VISUAL_ID:
			return getIfIfCasesCompartment_7040SemanticChildren(view);
		case IfIfInsertsCompartment2EditPart.VISUAL_ID:
			return getIfIfInsertsCompartment_7041SemanticChildren(view);
		case IfIfUpdatesCompartment2EditPart.VISUAL_ID:
			return getIfIfUpdatesCompartment_7042SemanticChildren(view);
		case IfIfDeletesCompartment2EditPart.VISUAL_ID:
			return getIfIfDeletesCompartment_7043SemanticChildren(view);
		case IfIfSelectsCompartment2EditPart.VISUAL_ID:
			return getIfIfSelectsCompartment_7044SemanticChildren(view);
		case IfIfOutuputsCompartment2EditPart.VISUAL_ID:
			return getIfIfOutuputsCompartment_7045SemanticChildren(view);
		case IfIfCursorsCompartment2EditPart.VISUAL_ID:
			return getIfIfCursorsCompartment_7046SemanticChildren(view);
		case IfIfWhilesCompartment2EditPart.VISUAL_ID:
			return getIfIfWhilesCompartment_7047SemanticChildren(view);
		case IfIfForsCompartment2EditPart.VISUAL_ID:
			return getIfIfForsCompartment_7048SemanticChildren(view);
		case IfIfLoopsCompartment2EditPart.VISUAL_ID:
			return getIfIfLoopsCompartment_7049SemanticChildren(view);
		case CaseCaseIfsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseIfsCompartment_7050SemanticChildren(view);
		case CaseCaseCasesCompartmentEditPart.VISUAL_ID:
			return getCaseCaseCasesCompartment_7051SemanticChildren(view);
		case CaseCaseInsertsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseInsertsCompartment_7052SemanticChildren(view);
		case CaseCaseUpdatesCompartmentEditPart.VISUAL_ID:
			return getCaseCaseUpdatesCompartment_7053SemanticChildren(view);
		case CaseCaseDeletesCompartmentEditPart.VISUAL_ID:
			return getCaseCaseDeletesCompartment_7054SemanticChildren(view);
		case CaseCaseSelectsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseSelectsCompartment_7055SemanticChildren(view);
		case CaseCaseOutuputsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseOutuputsCompartment_7056SemanticChildren(view);
		case CaseCaseCursorsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseCursorsCompartment_7057SemanticChildren(view);
		case CaseCaseWhilesCompartmentEditPart.VISUAL_ID:
			return getCaseCaseWhilesCompartment_7058SemanticChildren(view);
		case CaseCaseForsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseForsCompartment_7059SemanticChildren(view);
		case CaseCaseLoopsCompartmentEditPart.VISUAL_ID:
			return getCaseCaseLoopsCompartment_7060SemanticChildren(view);
		case InsertInsertIfsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertIfsCompartment_7061SemanticChildren(view);
		case InsertInsertCasesCompartmentEditPart.VISUAL_ID:
			return getInsertInsertCasesCompartment_7062SemanticChildren(view);
		case InsertInsertInsertsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertInsertsCompartment_7063SemanticChildren(view);
		case InsertInsertUpdatesCompartmentEditPart.VISUAL_ID:
			return getInsertInsertUpdatesCompartment_7064SemanticChildren(view);
		case InsertInsertDeletesCompartmentEditPart.VISUAL_ID:
			return getInsertInsertDeletesCompartment_7065SemanticChildren(view);
		case InsertInsertSelectsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertSelectsCompartment_7066SemanticChildren(view);
		case InsertInsertOutuputsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertOutuputsCompartment_7067SemanticChildren(view);
		case InsertInsertCursorsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertCursorsCompartment_7068SemanticChildren(view);
		case InsertInsertWhilesCompartmentEditPart.VISUAL_ID:
			return getInsertInsertWhilesCompartment_7069SemanticChildren(view);
		case InsertInsertForsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertForsCompartment_7070SemanticChildren(view);
		case InsertInsertLoopsCompartmentEditPart.VISUAL_ID:
			return getInsertInsertLoopsCompartment_7071SemanticChildren(view);
		case UpdateUpdateIfsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateIfsCompartment_7072SemanticChildren(view);
		case UpdateUpdateCasesCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateCasesCompartment_7073SemanticChildren(view);
		case UpdateUpdateInsertsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateInsertsCompartment_7074SemanticChildren(view);
		case UpdateUpdateUpdatesCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateUpdatesCompartment_7075SemanticChildren(view);
		case UpdateUpdateDeletesCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateDeletesCompartment_7076SemanticChildren(view);
		case UpdateUpdateSelectsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateSelectsCompartment_7077SemanticChildren(view);
		case UpdateUpdateOutuputsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateOutuputsCompartment_7078SemanticChildren(view);
		case UpdateUpdateCursorsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateCursorsCompartment_7079SemanticChildren(view);
		case UpdateUpdateWhilesCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateWhilesCompartment_7080SemanticChildren(view);
		case UpdateUpdateForsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateForsCompartment_7081SemanticChildren(view);
		case UpdateUpdateLoopsCompartmentEditPart.VISUAL_ID:
			return getUpdateUpdateLoopsCompartment_7082SemanticChildren(view);
		case DeleteDeleteIfsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteIfsCompartment_7083SemanticChildren(view);
		case DeleteDeleteCasesCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteCasesCompartment_7084SemanticChildren(view);
		case DeleteDeleteInsertsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteInsertsCompartment_7085SemanticChildren(view);
		case DeleteDeleteUpdatesCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteUpdatesCompartment_7086SemanticChildren(view);
		case DeleteDeleteDeletesCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteDeletesCompartment_7087SemanticChildren(view);
		case DeleteDeleteSelectsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteSelectsCompartment_7088SemanticChildren(view);
		case DeleteDeleteOutuputsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteOutuputsCompartment_7089SemanticChildren(view);
		case DeleteDeleteCursorsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteCursorsCompartment_7090SemanticChildren(view);
		case DeleteDeleteWhilesCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteWhilesCompartment_7091SemanticChildren(view);
		case DeleteDeleteForsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteForsCompartment_7092SemanticChildren(view);
		case DeleteDeleteLoopsCompartmentEditPart.VISUAL_ID:
			return getDeleteDeleteLoopsCompartment_7093SemanticChildren(view);
		case SelectSelectIfsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectIfsCompartment_7094SemanticChildren(view);
		case SelectSelectCasesCompartmentEditPart.VISUAL_ID:
			return getSelectSelectCasesCompartment_7095SemanticChildren(view);
		case SelectSelectInsertsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectInsertsCompartment_7096SemanticChildren(view);
		case SelectSelectUpdatesCompartmentEditPart.VISUAL_ID:
			return getSelectSelectUpdatesCompartment_7097SemanticChildren(view);
		case SelectSelectDeletesCompartmentEditPart.VISUAL_ID:
			return getSelectSelectDeletesCompartment_7098SemanticChildren(view);
		case SelectSelectSelectsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectSelectsCompartment_7099SemanticChildren(view);
		case SelectSelectOutuputsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectOutuputsCompartment_7100SemanticChildren(view);
		case SelectSelectCursorsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectCursorsCompartment_7101SemanticChildren(view);
		case SelectSelectWhilesCompartmentEditPart.VISUAL_ID:
			return getSelectSelectWhilesCompartment_7102SemanticChildren(view);
		case SelectSelectForsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectForsCompartment_7103SemanticChildren(view);
		case SelectSelectLoopsCompartmentEditPart.VISUAL_ID:
			return getSelectSelectLoopsCompartment_7104SemanticChildren(view);
		case OutputOutputIfsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputIfsCompartment_7105SemanticChildren(view);
		case OutputOutputCasesCompartmentEditPart.VISUAL_ID:
			return getOutputOutputCasesCompartment_7106SemanticChildren(view);
		case OutputOutputInsertsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputInsertsCompartment_7107SemanticChildren(view);
		case OutputOutputUpdatesCompartmentEditPart.VISUAL_ID:
			return getOutputOutputUpdatesCompartment_7108SemanticChildren(view);
		case OutputOutputDeletesCompartmentEditPart.VISUAL_ID:
			return getOutputOutputDeletesCompartment_7109SemanticChildren(view);
		case OutputOutputSelectsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputSelectsCompartment_7110SemanticChildren(view);
		case OutputOutputOutuputsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputOutuputsCompartment_7111SemanticChildren(view);
		case OutputOutputCursorsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputCursorsCompartment_7112SemanticChildren(view);
		case OutputOutputWhilesCompartmentEditPart.VISUAL_ID:
			return getOutputOutputWhilesCompartment_7113SemanticChildren(view);
		case OutputOutputForsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputForsCompartment_7114SemanticChildren(view);
		case OutputOutputLoopsCompartmentEditPart.VISUAL_ID:
			return getOutputOutputLoopsCompartment_7115SemanticChildren(view);
		case CursorCursorIfsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorIfsCompartment_7116SemanticChildren(view);
		case CursorCursorCasesCompartmentEditPart.VISUAL_ID:
			return getCursorCursorCasesCompartment_7117SemanticChildren(view);
		case CursorCursorInsertsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorInsertsCompartment_7118SemanticChildren(view);
		case CursorCursorUpdatesCompartmentEditPart.VISUAL_ID:
			return getCursorCursorUpdatesCompartment_7119SemanticChildren(view);
		case CursorCursorDeletesCompartmentEditPart.VISUAL_ID:
			return getCursorCursorDeletesCompartment_7120SemanticChildren(view);
		case CursorCursorSelectsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorSelectsCompartment_7121SemanticChildren(view);
		case CursorCursorOutuputsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorOutuputsCompartment_7122SemanticChildren(view);
		case CursorCursorCursorsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorCursorsCompartment_7123SemanticChildren(view);
		case CursorCursorWhilesCompartmentEditPart.VISUAL_ID:
			return getCursorCursorWhilesCompartment_7124SemanticChildren(view);
		case CursorCursorForsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorForsCompartment_7125SemanticChildren(view);
		case CursorCursorLoopsCompartmentEditPart.VISUAL_ID:
			return getCursorCursorLoopsCompartment_7126SemanticChildren(view);
		case WhileWhileIfsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileIfsCompartment_7127SemanticChildren(view);
		case WhileWhileCasesCompartmentEditPart.VISUAL_ID:
			return getWhileWhileCasesCompartment_7128SemanticChildren(view);
		case WhileWhileInsertsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileInsertsCompartment_7129SemanticChildren(view);
		case WhileWhileUpdatesCompartmentEditPart.VISUAL_ID:
			return getWhileWhileUpdatesCompartment_7130SemanticChildren(view);
		case WhileWhileDeletesCompartmentEditPart.VISUAL_ID:
			return getWhileWhileDeletesCompartment_7131SemanticChildren(view);
		case WhileWhileSelectsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileSelectsCompartment_7132SemanticChildren(view);
		case WhileWhileOutuputsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileOutuputsCompartment_7133SemanticChildren(view);
		case WhileWhileCursorsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileCursorsCompartment_7134SemanticChildren(view);
		case WhileWhileWhilesCompartmentEditPart.VISUAL_ID:
			return getWhileWhileWhilesCompartment_7135SemanticChildren(view);
		case WhileWhileForsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileForsCompartment_7136SemanticChildren(view);
		case WhileWhileLoopsCompartmentEditPart.VISUAL_ID:
			return getWhileWhileLoopsCompartment_7137SemanticChildren(view);
		case ForForIfsCompartmentEditPart.VISUAL_ID:
			return getForForIfsCompartment_7138SemanticChildren(view);
		case ForForCasesCompartmentEditPart.VISUAL_ID:
			return getForForCasesCompartment_7139SemanticChildren(view);
		case ForForInsertsCompartmentEditPart.VISUAL_ID:
			return getForForInsertsCompartment_7140SemanticChildren(view);
		case ForForUpdatesCompartmentEditPart.VISUAL_ID:
			return getForForUpdatesCompartment_7141SemanticChildren(view);
		case ForForDeletesCompartmentEditPart.VISUAL_ID:
			return getForForDeletesCompartment_7142SemanticChildren(view);
		case ForForSelectsCompartmentEditPart.VISUAL_ID:
			return getForForSelectsCompartment_7143SemanticChildren(view);
		case ForForOutuputsCompartmentEditPart.VISUAL_ID:
			return getForForOutuputsCompartment_7144SemanticChildren(view);
		case ForForCursorsCompartmentEditPart.VISUAL_ID:
			return getForForCursorsCompartment_7145SemanticChildren(view);
		case ForForWhilesCompartmentEditPart.VISUAL_ID:
			return getForForWhilesCompartment_7146SemanticChildren(view);
		case ForForForsCompartmentEditPart.VISUAL_ID:
			return getForForForsCompartment_7147SemanticChildren(view);
		case ForForLoopsCompartmentEditPart.VISUAL_ID:
			return getForForLoopsCompartment_7148SemanticChildren(view);
		case LoopLoopIfsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopIfsCompartment_7149SemanticChildren(view);
		case LoopLoopCasesCompartmentEditPart.VISUAL_ID:
			return getLoopLoopCasesCompartment_7150SemanticChildren(view);
		case LoopLoopInsertsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopInsertsCompartment_7151SemanticChildren(view);
		case LoopLoopUpdatesCompartmentEditPart.VISUAL_ID:
			return getLoopLoopUpdatesCompartment_7152SemanticChildren(view);
		case LoopLoopDeletesCompartmentEditPart.VISUAL_ID:
			return getLoopLoopDeletesCompartment_7153SemanticChildren(view);
		case LoopLoopSelectsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopSelectsCompartment_7154SemanticChildren(view);
		case LoopLoopOutuputsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopOutuputsCompartment_7155SemanticChildren(view);
		case LoopLoopCursorsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopCursorsCompartment_7156SemanticChildren(view);
		case LoopLoopWhilesCompartmentEditPart.VISUAL_ID:
			return getLoopLoopWhilesCompartment_7157SemanticChildren(view);
		case LoopLoopForsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopForsCompartment_7158SemanticChildren(view);
		case LoopLoopLoopsCompartmentEditPart.VISUAL_ID:
			return getLoopLoopLoopsCompartment_7159SemanticChildren(view);
		case CaseCaseIfsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseIfsCompartment_7013SemanticChildren(view);
		case CaseCaseCasesCompartment2EditPart.VISUAL_ID:
			return getCaseCaseCasesCompartment_7160SemanticChildren(view);
		case CaseCaseInsertsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseInsertsCompartment_7161SemanticChildren(view);
		case CaseCaseUpdatesCompartment2EditPart.VISUAL_ID:
			return getCaseCaseUpdatesCompartment_7162SemanticChildren(view);
		case CaseCaseDeletesCompartment2EditPart.VISUAL_ID:
			return getCaseCaseDeletesCompartment_7163SemanticChildren(view);
		case CaseCaseSelectsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseSelectsCompartment_7164SemanticChildren(view);
		case CaseCaseOutuputsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseOutuputsCompartment_7165SemanticChildren(view);
		case CaseCaseCursorsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseCursorsCompartment_7166SemanticChildren(view);
		case CaseCaseWhilesCompartment2EditPart.VISUAL_ID:
			return getCaseCaseWhilesCompartment_7167SemanticChildren(view);
		case CaseCaseForsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseForsCompartment_7168SemanticChildren(view);
		case CaseCaseLoopsCompartment2EditPart.VISUAL_ID:
			return getCaseCaseLoopsCompartment_7169SemanticChildren(view);
		case InsertInsertIfsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertIfsCompartment_7014SemanticChildren(view);
		case InsertInsertCasesCompartment2EditPart.VISUAL_ID:
			return getInsertInsertCasesCompartment_7170SemanticChildren(view);
		case InsertInsertInsertsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertInsertsCompartment_7171SemanticChildren(view);
		case InsertInsertUpdatesCompartment2EditPart.VISUAL_ID:
			return getInsertInsertUpdatesCompartment_7172SemanticChildren(view);
		case InsertInsertDeletesCompartment2EditPart.VISUAL_ID:
			return getInsertInsertDeletesCompartment_7173SemanticChildren(view);
		case InsertInsertSelectsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertSelectsCompartment_7174SemanticChildren(view);
		case InsertInsertOutuputsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertOutuputsCompartment_7175SemanticChildren(view);
		case InsertInsertCursorsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertCursorsCompartment_7176SemanticChildren(view);
		case InsertInsertWhilesCompartment2EditPart.VISUAL_ID:
			return getInsertInsertWhilesCompartment_7177SemanticChildren(view);
		case InsertInsertForsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertForsCompartment_7178SemanticChildren(view);
		case InsertInsertLoopsCompartment2EditPart.VISUAL_ID:
			return getInsertInsertLoopsCompartment_7179SemanticChildren(view);
		case UpdateUpdateIfsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateIfsCompartment_7015SemanticChildren(view);
		case UpdateUpdateCasesCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateCasesCompartment_7180SemanticChildren(view);
		case UpdateUpdateInsertsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateInsertsCompartment_7181SemanticChildren(view);
		case UpdateUpdateUpdatesCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateUpdatesCompartment_7182SemanticChildren(view);
		case UpdateUpdateDeletesCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateDeletesCompartment_7183SemanticChildren(view);
		case UpdateUpdateSelectsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateSelectsCompartment_7184SemanticChildren(view);
		case UpdateUpdateOutuputsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateOutuputsCompartment_7185SemanticChildren(view);
		case UpdateUpdateCursorsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateCursorsCompartment_7186SemanticChildren(view);
		case UpdateUpdateWhilesCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateWhilesCompartment_7187SemanticChildren(view);
		case UpdateUpdateForsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateForsCompartment_7188SemanticChildren(view);
		case UpdateUpdateLoopsCompartment2EditPart.VISUAL_ID:
			return getUpdateUpdateLoopsCompartment_7189SemanticChildren(view);
		case DeleteDeleteIfsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteIfsCompartment_7016SemanticChildren(view);
		case DeleteDeleteCasesCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteCasesCompartment_7190SemanticChildren(view);
		case DeleteDeleteInsertsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteInsertsCompartment_7191SemanticChildren(view);
		case DeleteDeleteUpdatesCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteUpdatesCompartment_7192SemanticChildren(view);
		case DeleteDeleteDeletesCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteDeletesCompartment_7193SemanticChildren(view);
		case DeleteDeleteSelectsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteSelectsCompartment_7194SemanticChildren(view);
		case DeleteDeleteOutuputsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteOutuputsCompartment_7195SemanticChildren(view);
		case DeleteDeleteCursorsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteCursorsCompartment_7196SemanticChildren(view);
		case DeleteDeleteWhilesCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteWhilesCompartment_7197SemanticChildren(view);
		case DeleteDeleteForsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteForsCompartment_7198SemanticChildren(view);
		case DeleteDeleteLoopsCompartment2EditPart.VISUAL_ID:
			return getDeleteDeleteLoopsCompartment_7199SemanticChildren(view);
		case SelectSelectIfsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectIfsCompartment_7017SemanticChildren(view);
		case SelectSelectCasesCompartment2EditPart.VISUAL_ID:
			return getSelectSelectCasesCompartment_7200SemanticChildren(view);
		case SelectSelectInsertsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectInsertsCompartment_7201SemanticChildren(view);
		case SelectSelectUpdatesCompartment2EditPart.VISUAL_ID:
			return getSelectSelectUpdatesCompartment_7202SemanticChildren(view);
		case SelectSelectDeletesCompartment2EditPart.VISUAL_ID:
			return getSelectSelectDeletesCompartment_7203SemanticChildren(view);
		case SelectSelectSelectsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectSelectsCompartment_7204SemanticChildren(view);
		case SelectSelectOutuputsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectOutuputsCompartment_7205SemanticChildren(view);
		case SelectSelectCursorsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectCursorsCompartment_7206SemanticChildren(view);
		case SelectSelectWhilesCompartment2EditPart.VISUAL_ID:
			return getSelectSelectWhilesCompartment_7207SemanticChildren(view);
		case SelectSelectForsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectForsCompartment_7208SemanticChildren(view);
		case SelectSelectLoopsCompartment2EditPart.VISUAL_ID:
			return getSelectSelectLoopsCompartment_7209SemanticChildren(view);
		case OutputOutputIfsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputIfsCompartment_7018SemanticChildren(view);
		case OutputOutputCasesCompartment2EditPart.VISUAL_ID:
			return getOutputOutputCasesCompartment_7210SemanticChildren(view);
		case OutputOutputInsertsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputInsertsCompartment_7211SemanticChildren(view);
		case OutputOutputUpdatesCompartment2EditPart.VISUAL_ID:
			return getOutputOutputUpdatesCompartment_7212SemanticChildren(view);
		case OutputOutputDeletesCompartment2EditPart.VISUAL_ID:
			return getOutputOutputDeletesCompartment_7213SemanticChildren(view);
		case OutputOutputSelectsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputSelectsCompartment_7214SemanticChildren(view);
		case OutputOutputOutuputsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputOutuputsCompartment_7215SemanticChildren(view);
		case OutputOutputCursorsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputCursorsCompartment_7216SemanticChildren(view);
		case OutputOutputWhilesCompartment2EditPart.VISUAL_ID:
			return getOutputOutputWhilesCompartment_7217SemanticChildren(view);
		case OutputOutputForsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputForsCompartment_7218SemanticChildren(view);
		case OutputOutputLoopsCompartment2EditPart.VISUAL_ID:
			return getOutputOutputLoopsCompartment_7219SemanticChildren(view);
		case CursorCursorIfsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorIfsCompartment_7019SemanticChildren(view);
		case CursorCursorCasesCompartment2EditPart.VISUAL_ID:
			return getCursorCursorCasesCompartment_7220SemanticChildren(view);
		case CursorCursorInsertsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorInsertsCompartment_7221SemanticChildren(view);
		case CursorCursorUpdatesCompartment2EditPart.VISUAL_ID:
			return getCursorCursorUpdatesCompartment_7222SemanticChildren(view);
		case CursorCursorDeletesCompartment2EditPart.VISUAL_ID:
			return getCursorCursorDeletesCompartment_7223SemanticChildren(view);
		case CursorCursorSelectsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorSelectsCompartment_7224SemanticChildren(view);
		case CursorCursorOutuputsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorOutuputsCompartment_7225SemanticChildren(view);
		case CursorCursorCursorsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorCursorsCompartment_7226SemanticChildren(view);
		case CursorCursorWhilesCompartment2EditPart.VISUAL_ID:
			return getCursorCursorWhilesCompartment_7227SemanticChildren(view);
		case CursorCursorForsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorForsCompartment_7228SemanticChildren(view);
		case CursorCursorLoopsCompartment2EditPart.VISUAL_ID:
			return getCursorCursorLoopsCompartment_7229SemanticChildren(view);
		case WhileWhileIfsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileIfsCompartment_7020SemanticChildren(view);
		case WhileWhileCasesCompartment2EditPart.VISUAL_ID:
			return getWhileWhileCasesCompartment_7230SemanticChildren(view);
		case WhileWhileInsertsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileInsertsCompartment_7231SemanticChildren(view);
		case WhileWhileUpdatesCompartment2EditPart.VISUAL_ID:
			return getWhileWhileUpdatesCompartment_7232SemanticChildren(view);
		case WhileWhileDeletesCompartment2EditPart.VISUAL_ID:
			return getWhileWhileDeletesCompartment_7233SemanticChildren(view);
		case WhileWhileSelectsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileSelectsCompartment_7234SemanticChildren(view);
		case WhileWhileOutuputsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileOutuputsCompartment_7235SemanticChildren(view);
		case WhileWhileCursorsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileCursorsCompartment_7236SemanticChildren(view);
		case WhileWhileWhilesCompartment2EditPart.VISUAL_ID:
			return getWhileWhileWhilesCompartment_7237SemanticChildren(view);
		case WhileWhileForsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileForsCompartment_7238SemanticChildren(view);
		case WhileWhileLoopsCompartment2EditPart.VISUAL_ID:
			return getWhileWhileLoopsCompartment_7239SemanticChildren(view);
		case ForForIfsCompartment2EditPart.VISUAL_ID:
			return getForForIfsCompartment_7021SemanticChildren(view);
		case ForForCasesCompartment2EditPart.VISUAL_ID:
			return getForForCasesCompartment_7240SemanticChildren(view);
		case ForForInsertsCompartment2EditPart.VISUAL_ID:
			return getForForInsertsCompartment_7241SemanticChildren(view);
		case ForForUpdatesCompartment2EditPart.VISUAL_ID:
			return getForForUpdatesCompartment_7242SemanticChildren(view);
		case ForForDeletesCompartment2EditPart.VISUAL_ID:
			return getForForDeletesCompartment_7243SemanticChildren(view);
		case ForForSelectsCompartment2EditPart.VISUAL_ID:
			return getForForSelectsCompartment_7244SemanticChildren(view);
		case ForForOutuputsCompartment2EditPart.VISUAL_ID:
			return getForForOutuputsCompartment_7245SemanticChildren(view);
		case ForForCursorsCompartment2EditPart.VISUAL_ID:
			return getForForCursorsCompartment_7246SemanticChildren(view);
		case ForForWhilesCompartment2EditPart.VISUAL_ID:
			return getForForWhilesCompartment_7247SemanticChildren(view);
		case ForForForsCompartment2EditPart.VISUAL_ID:
			return getForForForsCompartment_7248SemanticChildren(view);
		case ForForLoopsCompartment2EditPart.VISUAL_ID:
			return getForForLoopsCompartment_7249SemanticChildren(view);
		case LoopLoopIfsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopIfsCompartment_7022SemanticChildren(view);
		case LoopLoopCasesCompartment2EditPart.VISUAL_ID:
			return getLoopLoopCasesCompartment_7250SemanticChildren(view);
		case LoopLoopInsertsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopInsertsCompartment_7251SemanticChildren(view);
		case LoopLoopUpdatesCompartment2EditPart.VISUAL_ID:
			return getLoopLoopUpdatesCompartment_7252SemanticChildren(view);
		case LoopLoopDeletesCompartment2EditPart.VISUAL_ID:
			return getLoopLoopDeletesCompartment_7253SemanticChildren(view);
		case LoopLoopSelectsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopSelectsCompartment_7254SemanticChildren(view);
		case LoopLoopOutuputsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopOutuputsCompartment_7255SemanticChildren(view);
		case LoopLoopCursorsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopCursorsCompartment_7256SemanticChildren(view);
		case LoopLoopWhilesCompartment2EditPart.VISUAL_ID:
			return getLoopLoopWhilesCompartment_7257SemanticChildren(view);
		case LoopLoopForsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopForsCompartment_7258SemanticChildren(view);
		case LoopLoopLoopsCompartment2EditPart.VISUAL_ID:
			return getLoopLoopLoopsCompartment_7259SemanticChildren(view);
		case ExceptionCommandExceptionCommandExcecoesCompartmentEditPart.VISUAL_ID:
			return getExceptionCommandExceptionCommandExcecoesCompartment_7007SemanticChildren(view);
		case ExceptionCommandExceptionCommandExcecoesCompartment2EditPart.VISUAL_ID:
			return getExceptionCommandExceptionCommandExcecoesCompartment_7008SemanticChildren(view);
		case ParameterInParameterInParametros_inCompartmentEditPart.VISUAL_ID:
			return getParameterInParameterInParametros_inCompartment_7023SemanticChildren(view);
		case ParameterInParameterInParametros_in_outCompartmentEditPart.VISUAL_ID:
			return getParameterInParameterInParametros_in_outCompartment_7260SemanticChildren(view);
		case ParameterInParameterInParametros_outCompartmentEditPart.VISUAL_ID:
			return getParameterInParameterInParametros_outCompartment_7261SemanticChildren(view);
		case ParameterInParameterInParametros_inCompartment2EditPart.VISUAL_ID:
			return getParameterInParameterInParametros_inCompartment_7024SemanticChildren(view);
		case ParameterInParameterInParametros_in_outCompartment2EditPart.VISUAL_ID:
			return getParameterInParameterInParametros_in_outCompartment_7262SemanticChildren(view);
		case ParameterInParameterInParametros_outCompartment2EditPart.VISUAL_ID:
			return getParameterInParameterInParametros_outCompartment_7263SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_inCompartmentEditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_inCompartment_7264SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_in_outCompartmentEditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_in_outCompartment_7265SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_outCompartmentEditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_outCompartment_7266SemanticChildren(view);
		case ParameterOutParameterOutParametros_inCompartmentEditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_inCompartment_7267SemanticChildren(view);
		case ParameterOutParameterOutParametros_in_outCompartmentEditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_in_outCompartment_7268SemanticChildren(view);
		case ParameterOutParameterOutParametros_outCompartmentEditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_outCompartment_7269SemanticChildren(view);
		case ParameterOutParameterOutParametros_inCompartment2EditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_inCompartment_7025SemanticChildren(view);
		case ParameterOutParameterOutParametros_in_outCompartment2EditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_in_outCompartment_7270SemanticChildren(view);
		case ParameterOutParameterOutParametros_outCompartment2EditPart.VISUAL_ID:
			return getParameterOutParameterOutParametros_outCompartment_7271SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_inCompartment2EditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_inCompartment_7026SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_in_outCompartment2EditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_in_outCompartment_7272SemanticChildren(view);
		case ParameterInOutParameterInOutParametros_outCompartment2EditPart.VISUAL_ID:
			return getParameterInOutParameterInOutParametros_outCompartment_7273SemanticChildren(view);
		case DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart.VISUAL_ID:
			return getDeclarativePartDeclarativePartTipos_dadosCompartment_7009SemanticChildren(view);
		case ExecutablePartExecutablePartIfsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartIfsCompartment_7027SemanticChildren(view);
		case ExecutablePartExecutablePartCasesCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartCasesCompartment_7274SemanticChildren(view);
		case ExecutablePartExecutablePartInsertsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartInsertsCompartment_7275SemanticChildren(view);
		case ExecutablePartExecutablePartUpdatesCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartUpdatesCompartment_7276SemanticChildren(view);
		case ExecutablePartExecutablePartDeletesCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartDeletesCompartment_7277SemanticChildren(view);
		case ExecutablePartExecutablePartSelectsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartSelectsCompartment_7278SemanticChildren(view);
		case ExecutablePartExecutablePartOutuputsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartOutuputsCompartment_7279SemanticChildren(view);
		case ExecutablePartExecutablePartCursorsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartCursorsCompartment_7280SemanticChildren(view);
		case ExecutablePartExecutablePartWhilesCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartWhilesCompartment_7281SemanticChildren(view);
		case ExecutablePartExecutablePartForsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartForsCompartment_7282SemanticChildren(view);
		case ExecutablePartExecutablePartLoopsCompartmentEditPart.VISUAL_ID:
			return getExecutablePartExecutablePartLoopsCompartment_7283SemanticChildren(view);
		case ExceptionPartExceptionPartExcecoesCompartmentEditPart.VISUAL_ID:
			return getExceptionPartExceptionPartExcecoesCompartment_7010SemanticChildren(view);
		case ReturnReturnTipo_retornoCompartmentEditPart.VISUAL_ID:
			return getReturnReturnTipo_retornoCompartment_7028SemanticChildren(view);
		case ParametersParametersParametros_inCompartmentEditPart.VISUAL_ID:
			return getParametersParametersParametros_inCompartment_7029SemanticChildren(view);
		case ParametersParametersParametros_in_outCompartmentEditPart.VISUAL_ID:
			return getParametersParametersParametros_in_outCompartment_7284SemanticChildren(view);
		case ParametersParametersParametros_outCompartmentEditPart.VISUAL_ID:
			return getParametersParametersParametros_outCompartment_7285SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getFilesystem_1000SemanticChildren(
			View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Filesystem modelElement = (Filesystem) view.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		{
			DeclarativePart childElement = modelElement.getDeclarative();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_TypeEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == DeclarativePartEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		{
			ExecutablePart childElement = modelElement.getExecutable();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == IfEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == CaseEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == InsertEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == UpdateEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == DeleteEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == SelectEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == OutputEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == CursorEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == WhileEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ForEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == LoopEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ExecutablePartEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		{
			ExceptionPart childElement = modelElement.getException();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ExceptionCommandEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ExceptionPartEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		{
			Parameters childElement = modelElement.getParameters();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ParameterOutEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ParameterInOutEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
			if (visualID == ParametersEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		{
			Return childElement = modelElement.getReturn();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ReturnEditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipo_retornoCompartment_7001SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		{
			Data_Type childElement = modelElement.getTipo_retorno();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipos_dadosCompartment_7002SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getTipos_dados().iterator(); it
				.hasNext();) {
			Data_Type childElement = (Data_Type) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type3EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipo_retornoCompartment_7003SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		{
			Data_Type childElement = modelElement.getTipo_retorno();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipos_dadosCompartment_7004SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getTipos_dados().iterator(); it
				.hasNext();) {
			Data_Type childElement = (Data_Type) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type3EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipo_retornoCompartment_7005SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		{
			Data_Type childElement = modelElement.getTipo_retorno();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getData_TypeData_TypeTipos_dadosCompartment_7006SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Data_Type modelElement = (Data_Type) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getTipos_dados().iterator(); it
				.hasNext();) {
			Data_Type childElement = (Data_Type) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type3EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfIfsCompartment_7011SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfCasesCompartment_7030SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfInsertsCompartment_7031SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfUpdatesCompartment_7032SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfDeletesCompartment_7033SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfSelectsCompartment_7034SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfOutuputsCompartment_7035SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfCursorsCompartment_7036SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfWhilesCompartment_7037SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfForsCompartment_7038SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfLoopsCompartment_7039SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfIfsCompartment_7012SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfCasesCompartment_7040SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfInsertsCompartment_7041SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfUpdatesCompartment_7042SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfDeletesCompartment_7043SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfSelectsCompartment_7044SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfOutuputsCompartment_7045SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfCursorsCompartment_7046SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfWhilesCompartment_7047SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfForsCompartment_7048SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getIfIfLoopsCompartment_7049SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		If modelElement = (If) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseIfsCompartment_7050SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseCasesCompartment_7051SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseInsertsCompartment_7052SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseUpdatesCompartment_7053SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseDeletesCompartment_7054SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseSelectsCompartment_7055SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseOutuputsCompartment_7056SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseCursorsCompartment_7057SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseWhilesCompartment_7058SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseForsCompartment_7059SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseLoopsCompartment_7060SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertIfsCompartment_7061SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertCasesCompartment_7062SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertInsertsCompartment_7063SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertUpdatesCompartment_7064SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertDeletesCompartment_7065SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertSelectsCompartment_7066SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertOutuputsCompartment_7067SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertCursorsCompartment_7068SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertWhilesCompartment_7069SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertForsCompartment_7070SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertLoopsCompartment_7071SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateIfsCompartment_7072SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateCasesCompartment_7073SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateInsertsCompartment_7074SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateUpdatesCompartment_7075SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateDeletesCompartment_7076SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateSelectsCompartment_7077SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateOutuputsCompartment_7078SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateCursorsCompartment_7079SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateWhilesCompartment_7080SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateForsCompartment_7081SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateLoopsCompartment_7082SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteIfsCompartment_7083SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteCasesCompartment_7084SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteInsertsCompartment_7085SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteUpdatesCompartment_7086SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteDeletesCompartment_7087SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteSelectsCompartment_7088SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteOutuputsCompartment_7089SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteCursorsCompartment_7090SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteWhilesCompartment_7091SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteForsCompartment_7092SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteLoopsCompartment_7093SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectIfsCompartment_7094SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectCasesCompartment_7095SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectInsertsCompartment_7096SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectUpdatesCompartment_7097SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectDeletesCompartment_7098SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectSelectsCompartment_7099SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectOutuputsCompartment_7100SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectCursorsCompartment_7101SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectWhilesCompartment_7102SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectForsCompartment_7103SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectLoopsCompartment_7104SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputIfsCompartment_7105SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputCasesCompartment_7106SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputInsertsCompartment_7107SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputUpdatesCompartment_7108SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputDeletesCompartment_7109SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputSelectsCompartment_7110SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputOutuputsCompartment_7111SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputCursorsCompartment_7112SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputWhilesCompartment_7113SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputForsCompartment_7114SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputLoopsCompartment_7115SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorIfsCompartment_7116SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorCasesCompartment_7117SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorInsertsCompartment_7118SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorUpdatesCompartment_7119SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorDeletesCompartment_7120SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorSelectsCompartment_7121SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorOutuputsCompartment_7122SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorCursorsCompartment_7123SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorWhilesCompartment_7124SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorForsCompartment_7125SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorLoopsCompartment_7126SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileIfsCompartment_7127SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileCasesCompartment_7128SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileInsertsCompartment_7129SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileUpdatesCompartment_7130SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileDeletesCompartment_7131SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileSelectsCompartment_7132SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileOutuputsCompartment_7133SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileCursorsCompartment_7134SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileWhilesCompartment_7135SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileForsCompartment_7136SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileLoopsCompartment_7137SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForIfsCompartment_7138SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForCasesCompartment_7139SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForInsertsCompartment_7140SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForUpdatesCompartment_7141SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForDeletesCompartment_7142SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForSelectsCompartment_7143SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForOutuputsCompartment_7144SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForCursorsCompartment_7145SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForWhilesCompartment_7146SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForForsCompartment_7147SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForLoopsCompartment_7148SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopIfsCompartment_7149SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopCasesCompartment_7150SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopInsertsCompartment_7151SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopUpdatesCompartment_7152SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopDeletesCompartment_7153SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopSelectsCompartment_7154SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopOutuputsCompartment_7155SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopCursorsCompartment_7156SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopWhilesCompartment_7157SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopForsCompartment_7158SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopLoopsCompartment_7159SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseIfsCompartment_7013SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseCasesCompartment_7160SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseInsertsCompartment_7161SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseUpdatesCompartment_7162SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseDeletesCompartment_7163SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseSelectsCompartment_7164SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseOutuputsCompartment_7165SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseCursorsCompartment_7166SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseWhilesCompartment_7167SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseForsCompartment_7168SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCaseCaseLoopsCompartment_7169SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Case modelElement = (Case) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertIfsCompartment_7014SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertCasesCompartment_7170SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertInsertsCompartment_7171SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertUpdatesCompartment_7172SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertDeletesCompartment_7173SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertSelectsCompartment_7174SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertOutuputsCompartment_7175SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertCursorsCompartment_7176SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertWhilesCompartment_7177SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertForsCompartment_7178SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getInsertInsertLoopsCompartment_7179SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Insert modelElement = (Insert) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateIfsCompartment_7015SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateCasesCompartment_7180SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateInsertsCompartment_7181SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateUpdatesCompartment_7182SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateDeletesCompartment_7183SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateSelectsCompartment_7184SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateOutuputsCompartment_7185SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateCursorsCompartment_7186SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateWhilesCompartment_7187SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateForsCompartment_7188SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getUpdateUpdateLoopsCompartment_7189SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Update modelElement = (Update) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteIfsCompartment_7016SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteCasesCompartment_7190SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteInsertsCompartment_7191SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteUpdatesCompartment_7192SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteDeletesCompartment_7193SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteSelectsCompartment_7194SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteOutuputsCompartment_7195SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteCursorsCompartment_7196SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteWhilesCompartment_7197SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteForsCompartment_7198SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeleteDeleteLoopsCompartment_7199SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Delete modelElement = (Delete) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectIfsCompartment_7017SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectCasesCompartment_7200SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectInsertsCompartment_7201SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectUpdatesCompartment_7202SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectDeletesCompartment_7203SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectSelectsCompartment_7204SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectOutuputsCompartment_7205SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectCursorsCompartment_7206SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectWhilesCompartment_7207SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectForsCompartment_7208SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getSelectSelectLoopsCompartment_7209SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Select modelElement = (Select) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputIfsCompartment_7018SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputCasesCompartment_7210SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputInsertsCompartment_7211SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputUpdatesCompartment_7212SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputDeletesCompartment_7213SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputSelectsCompartment_7214SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputOutuputsCompartment_7215SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputCursorsCompartment_7216SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputWhilesCompartment_7217SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputForsCompartment_7218SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getOutputOutputLoopsCompartment_7219SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Output modelElement = (Output) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorIfsCompartment_7019SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorCasesCompartment_7220SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorInsertsCompartment_7221SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorUpdatesCompartment_7222SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorDeletesCompartment_7223SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorSelectsCompartment_7224SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorOutuputsCompartment_7225SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorCursorsCompartment_7226SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorWhilesCompartment_7227SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorForsCompartment_7228SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getCursorCursorLoopsCompartment_7229SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Cursor modelElement = (Cursor) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileIfsCompartment_7020SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileCasesCompartment_7230SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileInsertsCompartment_7231SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileUpdatesCompartment_7232SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileDeletesCompartment_7233SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileSelectsCompartment_7234SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileOutuputsCompartment_7235SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileCursorsCompartment_7236SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileWhilesCompartment_7237SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileForsCompartment_7238SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getWhileWhileLoopsCompartment_7239SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		While modelElement = (While) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForIfsCompartment_7021SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForCasesCompartment_7240SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForInsertsCompartment_7241SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForUpdatesCompartment_7242SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForDeletesCompartment_7243SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForSelectsCompartment_7244SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForOutuputsCompartment_7245SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForCursorsCompartment_7246SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForWhilesCompartment_7247SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForForsCompartment_7248SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getForForLoopsCompartment_7249SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		For modelElement = (For) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopIfsCompartment_7022SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopCasesCompartment_7250SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopInsertsCompartment_7251SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopUpdatesCompartment_7252SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopDeletesCompartment_7253SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopSelectsCompartment_7254SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopOutuputsCompartment_7255SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopCursorsCompartment_7256SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopWhilesCompartment_7257SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopForsCompartment_7258SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getLoopLoopLoopsCompartment_7259SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Loop modelElement = (Loop) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExceptionCommandExceptionCommandExcecoesCompartment_7007SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExceptionCommand modelElement = (ExceptionCommand) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getExcecoes().iterator(); it
				.hasNext();) {
			ExceptionCommand childElement = (ExceptionCommand) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ExceptionCommand2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExceptionCommandExceptionCommandExcecoesCompartment_7008SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExceptionCommand modelElement = (ExceptionCommand) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getExcecoes().iterator(); it
				.hasNext();) {
			ExceptionCommand childElement = (ExceptionCommand) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ExceptionCommand2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_inCompartment_7023SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_in_outCompartment_7260SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_outCompartment_7261SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_inCompartment_7024SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_in_outCompartment_7262SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInParameterInParametros_outCompartment_7263SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterIn modelElement = (ParameterIn) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_inCompartment_7264SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_in_outCompartment_7265SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_outCompartment_7266SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_inCompartment_7267SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_in_outCompartment_7268SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_outCompartment_7269SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_inCompartment_7025SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_in_outCompartment_7270SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterOutParameterOutParametros_outCompartment_7271SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterOut modelElement = (ParameterOut) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_inCompartment_7026SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_in_outCompartment_7272SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParameterInOutParameterInOutParametros_outCompartment_7273SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ParameterInOut modelElement = (ParameterInOut) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getDeclarativePartDeclarativePartTipos_dadosCompartment_7009SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		DeclarativePart modelElement = (DeclarativePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getTipos_dados().iterator(); it
				.hasNext();) {
			Data_Type childElement = (Data_Type) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type3EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartIfsCompartment_7027SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getIfs().iterator(); it.hasNext();) {
			If childElement = (If) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == If2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartCasesCompartment_7274SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCases().iterator(); it.hasNext();) {
			Case childElement = (Case) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Case2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartInsertsCompartment_7275SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getInserts().iterator(); it
				.hasNext();) {
			Insert childElement = (Insert) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Insert2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartUpdatesCompartment_7276SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getUpdates().iterator(); it
				.hasNext();) {
			Update childElement = (Update) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Update2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartDeletesCompartment_7277SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getDeletes().iterator(); it
				.hasNext();) {
			Delete childElement = (Delete) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Delete2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartSelectsCompartment_7278SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getSelects().iterator(); it
				.hasNext();) {
			Select childElement = (Select) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Select2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartOutuputsCompartment_7279SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getOutuputs().iterator(); it
				.hasNext();) {
			Output childElement = (Output) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Output2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartCursorsCompartment_7280SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getCursors().iterator(); it
				.hasNext();) {
			Cursor childElement = (Cursor) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Cursor2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartWhilesCompartment_7281SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getWhiles().iterator(); it.hasNext();) {
			While childElement = (While) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == While2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartForsCompartment_7282SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFors().iterator(); it.hasNext();) {
			For childElement = (For) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == For2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExecutablePartExecutablePartLoopsCompartment_7283SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExecutablePart modelElement = (ExecutablePart) containerView
				.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getLoops().iterator(); it.hasNext();) {
			Loop childElement = (Loop) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Loop2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getExceptionPartExceptionPartExcecoesCompartment_7010SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		ExceptionPart modelElement = (ExceptionPart) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getExcecoes().iterator(); it
				.hasNext();) {
			ExceptionCommand childElement = (ExceptionCommand) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ExceptionCommand2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getReturnReturnTipo_retornoCompartment_7028SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Return modelElement = (Return) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		{
			Data_Type childElement = modelElement.getTipo_retorno();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == Data_Type2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParametersParametersParametros_inCompartment_7029SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Parameters modelElement = (Parameters) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in().iterator(); it
				.hasNext();) {
			ParameterIn childElement = (ParameterIn) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterIn2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParametersParametersParametros_in_outCompartment_7284SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Parameters modelElement = (Parameters) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_in_out().iterator(); it
				.hasNext();) {
			ParameterInOut childElement = (ParameterInOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterInOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemNodeDescriptor> getParametersParametersParametros_outCompartment_7285SemanticChildren(
			View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.emptyList();
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.emptyList();
		}
		Parameters modelElement = (Parameters) containerView.getElement();
		LinkedList<FilesystemNodeDescriptor> result = new LinkedList<FilesystemNodeDescriptor>();
		for (Iterator<?> it = modelElement.getParametros_out().iterator(); it
				.hasNext();) {
			ParameterOut childElement = (ParameterOut) it.next();
			int visualID = FilesystemVisualIDRegistry.getNodeVisualID(view,
					childElement);
			if (visualID == ParameterOut2EditPart.VISUAL_ID) {
				result.add(new FilesystemNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getContainedLinks(View view) {
		switch (FilesystemVisualIDRegistry.getVisualID(view)) {
		case FilesystemEditPart.VISUAL_ID:
			return getFilesystem_1000ContainedLinks(view);
		case Data_TypeEditPart.VISUAL_ID:
			return getData_Type_2001ContainedLinks(view);
		case IfEditPart.VISUAL_ID:
			return getIf_2002ContainedLinks(view);
		case CaseEditPart.VISUAL_ID:
			return getCase_2003ContainedLinks(view);
		case InsertEditPart.VISUAL_ID:
			return getInsert_2004ContainedLinks(view);
		case UpdateEditPart.VISUAL_ID:
			return getUpdate_2005ContainedLinks(view);
		case DeleteEditPart.VISUAL_ID:
			return getDelete_2006ContainedLinks(view);
		case SelectEditPart.VISUAL_ID:
			return getSelect_2008ContainedLinks(view);
		case OutputEditPart.VISUAL_ID:
			return getOutput_2007ContainedLinks(view);
		case CursorEditPart.VISUAL_ID:
			return getCursor_2009ContainedLinks(view);
		case WhileEditPart.VISUAL_ID:
			return getWhile_2010ContainedLinks(view);
		case ForEditPart.VISUAL_ID:
			return getFor_2011ContainedLinks(view);
		case LoopEditPart.VISUAL_ID:
			return getLoop_2012ContainedLinks(view);
		case ExceptionCommandEditPart.VISUAL_ID:
			return getExceptionCommand_2013ContainedLinks(view);
		case ParameterInEditPart.VISUAL_ID:
			return getParameterIn_2017ContainedLinks(view);
		case ParameterOutEditPart.VISUAL_ID:
			return getParameterOut_2018ContainedLinks(view);
		case ParameterInOutEditPart.VISUAL_ID:
			return getParameterInOut_2019ContainedLinks(view);
		case DeclarativePartEditPart.VISUAL_ID:
			return getDeclarativePart_2014ContainedLinks(view);
		case ExecutablePartEditPart.VISUAL_ID:
			return getExecutablePart_2015ContainedLinks(view);
		case ExceptionPartEditPart.VISUAL_ID:
			return getExceptionPart_2016ContainedLinks(view);
		case ReturnEditPart.VISUAL_ID:
			return getReturn_2020ContainedLinks(view);
		case ParametersEditPart.VISUAL_ID:
			return getParameters_2021ContainedLinks(view);
		case Data_Type2EditPart.VISUAL_ID:
			return getData_Type_3001ContainedLinks(view);
		case Data_Type3EditPart.VISUAL_ID:
			return getData_Type_3002ContainedLinks(view);
		case If2EditPart.VISUAL_ID:
			return getIf_3004ContainedLinks(view);
		case Case2EditPart.VISUAL_ID:
			return getCase_3006ContainedLinks(view);
		case Insert2EditPart.VISUAL_ID:
			return getInsert_3007ContainedLinks(view);
		case Update2EditPart.VISUAL_ID:
			return getUpdate_3008ContainedLinks(view);
		case Delete2EditPart.VISUAL_ID:
			return getDelete_3009ContainedLinks(view);
		case Select2EditPart.VISUAL_ID:
			return getSelect_3010ContainedLinks(view);
		case Output2EditPart.VISUAL_ID:
			return getOutput_3011ContainedLinks(view);
		case Cursor2EditPart.VISUAL_ID:
			return getCursor_3012ContainedLinks(view);
		case While2EditPart.VISUAL_ID:
			return getWhile_3013ContainedLinks(view);
		case For2EditPart.VISUAL_ID:
			return getFor_3014ContainedLinks(view);
		case Loop2EditPart.VISUAL_ID:
			return getLoop_3015ContainedLinks(view);
		case ExceptionCommand2EditPart.VISUAL_ID:
			return getExceptionCommand_3003ContainedLinks(view);
		case ParameterIn2EditPart.VISUAL_ID:
			return getParameterIn_3005ContainedLinks(view);
		case ParameterInOut2EditPart.VISUAL_ID:
			return getParameterInOut_3016ContainedLinks(view);
		case ParameterOut2EditPart.VISUAL_ID:
			return getParameterOut_3017ContainedLinks(view);
		case SyncEditPart.VISUAL_ID:
			return getSync_4001ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIncomingLinks(View view) {
		switch (FilesystemVisualIDRegistry.getVisualID(view)) {
		case Data_TypeEditPart.VISUAL_ID:
			return getData_Type_2001IncomingLinks(view);
		case IfEditPart.VISUAL_ID:
			return getIf_2002IncomingLinks(view);
		case CaseEditPart.VISUAL_ID:
			return getCase_2003IncomingLinks(view);
		case InsertEditPart.VISUAL_ID:
			return getInsert_2004IncomingLinks(view);
		case UpdateEditPart.VISUAL_ID:
			return getUpdate_2005IncomingLinks(view);
		case DeleteEditPart.VISUAL_ID:
			return getDelete_2006IncomingLinks(view);
		case SelectEditPart.VISUAL_ID:
			return getSelect_2008IncomingLinks(view);
		case OutputEditPart.VISUAL_ID:
			return getOutput_2007IncomingLinks(view);
		case CursorEditPart.VISUAL_ID:
			return getCursor_2009IncomingLinks(view);
		case WhileEditPart.VISUAL_ID:
			return getWhile_2010IncomingLinks(view);
		case ForEditPart.VISUAL_ID:
			return getFor_2011IncomingLinks(view);
		case LoopEditPart.VISUAL_ID:
			return getLoop_2012IncomingLinks(view);
		case ExceptionCommandEditPart.VISUAL_ID:
			return getExceptionCommand_2013IncomingLinks(view);
		case ParameterInEditPart.VISUAL_ID:
			return getParameterIn_2017IncomingLinks(view);
		case ParameterOutEditPart.VISUAL_ID:
			return getParameterOut_2018IncomingLinks(view);
		case ParameterInOutEditPart.VISUAL_ID:
			return getParameterInOut_2019IncomingLinks(view);
		case DeclarativePartEditPart.VISUAL_ID:
			return getDeclarativePart_2014IncomingLinks(view);
		case ExecutablePartEditPart.VISUAL_ID:
			return getExecutablePart_2015IncomingLinks(view);
		case ExceptionPartEditPart.VISUAL_ID:
			return getExceptionPart_2016IncomingLinks(view);
		case ReturnEditPart.VISUAL_ID:
			return getReturn_2020IncomingLinks(view);
		case ParametersEditPart.VISUAL_ID:
			return getParameters_2021IncomingLinks(view);
		case Data_Type2EditPart.VISUAL_ID:
			return getData_Type_3001IncomingLinks(view);
		case Data_Type3EditPart.VISUAL_ID:
			return getData_Type_3002IncomingLinks(view);
		case If2EditPart.VISUAL_ID:
			return getIf_3004IncomingLinks(view);
		case Case2EditPart.VISUAL_ID:
			return getCase_3006IncomingLinks(view);
		case Insert2EditPart.VISUAL_ID:
			return getInsert_3007IncomingLinks(view);
		case Update2EditPart.VISUAL_ID:
			return getUpdate_3008IncomingLinks(view);
		case Delete2EditPart.VISUAL_ID:
			return getDelete_3009IncomingLinks(view);
		case Select2EditPart.VISUAL_ID:
			return getSelect_3010IncomingLinks(view);
		case Output2EditPart.VISUAL_ID:
			return getOutput_3011IncomingLinks(view);
		case Cursor2EditPart.VISUAL_ID:
			return getCursor_3012IncomingLinks(view);
		case While2EditPart.VISUAL_ID:
			return getWhile_3013IncomingLinks(view);
		case For2EditPart.VISUAL_ID:
			return getFor_3014IncomingLinks(view);
		case Loop2EditPart.VISUAL_ID:
			return getLoop_3015IncomingLinks(view);
		case ExceptionCommand2EditPart.VISUAL_ID:
			return getExceptionCommand_3003IncomingLinks(view);
		case ParameterIn2EditPart.VISUAL_ID:
			return getParameterIn_3005IncomingLinks(view);
		case ParameterInOut2EditPart.VISUAL_ID:
			return getParameterInOut_3016IncomingLinks(view);
		case ParameterOut2EditPart.VISUAL_ID:
			return getParameterOut_3017IncomingLinks(view);
		case SyncEditPart.VISUAL_ID:
			return getSync_4001IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutgoingLinks(View view) {
		switch (FilesystemVisualIDRegistry.getVisualID(view)) {
		case Data_TypeEditPart.VISUAL_ID:
			return getData_Type_2001OutgoingLinks(view);
		case IfEditPart.VISUAL_ID:
			return getIf_2002OutgoingLinks(view);
		case CaseEditPart.VISUAL_ID:
			return getCase_2003OutgoingLinks(view);
		case InsertEditPart.VISUAL_ID:
			return getInsert_2004OutgoingLinks(view);
		case UpdateEditPart.VISUAL_ID:
			return getUpdate_2005OutgoingLinks(view);
		case DeleteEditPart.VISUAL_ID:
			return getDelete_2006OutgoingLinks(view);
		case SelectEditPart.VISUAL_ID:
			return getSelect_2008OutgoingLinks(view);
		case OutputEditPart.VISUAL_ID:
			return getOutput_2007OutgoingLinks(view);
		case CursorEditPart.VISUAL_ID:
			return getCursor_2009OutgoingLinks(view);
		case WhileEditPart.VISUAL_ID:
			return getWhile_2010OutgoingLinks(view);
		case ForEditPart.VISUAL_ID:
			return getFor_2011OutgoingLinks(view);
		case LoopEditPart.VISUAL_ID:
			return getLoop_2012OutgoingLinks(view);
		case ExceptionCommandEditPart.VISUAL_ID:
			return getExceptionCommand_2013OutgoingLinks(view);
		case ParameterInEditPart.VISUAL_ID:
			return getParameterIn_2017OutgoingLinks(view);
		case ParameterOutEditPart.VISUAL_ID:
			return getParameterOut_2018OutgoingLinks(view);
		case ParameterInOutEditPart.VISUAL_ID:
			return getParameterInOut_2019OutgoingLinks(view);
		case DeclarativePartEditPart.VISUAL_ID:
			return getDeclarativePart_2014OutgoingLinks(view);
		case ExecutablePartEditPart.VISUAL_ID:
			return getExecutablePart_2015OutgoingLinks(view);
		case ExceptionPartEditPart.VISUAL_ID:
			return getExceptionPart_2016OutgoingLinks(view);
		case ReturnEditPart.VISUAL_ID:
			return getReturn_2020OutgoingLinks(view);
		case ParametersEditPart.VISUAL_ID:
			return getParameters_2021OutgoingLinks(view);
		case Data_Type2EditPart.VISUAL_ID:
			return getData_Type_3001OutgoingLinks(view);
		case Data_Type3EditPart.VISUAL_ID:
			return getData_Type_3002OutgoingLinks(view);
		case If2EditPart.VISUAL_ID:
			return getIf_3004OutgoingLinks(view);
		case Case2EditPart.VISUAL_ID:
			return getCase_3006OutgoingLinks(view);
		case Insert2EditPart.VISUAL_ID:
			return getInsert_3007OutgoingLinks(view);
		case Update2EditPart.VISUAL_ID:
			return getUpdate_3008OutgoingLinks(view);
		case Delete2EditPart.VISUAL_ID:
			return getDelete_3009OutgoingLinks(view);
		case Select2EditPart.VISUAL_ID:
			return getSelect_3010OutgoingLinks(view);
		case Output2EditPart.VISUAL_ID:
			return getOutput_3011OutgoingLinks(view);
		case Cursor2EditPart.VISUAL_ID:
			return getCursor_3012OutgoingLinks(view);
		case While2EditPart.VISUAL_ID:
			return getWhile_3013OutgoingLinks(view);
		case For2EditPart.VISUAL_ID:
			return getFor_3014OutgoingLinks(view);
		case Loop2EditPart.VISUAL_ID:
			return getLoop_3015OutgoingLinks(view);
		case ExceptionCommand2EditPart.VISUAL_ID:
			return getExceptionCommand_3003OutgoingLinks(view);
		case ParameterIn2EditPart.VISUAL_ID:
			return getParameterIn_3005OutgoingLinks(view);
		case ParameterInOut2EditPart.VISUAL_ID:
			return getParameterInOut_3016OutgoingLinks(view);
		case ParameterOut2EditPart.VISUAL_ID:
			return getParameterOut_3017OutgoingLinks(view);
		case SyncEditPart.VISUAL_ID:
			return getSync_4001OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFilesystem_1000ContainedLinks(
			View view) {
		Filesystem modelElement = (Filesystem) view.getElement();
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Sync_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_2001ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_2002ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_2003ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_2004ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_2005ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_2006ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_2007ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_2008ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_2009ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_2010ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_2011ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_2012ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_2013ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_2017ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_2018ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_2019ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDeclarativePart_2014ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExecutablePart_2015ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionPart_2016ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getReturn_2020ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameters_2021ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3001ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3002ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_3004ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_3006ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_3007ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_3008ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_3009ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_3010ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_3011ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_3012ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_3013ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_3014ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_3015ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_3003ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_3005ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_3016ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_3017ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSync_4001ContainedLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_2001IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_2002IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_2003IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_2004IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_2005IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_2006IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_2007IncomingLinks(
			View view) {
		Output modelElement = (Output) view.getElement();
		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
				.find(view.eResource().getResourceSet().getResources());
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Sync_4001(modelElement,
				crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_2008IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_2009IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_2010IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_2011IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_2012IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_2013IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_2017IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_2018IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_2019IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDeclarativePart_2014IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExecutablePart_2015IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionPart_2016IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getReturn_2020IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameters_2021IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3001IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3002IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_3004IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_3006IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_3007IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_3008IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_3009IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_3010IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_3011IncomingLinks(
			View view) {
		Output modelElement = (Output) view.getElement();
		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
				.find(view.eResource().getResourceSet().getResources());
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Sync_4001(modelElement,
				crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_3012IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_3013IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_3014IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_3015IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_3003IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_3005IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_3016IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_3017IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSync_4001IncomingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_2001OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_2002OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_2003OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_2004OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_2005OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_2006OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_2007OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_2008OutgoingLinks(
			View view) {
		Select modelElement = (Select) view.getElement();
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Sync_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_2009OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_2010OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_2011OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_2012OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_2013OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_2017OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_2018OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_2019OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDeclarativePart_2014OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExecutablePart_2015OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionPart_2016OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getReturn_2020OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameters_2021OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3001OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getData_Type_3002OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getIf_3004OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCase_3006OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getInsert_3007OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getUpdate_3008OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getDelete_3009OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSelect_3010OutgoingLinks(
			View view) {
		Select modelElement = (Select) view.getElement();
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Sync_4001(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getOutput_3011OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getCursor_3012OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getWhile_3013OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getFor_3014OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getLoop_3015OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getExceptionCommand_3003OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterIn_3005OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterInOut_3016OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getParameterOut_3017OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<FilesystemLinkDescriptor> getSync_4001OutgoingLinks(
			View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	private static Collection<FilesystemLinkDescriptor> getContainedTypeModelFacetLinks_Sync_4001(
			Filesystem container) {
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		for (Iterator<?> links = container.getSyncs().iterator(); links
				.hasNext();) {
			EObject linkObject = (EObject) links.next();
			if (false == linkObject instanceof Sync) {
				continue;
			}
			Sync link = (Sync) linkObject;
			if (SyncEditPart.VISUAL_ID != FilesystemVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			Output dst = link.getTarget();
			Select src = link.getSource();
			result.add(new FilesystemLinkDescriptor(src, dst, link,
					FilesystemElementTypes.Sync_4001, SyncEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<FilesystemLinkDescriptor> getIncomingTypeModelFacetLinks_Sync_4001(
			Output target,
			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		Collection<EStructuralFeature.Setting> settings = crossReferences
				.get(target);
		for (EStructuralFeature.Setting setting : settings) {
			if (setting.getEStructuralFeature() != FilesystemPackage.eINSTANCE
					.getSync_Target()
					|| false == setting.getEObject() instanceof Sync) {
				continue;
			}
			Sync link = (Sync) setting.getEObject();
			if (SyncEditPart.VISUAL_ID != FilesystemVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			Select src = link.getSource();
			result.add(new FilesystemLinkDescriptor(src, target, link,
					FilesystemElementTypes.Sync_4001, SyncEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection<FilesystemLinkDescriptor> getOutgoingTypeModelFacetLinks_Sync_4001(
			Select source) {
		Filesystem container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element
				.eContainer()) {
			if (element instanceof Filesystem) {
				container = (Filesystem) element;
			}
		}
		if (container == null) {
			return Collections.emptyList();
		}
		LinkedList<FilesystemLinkDescriptor> result = new LinkedList<FilesystemLinkDescriptor>();
		for (Iterator<?> links = container.getSyncs().iterator(); links
				.hasNext();) {
			EObject linkObject = (EObject) links.next();
			if (false == linkObject instanceof Sync) {
				continue;
			}
			Sync link = (Sync) linkObject;
			if (SyncEditPart.VISUAL_ID != FilesystemVisualIDRegistry
					.getLinkWithClassVisualID(link)) {
				continue;
			}
			Output dst = link.getTarget();
			Select src = link.getSource();
			if (src != source) {
				continue;
			}
			result.add(new FilesystemLinkDescriptor(src, dst, link,
					FilesystemElementTypes.Sync_4001, SyncEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		 * @generated
		 */
		@Override
		public List<FilesystemNodeDescriptor> getSemanticChildren(View view) {
			return FilesystemDiagramUpdater.getSemanticChildren(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<FilesystemLinkDescriptor> getContainedLinks(View view) {
			return FilesystemDiagramUpdater.getContainedLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<FilesystemLinkDescriptor> getIncomingLinks(View view) {
			return FilesystemDiagramUpdater.getIncomingLinks(view);
		}

		/**
		 * @generated
		 */
		@Override
		public List<FilesystemLinkDescriptor> getOutgoingLinks(View view) {
			return FilesystemDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
