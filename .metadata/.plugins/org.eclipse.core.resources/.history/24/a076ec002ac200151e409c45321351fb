/**
 */
package crystal;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Crystal</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link crystal.Crystal#getTransitions <em>Transitions</em>}</li>
 *   <li>{@link crystal.Crystal#getParameters <em>Parameters</em>}</li>
 *   <li>{@link crystal.Crystal#getReturn <em>Return</em>}</li>
 *   <li>{@link crystal.Crystal#getDeclarativePart <em>Declarative Part</em>}</li>
 *   <li>{@link crystal.Crystal#getExecutablePart <em>Executable Part</em>}</li>
 *   <li>{@link crystal.Crystal#getProcedures <em>Procedures</em>}</li>
 *   <li>{@link crystal.Crystal#getFunctions <em>Functions</em>}</li>
 *   <li>{@link crystal.Crystal#getBlocks <em>Blocks</em>}</li>
 * </ul>
 * </p>
 *
 * @see crystal.CrystalPackage#getCrystal()
 * @model annotation="gmf.diagram foo='bar' rcp='false' onefile='true' diagram.extension='crystal'"
 * @generated
 */
public interface Crystal extends EObject {
	/**
	 * Returns the value of the '<em><b>Transitions</b></em>' containment reference list.
	 * The list contents are of type {@link crystal.Transition}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Transitions</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Transitions</em>' containment reference list.
	 * @see crystal.CrystalPackage#getCrystal_Transitions()
	 * @model containment="true"
	 * @generated
	 */
	EList<Transition> getTransitions();

	/**
	 * Returns the value of the '<em><b>Parameters</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Parameters</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Parameters</em>' containment reference.
	 * @see #setParameters(Parameters)
	 * @see crystal.CrystalPackage#getCrystal_Parameters()
	 * @model containment="true"
	 * @generated
	 */
	Parameters getParameters();

	/**
	 * Sets the value of the '{@link crystal.Crystal#getParameters <em>Parameters</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Parameters</em>' containment reference.
	 * @see #getParameters()
	 * @generated
	 */
	void setParameters(Parameters value);

	/**
	 * Returns the value of the '<em><b>Return</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Return</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Return</em>' containment reference.
	 * @see #setReturn(Return)
	 * @see crystal.CrystalPackage#getCrystal_Return()
	 * @model containment="true"
	 * @generated
	 */
	Return getReturn();

	/**
	 * Sets the value of the '{@link crystal.Crystal#getReturn <em>Return</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Return</em>' containment reference.
	 * @see #getReturn()
	 * @generated
	 */
	void setReturn(Return value);

	/**
	 * Returns the value of the '<em><b>Declarative Part</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Declarative Part</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Declarative Part</em>' containment reference.
	 * @see #setDeclarativePart(DeclarativePart)
	 * @see crystal.CrystalPackage#getCrystal_DeclarativePart()
	 * @model containment="true"
	 * @generated
	 */
	DeclarativePart getDeclarativePart();

	/**
	 * Sets the value of the '{@link crystal.Crystal#getDeclarativePart <em>Declarative Part</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Declarative Part</em>' containment reference.
	 * @see #getDeclarativePart()
	 * @generated
	 */
	void setDeclarativePart(DeclarativePart value);

	/**
	 * Returns the value of the '<em><b>Executable Part</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Executable Part</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Executable Part</em>' containment reference.
	 * @see #setExecutablePart(ExecutablePart)
	 * @see crystal.CrystalPackage#getCrystal_ExecutablePart()
	 * @model containment="true"
	 * @generated
	 */
	ExecutablePart getExecutablePart();

	/**
	 * Sets the value of the '{@link crystal.Crystal#getExecutablePart <em>Executable Part</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Executable Part</em>' containment reference.
	 * @see #getExecutablePart()
	 * @generated
	 */
	void setExecutablePart(ExecutablePart value);

	/**
	 * Returns the value of the '<em><b>Procedures</b></em>' containment reference list.
	 * The list contents are of type {@link crystal.Procedure}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Procedures</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Procedures</em>' containment reference list.
	 * @see crystal.CrystalPackage#getCrystal_Procedures()
	 * @model containment="true"
	 * @generated
	 */
	EList<Procedure> getProcedures();

	/**
	 * Returns the value of the '<em><b>Functions</b></em>' containment reference list.
	 * The list contents are of type {@link crystal.Function}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Functions</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Functions</em>' containment reference list.
	 * @see crystal.CrystalPackage#getCrystal_Functions()
	 * @model containment="true"
	 * @generated
	 */
	EList<Function> getFunctions();

	/**
	 * Returns the value of the '<em><b>Blocks</b></em>' containment reference list.
	 * The list contents are of type {@link crystal.AnonymousBlock}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Blocks</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Blocks</em>' containment reference list.
	 * @see crystal.CrystalPackage#getCrystal_Blocks()
	 * @model containment="true"
	 * @generated
	 */
	EList<AnonymousBlock> getBlocks();

} // Crystal
