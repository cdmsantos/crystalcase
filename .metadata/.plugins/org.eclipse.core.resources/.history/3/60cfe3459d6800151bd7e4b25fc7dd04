/*
 * 
 */
package filesystem.diagram.navigator;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.navigator.ICommonContentExtensionSite;
import org.eclipse.ui.navigator.ICommonContentProvider;

import filesystem.diagram.edit.parts.*;
import filesystem.diagram.edit.parts.CaseCaseIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.CaseEditPart;
import filesystem.diagram.edit.parts.CursorCursorIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.CursorEditPart;
import filesystem.diagram.edit.parts.Data_Type2EditPart;
import filesystem.diagram.edit.parts.Data_Type3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartment2EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartment3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipo_retornoCompartmentEditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartment2EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartment3EditPart;
import filesystem.diagram.edit.parts.Data_TypeData_TypeTipos_dadosCompartmentEditPart;
import filesystem.diagram.edit.parts.Data_TypeEditPart;
import filesystem.diagram.edit.parts.DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart;
import filesystem.diagram.edit.parts.DeclarativePartEditPart;
import filesystem.diagram.edit.parts.DeleteDeleteIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.DeleteEditPart;
import filesystem.diagram.edit.parts.ExceptionCommand2EditPart;
import filesystem.diagram.edit.parts.ExceptionCommandEditPart;
import filesystem.diagram.edit.parts.ExceptionCommandExceptionCommandExcecoesCompartment2EditPart;
import filesystem.diagram.edit.parts.ExceptionCommandExceptionCommandExcecoesCompartmentEditPart;
import filesystem.diagram.edit.parts.ExceptionPartEditPart;
import filesystem.diagram.edit.parts.ExceptionPartExceptionPartExcecoesCompartmentEditPart;
import filesystem.diagram.edit.parts.ExecutablePartEditPart;
import filesystem.diagram.edit.parts.ExecutablePartExecutablePartIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.FilesystemEditPart;
import filesystem.diagram.edit.parts.ForEditPart;
import filesystem.diagram.edit.parts.ForForIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.If2EditPart;
import filesystem.diagram.edit.parts.IfEditPart;
import filesystem.diagram.edit.parts.IfIfIfsCompartment2EditPart;
import filesystem.diagram.edit.parts.IfIfIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.InsertEditPart;
import filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.LoopEditPart;
import filesystem.diagram.edit.parts.LoopLoopIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.OutputEditPart;
import filesystem.diagram.edit.parts.OutputOutputIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterIn2EditPart;
import filesystem.diagram.edit.parts.ParameterInEditPart;
import filesystem.diagram.edit.parts.ParameterInOutEditPart;
import filesystem.diagram.edit.parts.ParameterInOutParameterInOutParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterInParameterInParametros_inCompartment2EditPart;
import filesystem.diagram.edit.parts.ParameterInParameterInParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParameterOutEditPart;
import filesystem.diagram.edit.parts.ParameterOutParameterOutParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ParametersEditPart;
import filesystem.diagram.edit.parts.ParametersParametersParametros_inCompartmentEditPart;
import filesystem.diagram.edit.parts.ReturnEditPart;
import filesystem.diagram.edit.parts.ReturnReturnTipo_retornoCompartmentEditPart;
import filesystem.diagram.edit.parts.SelectEditPart;
import filesystem.diagram.edit.parts.SelectSelectIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.SyncEditPart;
import filesystem.diagram.edit.parts.UpdateEditPart;
import filesystem.diagram.edit.parts.UpdateUpdateIfsCompartmentEditPart;
import filesystem.diagram.edit.parts.WhileEditPart;
import filesystem.diagram.edit.parts.WhileWhileIfsCompartmentEditPart;
import filesystem.diagram.part.FilesystemVisualIDRegistry;
import filesystem.diagram.part.Messages;

/**
 * @generated
 */
public class FilesystemNavigatorContentProvider implements
		ICommonContentProvider {

	/**
	 * @generated
	 */
	private static final Object[] EMPTY_ARRAY = new Object[0];

	/**
	 * @generated
	 */
	private Viewer myViewer;

	/**
	 * @generated
	 */
	private AdapterFactoryEditingDomain myEditingDomain;

	/**
	 * @generated
	 */
	private WorkspaceSynchronizer myWorkspaceSynchronizer;

	/**
	 * @generated
	 */
	private Runnable myViewerRefreshRunnable;

	/**
	 * @generated
	 */
	@SuppressWarnings({ "unchecked", "serial", "rawtypes" })
	public FilesystemNavigatorContentProvider() {
		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE
				.createEditingDomain();
		myEditingDomain = (AdapterFactoryEditingDomain) editingDomain;
		myEditingDomain.setResourceToReadOnlyMap(new HashMap() {
			public Object get(Object key) {
				if (!containsKey(key)) {
					put(key, Boolean.TRUE);
				}
				return super.get(key);
			}
		});
		myViewerRefreshRunnable = new Runnable() {
			public void run() {
				if (myViewer != null) {
					myViewer.refresh();
				}
			}
		};
		myWorkspaceSynchronizer = new WorkspaceSynchronizer(editingDomain,
				new WorkspaceSynchronizer.Delegate() {
					public void dispose() {
					}

					public boolean handleResourceChanged(final Resource resource) {
						unloadAllResources();
						asyncRefresh();
						return true;
					}

					public boolean handleResourceDeleted(Resource resource) {
						unloadAllResources();
						asyncRefresh();
						return true;
					}

					public boolean handleResourceMoved(Resource resource,
							final URI newURI) {
						unloadAllResources();
						asyncRefresh();
						return true;
					}
				});
	}

	/**
	 * @generated
	 */
	public void dispose() {
		myWorkspaceSynchronizer.dispose();
		myWorkspaceSynchronizer = null;
		myViewerRefreshRunnable = null;
		myViewer = null;
		unloadAllResources();
		((TransactionalEditingDomain) myEditingDomain).dispose();
		myEditingDomain = null;
	}

	/**
	 * @generated
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		myViewer = viewer;
	}

	/**
	 * @generated
	 */
	void unloadAllResources() {
		for (Resource nextResource : myEditingDomain.getResourceSet()
				.getResources()) {
			nextResource.unload();
		}
	}

	/**
	 * @generated
	 */
	void asyncRefresh() {
		if (myViewer != null && !myViewer.getControl().isDisposed()) {
			myViewer.getControl().getDisplay()
					.asyncExec(myViewerRefreshRunnable);
		}
	}

	/**
	 * @generated
	 */
	public Object[] getElements(Object inputElement) {
		return getChildren(inputElement);
	}

	/**
	 * @generated
	 */
	public void restoreState(IMemento aMemento) {
	}

	/**
	 * @generated
	 */
	public void saveState(IMemento aMemento) {
	}

	/**
	 * @generated
	 */
	public void init(ICommonContentExtensionSite aConfig) {
	}

	/**
	 * @generated
	 */
	public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof IFile) {
			IFile file = (IFile) parentElement;
			URI fileURI = URI.createPlatformResourceURI(file.getFullPath()
					.toString(), true);
			Resource resource = myEditingDomain.getResourceSet().getResource(
					fileURI, true);
			ArrayList<FilesystemNavigatorItem> result = new ArrayList<FilesystemNavigatorItem>();
			ArrayList<View> topViews = new ArrayList<View>(resource
					.getContents().size());
			for (EObject o : resource.getContents()) {
				if (o instanceof View) {
					topViews.add((View) o);
				}
			}
			result.addAll(createNavigatorItems(
					selectViewsByType(topViews, FilesystemEditPart.MODEL_ID),
					file, false));
			return result.toArray();
		}

		if (parentElement instanceof FilesystemNavigatorGroup) {
			FilesystemNavigatorGroup group = (FilesystemNavigatorGroup) parentElement;
			return group.getChildren();
		}

		if (parentElement instanceof FilesystemNavigatorItem) {
			FilesystemNavigatorItem navigatorItem = (FilesystemNavigatorItem) parentElement;
			if (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {
				return EMPTY_ARRAY;
			}
			return getViewChildren(navigatorItem.getView(), parentElement);
		}

		/*
		 * Due to plugin.xml restrictions this code will be called only for views representing
		 * shortcuts to this diagram elements created on other diagrams. 
		 */
		if (parentElement instanceof IAdaptable) {
			View view = (View) ((IAdaptable) parentElement)
					.getAdapter(View.class);
			if (view != null) {
				return getViewChildren(view, parentElement);
			}
		}

		return EMPTY_ARRAY;
	}

	/**
	 * @generated
	 */
	private Object[] getViewChildren(View view, Object parentElement) {
		switch (FilesystemVisualIDRegistry.getVisualID(view)) {

		case FilesystemEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			result.addAll(getForeignShortcuts((Diagram) view, parentElement));
			Diagram sv = (Diagram) view;
			FilesystemNavigatorGroup links = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Filesystem_1000_links,
					"icons/linksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(IfEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(CaseEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(WhileEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(ForEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(LoopEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExceptionCommandEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeclarativePartEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExceptionPartEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ReturnEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParametersEditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(SyncEditPart.VISUAL_ID));
			links.addChildren(createNavigatorItems(connectedViews, links, false));
			if (!links.isEmpty()) {
				result.add(links);
			}
			return result.toArray();
		}

		case Data_TypeEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipo_retornoCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipos_dadosCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type3EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case IfEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case CaseEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case InsertEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case UpdateEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case DeleteEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case OutputEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			FilesystemNavigatorGroup incominglinks = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Output_2007_incominglinks,
					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(SyncEditPart.VISUAL_ID));
			incominglinks.addChildren(createNavigatorItems(connectedViews,
					incominglinks, true));
			if (!incominglinks.isEmpty()) {
				result.add(incominglinks);
			}
			return result.toArray();
		}

		case SelectEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			FilesystemNavigatorGroup outgoinglinks = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Select_2008_outgoinglinks,
					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(SyncEditPart.VISUAL_ID));
			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
					outgoinglinks, true));
			if (!outgoinglinks.isEmpty()) {
				result.add(outgoinglinks);
			}
			return result.toArray();
		}

		case CursorEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case WhileEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ForEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case LoopEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ExceptionCommandEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExceptionCommandExceptionCommandExcecoesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ExceptionCommand2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case DeclarativePartEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeclarativePartDeclarativePartTipos_dadosCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type3EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ExecutablePartEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExecutablePartExecutablePartLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ExceptionPartEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExceptionPartExceptionPartExcecoesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ExceptionCommand2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterInEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_inCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_in_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterOutEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_inCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_in_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterInOutEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_inCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_in_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ReturnEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ReturnReturnTipo_retornoCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParametersEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParametersParametersParametros_inCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParametersParametersParametros_in_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParametersParametersParametros_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Data_Type2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipo_retornoCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipos_dadosCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type3EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Data_Type3EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipo_retornoCompartment3EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Data_TypeData_TypeTipos_dadosCompartment3EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Data_Type3EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ExceptionCommand2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ExceptionCommandExceptionCommandExcecoesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ExceptionCommand2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case If2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfIfsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfCasesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfInsertsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfUpdatesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfDeletesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfSelectsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfOutuputsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfCursorsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfWhilesCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfForsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(IfIfLoopsCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterIn2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_inCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_in_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInParameterInParametros_outCompartment2EditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Case2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CaseCaseLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Insert2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(InsertInsertLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Update2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(UpdateUpdateLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Delete2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(DeleteDeleteLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Select2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			FilesystemNavigatorGroup outgoinglinks = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Select_3010_outgoinglinks,
					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectSelectLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(SyncEditPart.VISUAL_ID));
			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
					outgoinglinks, true));
			if (!outgoinglinks.isEmpty()) {
				result.add(outgoinglinks);
			}
			return result.toArray();
		}

		case Output2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			FilesystemNavigatorGroup incominglinks = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Output_3011_incominglinks,
					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputOutputLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry.getType(SyncEditPart.VISUAL_ID));
			incominglinks.addChildren(createNavigatorItems(connectedViews,
					incominglinks, true));
			if (!incominglinks.isEmpty()) {
				result.add(incominglinks);
			}
			return result.toArray();
		}

		case Cursor2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(CursorCursorLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case While2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(WhileWhileLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case For2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ForForLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case Loop2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopIfsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(If2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopCasesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Case2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopInsertsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Insert2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopUpdatesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Update2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopDeletesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Delete2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopSelectsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopOutuputsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopCursorsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(Cursor2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopWhilesCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(While2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopForsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(For2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(LoopLoopLoopsCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry.getType(Loop2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterInOut2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_inCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_in_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterInOutParameterInOutParametros_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case ParameterOut2EditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Node sv = (Node) view;
			Collection<View> connectedViews;
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_inCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterIn2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_in_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterInOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			connectedViews = getChildrenByType(
					Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(ParameterOutParameterOutParametros_outCompartmentEditPart.VISUAL_ID));
			connectedViews = getChildrenByType(connectedViews,
					FilesystemVisualIDRegistry
							.getType(ParameterOut2EditPart.VISUAL_ID));
			result.addAll(createNavigatorItems(connectedViews, parentElement,
					false));
			return result.toArray();
		}

		case SyncEditPart.VISUAL_ID: {
			LinkedList<FilesystemAbstractNavigatorItem> result = new LinkedList<FilesystemAbstractNavigatorItem>();
			Edge sv = (Edge) view;
			FilesystemNavigatorGroup target = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Sync_4001_target,
					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			FilesystemNavigatorGroup source = new FilesystemNavigatorGroup(
					Messages.NavigatorGroupName_Sync_4001_source,
					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
			Collection<View> connectedViews;
			connectedViews = getLinksTargetByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(OutputEditPart.VISUAL_ID));
			target.addChildren(createNavigatorItems(connectedViews, target,
					true));
			connectedViews = getLinksTargetByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Output2EditPart.VISUAL_ID));
			target.addChildren(createNavigatorItems(connectedViews, target,
					true));
			connectedViews = getLinksSourceByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(SelectEditPart.VISUAL_ID));
			source.addChildren(createNavigatorItems(connectedViews, source,
					true));
			connectedViews = getLinksSourceByType(Collections.singleton(sv),
					FilesystemVisualIDRegistry
							.getType(Select2EditPart.VISUAL_ID));
			source.addChildren(createNavigatorItems(connectedViews, source,
					true));
			if (!target.isEmpty()) {
				result.add(target);
			}
			if (!source.isEmpty()) {
				result.add(source);
			}
			return result.toArray();
		}
		}
		return EMPTY_ARRAY;
	}

	/**
	 * @generated
	 */
	private Collection<View> getLinksSourceByType(Collection<Edge> edges,
			String type) {
		LinkedList<View> result = new LinkedList<View>();
		for (Edge nextEdge : edges) {
			View nextEdgeSource = nextEdge.getSource();
			if (type.equals(nextEdgeSource.getType())
					&& isOwnView(nextEdgeSource)) {
				result.add(nextEdgeSource);
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<View> getLinksTargetByType(Collection<Edge> edges,
			String type) {
		LinkedList<View> result = new LinkedList<View>();
		for (Edge nextEdge : edges) {
			View nextEdgeTarget = nextEdge.getTarget();
			if (type.equals(nextEdgeTarget.getType())
					&& isOwnView(nextEdgeTarget)) {
				result.add(nextEdgeTarget);
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<View> getOutgoingLinksByType(
			Collection<? extends View> nodes, String type) {
		LinkedList<View> result = new LinkedList<View>();
		for (View nextNode : nodes) {
			result.addAll(selectViewsByType(nextNode.getSourceEdges(), type));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<View> getIncomingLinksByType(
			Collection<? extends View> nodes, String type) {
		LinkedList<View> result = new LinkedList<View>();
		for (View nextNode : nodes) {
			result.addAll(selectViewsByType(nextNode.getTargetEdges(), type));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<View> getChildrenByType(
			Collection<? extends View> nodes, String type) {
		LinkedList<View> result = new LinkedList<View>();
		for (View nextNode : nodes) {
			result.addAll(selectViewsByType(nextNode.getChildren(), type));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<View> getDiagramLinksByType(
			Collection<Diagram> diagrams, String type) {
		ArrayList<View> result = new ArrayList<View>();
		for (Diagram nextDiagram : diagrams) {
			result.addAll(selectViewsByType(nextDiagram.getEdges(), type));
		}
		return result;
	}

	// TODO refactor as static method
	/**
	 * @generated
	 */
	private Collection<View> selectViewsByType(Collection<View> views,
			String type) {
		ArrayList<View> result = new ArrayList<View>();
		for (View nextView : views) {
			if (type.equals(nextView.getType()) && isOwnView(nextView)) {
				result.add(nextView);
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	private boolean isOwnView(View view) {
		return FilesystemEditPart.MODEL_ID.equals(FilesystemVisualIDRegistry
				.getModelID(view));
	}

	/**
	 * @generated
	 */
	private Collection<FilesystemNavigatorItem> createNavigatorItems(
			Collection<View> views, Object parent, boolean isLeafs) {
		ArrayList<FilesystemNavigatorItem> result = new ArrayList<FilesystemNavigatorItem>(
				views.size());
		for (View nextView : views) {
			result.add(new FilesystemNavigatorItem(nextView, parent, isLeafs));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private Collection<FilesystemNavigatorItem> getForeignShortcuts(
			Diagram diagram, Object parent) {
		LinkedList<View> result = new LinkedList<View>();
		for (Iterator<View> it = diagram.getChildren().iterator(); it.hasNext();) {
			View nextView = it.next();
			if (!isOwnView(nextView)
					&& nextView.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
				result.add(nextView);
			}
		}
		return createNavigatorItems(result, parent, false);
	}

	/**
	 * @generated
	 */
	public Object getParent(Object element) {
		if (element instanceof FilesystemAbstractNavigatorItem) {
			FilesystemAbstractNavigatorItem abstractNavigatorItem = (FilesystemAbstractNavigatorItem) element;
			return abstractNavigatorItem.getParent();
		}
		return null;
	}

	/**
	 * @generated
	 */
	public boolean hasChildren(Object element) {
		return element instanceof IFile || getChildren(element).length > 0;
	}

}
