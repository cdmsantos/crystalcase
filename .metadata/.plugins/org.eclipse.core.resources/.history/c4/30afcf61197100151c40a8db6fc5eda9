@namespace(uri="filesystem", prefix="filesystem")
@gmf

package filesystem;

@gmf.diagram
class Filesystem {
    val Sync[*] syncs;
    val Sections[*] sections;
    val DeclarativePart[1] declarative;
    val ExecutablePart[1] executable;
    val Return[1] return;
    val Parameters[1] parameters;
}

class Sections{
	attr String name;
}

@gmf.node(label="name", figure="rectangle", size="150,200", border.color="255,13,13", border.style="dash") //vermelho	
class Parameters extends Sections{
}

@gmf.node(label="name", figure="rectangle", size="150,200", border.color="25,191,108", border.style="dash") //azul	
class Return extends Sections{
}

@gmf.node(label="name", figure="rectangle", size="150,200", border.color="43,106,215", border.style="dash") //verde
class DeclarativePart extends Sections{
}

@gmf.node(label="name", size="450,450", figure="rectangle", border.color="158,25,191", border.style="dash") //roxo	
class ExecutablePart extends Sections{
}

class Objects{
	attr String name;
}

class Data_Type extends Objects{
}

class ParameterIn extends Parameters{
}

class ParameterOut extends Parameters{
}

class ParameterInOut extends Parameters{
}

class Exception extends ExecutablePart{
}

class If extends ExecutablePart{
}

class Case extends ExecutablePart{
}

class Insert extends ExecutablePart{
}

class Update extends ExecutablePart{
}

class Delete extends ExecutablePart{
}

class Select extends ExecutablePart{
}

class Output extends ExecutablePart{
}

class Cursor extends ExecutablePart{
}

class While extends ExecutablePart{
}

class For extends ExecutablePart{
}

class Loop extends ExecutablePart{
}

@gmf.link(source="source", target="target", style="dot", width="2")
class Sync {
    ref Select source;
    ref Output target;
}