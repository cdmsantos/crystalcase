/*
 * 
 */
package filesystem.diagram.edit.parts;

/**
 * @generated
 */
public class Insert2EditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 3007;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public Insert2EditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
			super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new filesystem.diagram.edit.policies.Insert2ItemSemanticEditPolicy());
							installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.OPEN_ROLE,
		new filesystem.diagram.edit.policies.OpenDiagramEditPolicy());	// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
		}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
					org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
								org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new InsertFigure();
	}

		/**
 * @generated
 */
	public InsertFigure getPrimaryShape() {
		return (InsertFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertNameExecutablePart2EditPart) {
			((filesystem.diagram.edit.parts.InsertNameExecutablePart2EditPart) childEditPart).setLabel(getPrimaryShape().getFigureInsertLabelFigure());
			return true;
		}
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertIfsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertCasesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertCasesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertCasesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertInsertsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertInsertsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertInsertsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertUpdatesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertUpdatesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertUpdatesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertDeletesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertDeletesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertDeletesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertSelectsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertSelectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertSelectsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertOutuputsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertOutuputsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertOutuputsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertCursorsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertCursorsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertCursorsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertWhilesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertWhilesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertWhilesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertForsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertForsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertForsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertLoopsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertLoopsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((filesystem.diagram.edit.parts.InsertInsertLoopsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertNameExecutablePart2EditPart) {
			return true;
		}
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertIfsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertCasesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertCasesCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertCasesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertInsertsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertInsertsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertInsertsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertUpdatesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertUpdatesCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertUpdatesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertDeletesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertDeletesCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertDeletesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertSelectsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertSelectsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertSelectsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertOutuputsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertOutuputsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertOutuputsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertCursorsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertCursorsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertCursorsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertWhilesCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertWhilesCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertWhilesCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertForsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertForsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertForsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof filesystem.diagram.edit.parts.InsertInsertLoopsCompartmentEditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getInsertLoopsCompartmentFigure();
			pane.remove(((filesystem.diagram.edit.parts.InsertInsertLoopsCompartmentEditPart) childEditPart).getFigure());
			return true;
		}	
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertIfsCompartmentEditPart) {
			return getPrimaryShape().getInsertIfsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertCasesCompartmentEditPart) {
			return getPrimaryShape().getInsertCasesCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertInsertsCompartmentEditPart) {
			return getPrimaryShape().getInsertInsertsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertUpdatesCompartmentEditPart) {
			return getPrimaryShape().getInsertUpdatesCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertDeletesCompartmentEditPart) {
			return getPrimaryShape().getInsertDeletesCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertSelectsCompartmentEditPart) {
			return getPrimaryShape().getInsertSelectsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertOutuputsCompartmentEditPart) {
			return getPrimaryShape().getInsertOutuputsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertCursorsCompartmentEditPart) {
			return getPrimaryShape().getInsertCursorsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertWhilesCompartmentEditPart) {
			return getPrimaryShape().getInsertWhilesCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertForsCompartmentEditPart) {
			return getPrimaryShape().getInsertForsCompartmentFigure();
		}	
		if (editPart instanceof filesystem.diagram.edit.parts.InsertInsertLoopsCompartmentEditPart) {
			return getPrimaryShape().getInsertLoopsCompartmentFigure();
		}	
		return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(filesystem.diagram.part.FilesystemVisualIDRegistry.getType(filesystem.diagram.edit.parts.InsertNameExecutablePart2EditPart.VISUAL_ID));
		}
	

	
	
	
/**
 * @generated
 */
public class InsertFigure extends org.eclipse.draw2d.RoundedRectangle {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureInsertLabelFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertIfsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertCasesCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertInsertsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertUpdatesCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertDeletesCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertSelectsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertOutuputsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertCursorsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertWhilesCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertForsCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fInsertLoopsCompartmentFigure; 




	/**
	 * @generated
	 */
	public InsertFigure() {
				this.setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(8)
, getMapMode().DPtoLP(8)
));
this.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
));
		createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureInsertLabelFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();

fFigureInsertLabelFigure.setText("Insert");
fFigureInsertLabelFigure.setMaximumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(10000)
, getMapMode().DPtoLP(50)
));

this.add(fFigureInsertLabelFigure);



fInsertIfsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertIfsCompartmentFigure.setOutline(false);

this.add(fInsertIfsCompartmentFigure);



fInsertCasesCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertCasesCompartmentFigure.setOutline(false);

this.add(fInsertCasesCompartmentFigure);



fInsertInsertsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertInsertsCompartmentFigure.setOutline(false);

this.add(fInsertInsertsCompartmentFigure);



fInsertUpdatesCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertUpdatesCompartmentFigure.setOutline(false);

this.add(fInsertUpdatesCompartmentFigure);



fInsertDeletesCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertDeletesCompartmentFigure.setOutline(false);

this.add(fInsertDeletesCompartmentFigure);



fInsertSelectsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertSelectsCompartmentFigure.setOutline(false);

this.add(fInsertSelectsCompartmentFigure);



fInsertOutuputsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertOutuputsCompartmentFigure.setOutline(false);

this.add(fInsertOutuputsCompartmentFigure);



fInsertCursorsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertCursorsCompartmentFigure.setOutline(false);

this.add(fInsertCursorsCompartmentFigure);



fInsertWhilesCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertWhilesCompartmentFigure.setOutline(false);

this.add(fInsertWhilesCompartmentFigure);



fInsertForsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertForsCompartmentFigure.setOutline(false);

this.add(fInsertForsCompartmentFigure);



fInsertLoopsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();

fInsertLoopsCompartmentFigure.setOutline(false);

this.add(fInsertLoopsCompartmentFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureInsertLabelFigure() {
		return fFigureInsertLabelFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertIfsCompartmentFigure() {
		return fInsertIfsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertCasesCompartmentFigure() {
		return fInsertCasesCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertInsertsCompartmentFigure() {
		return fInsertInsertsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertUpdatesCompartmentFigure() {
		return fInsertUpdatesCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertDeletesCompartmentFigure() {
		return fInsertDeletesCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertSelectsCompartmentFigure() {
		return fInsertSelectsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertOutuputsCompartmentFigure() {
		return fInsertOutuputsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertCursorsCompartmentFigure() {
		return fInsertCursorsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertWhilesCompartmentFigure() {
		return fInsertWhilesCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertForsCompartmentFigure() {
		return fInsertForsCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getInsertLoopsCompartmentFigure() {
		return fInsertLoopsCompartmentFigure;
	}


}


	
	}
