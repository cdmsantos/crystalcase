	/*
 * 
 */
package master.diagram.part;

	/**
 * @generated
 */
public class MasterDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getMaster_1000SemanticChildren(view);
case master.diagram.edit.parts.ParametersParametersVariablesCompartmentEditPart.VISUAL_ID:
	return getParametersParametersVariablesCompartment_7001SemanticChildren(view);
case master.diagram.edit.parts.ReturnReturnVariablesCompartmentEditPart.VISUAL_ID:
	return getReturnReturnVariablesCompartment_7002SemanticChildren(view);
case master.diagram.edit.parts.DeclarativePartDeclarativePartVariablesCompartmentEditPart.VISUAL_ID:
	return getDeclarativePartDeclarativePartVariablesCompartment_7003SemanticChildren(view);
case master.diagram.edit.parts.ExecutablePartExecutablePartObjectsCompartmentEditPart.VISUAL_ID:
	return getExecutablePartExecutablePartObjectsCompartment_7004SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getMaster_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.master modelElement = (master.master) view.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						{ master.Parameters childElement = modelElement.getParameters();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ParametersEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.Return childElement = modelElement.getReturn();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ReturnEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.DeclarativePart childElement = modelElement.getDeclarativePart();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
						{ master.ExecutablePart childElement = modelElement.getExecutablePart();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getParametersParametersVariablesCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Parameters modelElement = (master.Parameters) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.RecordsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CursorEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getReturnReturnVariablesCompartment_7002SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.Return modelElement = (master.Return) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataType2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Collections2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Records2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getDeclarativePartDeclarativePartVariablesCompartment_7003SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.DeclarativePart modelElement = (master.DeclarativePart) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getVariables().iterator(); it.hasNext();) {
		master.Variables childElement = (master.Variables) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.DataType3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Collections3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Records3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterNodeDescriptor> getExecutablePartExecutablePartObjectsCompartment_7004SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
master.ExecutablePart modelElement = (master.ExecutablePart) containerView.getElement();
	java.util.LinkedList<master.diagram.part.MasterNodeDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getObjects().iterator(); it.hasNext();) {
		master.Objects childElement = (master.Objects) it.next();
					int visualID = master.diagram.part.MasterVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.IfEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CaseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.InsertEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.UpdateEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.DeleteEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.SelectEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.WhileEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.ForEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.LoopEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.OpenEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.FetchEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == master.diagram.edit.parts.CloseEditPart.VISUAL_ID) {
	result.add(new master.diagram.part.MasterNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.MasterEditPart.VISUAL_ID:
	return getMaster_1000ContainedLinks(view);
case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001ContainedLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002ContainedLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003ContainedLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004ContainedLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001ContainedLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002ContainedLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003ContainedLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004ContainedLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005ContainedLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006ContainedLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007ContainedLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008ContainedLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009ContainedLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010ContainedLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011ContainedLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012ContainedLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013ContainedLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014ContainedLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015ContainedLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3016ContainedLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3017ContainedLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3018ContainedLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3019ContainedLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3020ContainedLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3021ContainedLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3022ContainedLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3023ContainedLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3024ContainedLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3025ContainedLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3026ContainedLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001IncomingLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002IncomingLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003IncomingLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004IncomingLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001IncomingLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002IncomingLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003IncomingLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004IncomingLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005IncomingLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006IncomingLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007IncomingLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008IncomingLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009IncomingLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010IncomingLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011IncomingLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012IncomingLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013IncomingLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014IncomingLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015IncomingLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3016IncomingLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3017IncomingLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3018IncomingLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3019IncomingLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3020IncomingLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3021IncomingLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3022IncomingLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3023IncomingLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3024IncomingLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3025IncomingLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3026IncomingLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (master.diagram.part.MasterVisualIDRegistry.getVisualID(view)) {
		case master.diagram.edit.parts.ParametersEditPart.VISUAL_ID:
	return getParameters_2001OutgoingLinks(view);
case master.diagram.edit.parts.ReturnEditPart.VISUAL_ID:
	return getReturn_2002OutgoingLinks(view);
case master.diagram.edit.parts.DeclarativePartEditPart.VISUAL_ID:
	return getDeclarativePart_2003OutgoingLinks(view);
case master.diagram.edit.parts.ExecutablePartEditPart.VISUAL_ID:
	return getExecutablePart_2004OutgoingLinks(view);
case master.diagram.edit.parts.DataTypeEditPart.VISUAL_ID:
	return getDataType_3001OutgoingLinks(view);
case master.diagram.edit.parts.CollectionsEditPart.VISUAL_ID:
	return getCollections_3002OutgoingLinks(view);
case master.diagram.edit.parts.RecordsEditPart.VISUAL_ID:
	return getRecords_3003OutgoingLinks(view);
case master.diagram.edit.parts.CursorEditPart.VISUAL_ID:
	return getCursor_3004OutgoingLinks(view);
case master.diagram.edit.parts.DataType2EditPart.VISUAL_ID:
	return getDataType_3005OutgoingLinks(view);
case master.diagram.edit.parts.Collections2EditPart.VISUAL_ID:
	return getCollections_3006OutgoingLinks(view);
case master.diagram.edit.parts.Records2EditPart.VISUAL_ID:
	return getRecords_3007OutgoingLinks(view);
case master.diagram.edit.parts.Cursor2EditPart.VISUAL_ID:
	return getCursor_3008OutgoingLinks(view);
case master.diagram.edit.parts.DataType3EditPart.VISUAL_ID:
	return getDataType_3009OutgoingLinks(view);
case master.diagram.edit.parts.Collections3EditPart.VISUAL_ID:
	return getCollections_3010OutgoingLinks(view);
case master.diagram.edit.parts.Records3EditPart.VISUAL_ID:
	return getRecords_3011OutgoingLinks(view);
case master.diagram.edit.parts.Cursor3EditPart.VISUAL_ID:
	return getCursor_3012OutgoingLinks(view);
case master.diagram.edit.parts.ExpressionsEditPart.VISUAL_ID:
	return getExpressions_3013OutgoingLinks(view);
case master.diagram.edit.parts.ExceptionEditPart.VISUAL_ID:
	return getException_3014OutgoingLinks(view);
case master.diagram.edit.parts.IfEditPart.VISUAL_ID:
	return getIf_3015OutgoingLinks(view);
case master.diagram.edit.parts.CaseEditPart.VISUAL_ID:
	return getCase_3016OutgoingLinks(view);
case master.diagram.edit.parts.InsertEditPart.VISUAL_ID:
	return getInsert_3017OutgoingLinks(view);
case master.diagram.edit.parts.UpdateEditPart.VISUAL_ID:
	return getUpdate_3018OutgoingLinks(view);
case master.diagram.edit.parts.DeleteEditPart.VISUAL_ID:
	return getDelete_3019OutgoingLinks(view);
case master.diagram.edit.parts.SelectEditPart.VISUAL_ID:
	return getSelect_3020OutgoingLinks(view);
case master.diagram.edit.parts.WhileEditPart.VISUAL_ID:
	return getWhile_3021OutgoingLinks(view);
case master.diagram.edit.parts.ForEditPart.VISUAL_ID:
	return getFor_3022OutgoingLinks(view);
case master.diagram.edit.parts.LoopEditPart.VISUAL_ID:
	return getLoop_3023OutgoingLinks(view);
case master.diagram.edit.parts.OpenEditPart.VISUAL_ID:
	return getOpen_3024OutgoingLinks(view);
case master.diagram.edit.parts.FetchEditPart.VISUAL_ID:
	return getFetch_3025OutgoingLinks(view);
case master.diagram.edit.parts.CloseEditPart.VISUAL_ID:
	return getClose_3026OutgoingLinks(view);
case master.diagram.edit.parts.TransitionEditPart.VISUAL_ID:
	return getTransition_4001OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getMaster_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.master modelElement = (master.master) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3016ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3017ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3018ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3019ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3020ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3021ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3022ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3023ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3024ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3025ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3026ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3016IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3017IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3018IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3019IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3020IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3021IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3022IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3023IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3024IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3025IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3026IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Transition_4001(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getParameters_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getReturn_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDeclarativePart_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExecutablePart_2004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3006OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3007OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3008OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDataType_3009OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCollections_3010OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getRecords_3011OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCursor_3012OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getExpressions_3013OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Expressions modelElement = (master.Expressions) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getException_3014OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Exception modelElement = (master.Exception) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getIf_3015OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.If modelElement = (master.If) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getCase_3016OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Case modelElement = (master.Case) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getInsert_3017OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Insert modelElement = (master.Insert) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getUpdate_3018OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Update modelElement = (master.Update) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getDelete_3019OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Delete modelElement = (master.Delete) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getSelect_3020OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Select modelElement = (master.Select) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getWhile_3021OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.While modelElement = (master.While) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFor_3022OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.For modelElement = (master.For) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getLoop_3023OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Loop modelElement = (master.Loop) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getOpen_3024OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Open modelElement = (master.Open) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getFetch_3025OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Fetch modelElement = (master.Fetch) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getClose_3026OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	master.Close modelElement = (master.Close) view.getElement();
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Transition_4001(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<master.diagram.part.MasterLinkDescriptor> getTransition_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getContainedTypeModelFacetLinks_Transition_4001(master.master container) {
	java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getTransitions().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof master.Transition) {
		continue;
	}
	master.Transition link = (master.Transition) linkObject;
		if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			master.Objects dst = link.getEnd();
							master.Objects src = link.getStart();
							result.add(new master.diagram.part.MasterLinkDescriptor(src, dst, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getIncomingTypeModelFacetLinks_Transition_4001(master.Objects target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != master.MasterPackage.eINSTANCE.getTransition_End() || false == setting.getEObject() instanceof master.Transition) {
	continue;
}
master.Transition link = (master.Transition) setting.getEObject();
	if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				master.Objects src = link.getStart();
			result.add(new master.diagram.part.MasterLinkDescriptor(src, target, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}
				
		/**
 * @generated
 */
private static java.util.Collection<master.diagram.part.MasterLinkDescriptor> getOutgoingTypeModelFacetLinks_Transition_4001(master.Objects source) {
	master.master container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof master.master) {
			container = (master.master) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<master.diagram.part.MasterLinkDescriptor> result = new java.util.LinkedList<master.diagram.part.MasterLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getTransitions().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof master.Transition) {
		continue;
	}
	master.Transition link = (master.Transition) linkObject;
		if (master.diagram.edit.parts.TransitionEditPart.VISUAL_ID != master.diagram.part.MasterVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			master.Objects dst = link.getEnd();
							master.Objects src = link.getStart();
								if (src != source) {
	continue;
}
						result.add(new master.diagram.part.MasterLinkDescriptor(src, dst, link, master.diagram.providers.MasterElementTypes.Transition_4001, master.diagram.edit.parts.TransitionEditPart.VISUAL_ID));
		}
	return result;	
}		
		
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<master.diagram.part.MasterLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return MasterDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
