/*
 * 
 */
package filesystem.diagram.providers;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;
import org.eclipse.gmf.runtime.notation.View;

import filesystem.FilesystemPackage;
import filesystem.diagram.edit.parts.CaseNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.CursorNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.Data_TypeNameReturnEditPart;
import filesystem.diagram.edit.parts.DeclarativePartNameDeclarativePartEditPart;
import filesystem.diagram.edit.parts.DeleteNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.ExceptionCommandNameExceptionPartEditPart;
import filesystem.diagram.edit.parts.ExceptionPartNameExceptionPartEditPart;
import filesystem.diagram.edit.parts.ExecutablePartNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.ForNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.IfNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.InsertNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.LoopNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.OutputNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.ParameterInNameParametersEditPart;
import filesystem.diagram.edit.parts.ParameterInOutNameParametersEditPart;
import filesystem.diagram.edit.parts.ParameterOutNameParametersEditPart;
import filesystem.diagram.edit.parts.ParametersNameParametersEditPart;
import filesystem.diagram.edit.parts.ReturnNameReturnEditPart;
import filesystem.diagram.edit.parts.SelectNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.UpdateNameExecutablePartEditPart;
import filesystem.diagram.edit.parts.WhileNameExecutablePartEditPart;
import filesystem.diagram.parsers.MessageFormatParser;
import filesystem.diagram.part.FilesystemVisualIDRegistry;

/**
 * @generated
 */
public class FilesystemParserProvider extends AbstractProvider implements
		IParserProvider {

	/**
	 * @generated
	 */
	private IParser data_TypeNameReturn_5001Parser;

	/**
	 * @generated
	 */
	private IParser getData_TypeNameReturn_5001Parser() {
		if (data_TypeNameReturn_5001Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getReturn_NameReturn() };
			MessageFormatParser parser = new MessageFormatParser(features);
			data_TypeNameReturn_5001Parser = parser;
		}
		return data_TypeNameReturn_5001Parser;
	}

	/**
	 * @generated
	 */
	private IParser ifNameExecutablePart_5002Parser;

	/**
	 * @generated
	 */
	private IParser getIfNameExecutablePart_5002Parser() {
		if (ifNameExecutablePart_5002Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			ifNameExecutablePart_5002Parser = parser;
		}
		return ifNameExecutablePart_5002Parser;
	}

	/**
	 * @generated
	 */
	private IParser caseNameExecutablePart_5003Parser;

	/**
	 * @generated
	 */
	private IParser getCaseNameExecutablePart_5003Parser() {
		if (caseNameExecutablePart_5003Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			caseNameExecutablePart_5003Parser = parser;
		}
		return caseNameExecutablePart_5003Parser;
	}

	/**
	 * @generated
	 */
	private IParser insertNameExecutablePart_5004Parser;

	/**
	 * @generated
	 */
	private IParser getInsertNameExecutablePart_5004Parser() {
		if (insertNameExecutablePart_5004Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			insertNameExecutablePart_5004Parser = parser;
		}
		return insertNameExecutablePart_5004Parser;
	}

	/**
	 * @generated
	 */
	private IParser updateNameExecutablePart_5005Parser;

	/**
	 * @generated
	 */
	private IParser getUpdateNameExecutablePart_5005Parser() {
		if (updateNameExecutablePart_5005Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			updateNameExecutablePart_5005Parser = parser;
		}
		return updateNameExecutablePart_5005Parser;
	}

	/**
	 * @generated
	 */
	private IParser deleteNameExecutablePart_5006Parser;

	/**
	 * @generated
	 */
	private IParser getDeleteNameExecutablePart_5006Parser() {
		if (deleteNameExecutablePart_5006Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			deleteNameExecutablePart_5006Parser = parser;
		}
		return deleteNameExecutablePart_5006Parser;
	}

	/**
	 * @generated
	 */
	private IParser outputNameExecutablePart_5007Parser;

	/**
	 * @generated
	 */
	private IParser getOutputNameExecutablePart_5007Parser() {
		if (outputNameExecutablePart_5007Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			outputNameExecutablePart_5007Parser = parser;
		}
		return outputNameExecutablePart_5007Parser;
	}

	/**
	 * @generated
	 */
	private IParser selectNameExecutablePart_5008Parser;

	/**
	 * @generated
	 */
	private IParser getSelectNameExecutablePart_5008Parser() {
		if (selectNameExecutablePart_5008Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			selectNameExecutablePart_5008Parser = parser;
		}
		return selectNameExecutablePart_5008Parser;
	}

	/**
	 * @generated
	 */
	private IParser cursorNameExecutablePart_5009Parser;

	/**
	 * @generated
	 */
	private IParser getCursorNameExecutablePart_5009Parser() {
		if (cursorNameExecutablePart_5009Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			cursorNameExecutablePart_5009Parser = parser;
		}
		return cursorNameExecutablePart_5009Parser;
	}

	/**
	 * @generated
	 */
	private IParser whileNameExecutablePart_5010Parser;

	/**
	 * @generated
	 */
	private IParser getWhileNameExecutablePart_5010Parser() {
		if (whileNameExecutablePart_5010Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			whileNameExecutablePart_5010Parser = parser;
		}
		return whileNameExecutablePart_5010Parser;
	}

	/**
	 * @generated
	 */
	private IParser forNameExecutablePart_5011Parser;

	/**
	 * @generated
	 */
	private IParser getForNameExecutablePart_5011Parser() {
		if (forNameExecutablePart_5011Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			forNameExecutablePart_5011Parser = parser;
		}
		return forNameExecutablePart_5011Parser;
	}

	/**
	 * @generated
	 */
	private IParser loopNameExecutablePart_5012Parser;

	/**
	 * @generated
	 */
	private IParser getLoopNameExecutablePart_5012Parser() {
		if (loopNameExecutablePart_5012Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			loopNameExecutablePart_5012Parser = parser;
		}
		return loopNameExecutablePart_5012Parser;
	}

	/**
	 * @generated
	 */
	private IParser exceptionCommandNameExceptionPart_5013Parser;

	/**
	 * @generated
	 */
	private IParser getExceptionCommandNameExceptionPart_5013Parser() {
		if (exceptionCommandNameExceptionPart_5013Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExceptionPart_NameExceptionPart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			exceptionCommandNameExceptionPart_5013Parser = parser;
		}
		return exceptionCommandNameExceptionPart_5013Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterInNameParameters_5014Parser;

	/**
	 * @generated
	 */
	private IParser getParameterInNameParameters_5014Parser() {
		if (parameterInNameParameters_5014Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_NameParameters() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterInNameParameters_5014Parser = parser;
		}
		return parameterInNameParameters_5014Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterOutNameParameters_5015Parser;

	/**
	 * @generated
	 */
	private IParser getParameterOutNameParameters_5015Parser() {
		if (parameterOutNameParameters_5015Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_NameParameters() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterOutNameParameters_5015Parser = parser;
		}
		return parameterOutNameParameters_5015Parser;
	}

	/**
	 * @generated
	 */
	private IParser parameterInOutNameParameters_5016Parser;

	/**
	 * @generated
	 */
	private IParser getParameterInOutNameParameters_5016Parser() {
		if (parameterInOutNameParameters_5016Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_NameParameters() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parameterInOutNameParameters_5016Parser = parser;
		}
		return parameterInOutNameParameters_5016Parser;
	}

	/**
	 * @generated
	 */
	private IParser declarativePartNameDeclarativePart_5017Parser;

	/**
	 * @generated
	 */
	private IParser getDeclarativePartNameDeclarativePart_5017Parser() {
		if (declarativePartNameDeclarativePart_5017Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getDeclarativePart_NameDeclarativePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			declarativePartNameDeclarativePart_5017Parser = parser;
		}
		return declarativePartNameDeclarativePart_5017Parser;
	}

	/**
	 * @generated
	 */
	private IParser executablePartNameExecutablePart_5018Parser;

	/**
	 * @generated
	 */
	private IParser getExecutablePartNameExecutablePart_5018Parser() {
		if (executablePartNameExecutablePart_5018Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExecutablePart_NameExecutablePart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			executablePartNameExecutablePart_5018Parser = parser;
		}
		return executablePartNameExecutablePart_5018Parser;
	}

	/**
	 * @generated
	 */
	private IParser exceptionPartNameExceptionPart_5019Parser;

	/**
	 * @generated
	 */
	private IParser getExceptionPartNameExceptionPart_5019Parser() {
		if (exceptionPartNameExceptionPart_5019Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getExceptionPart_NameExceptionPart() };
			MessageFormatParser parser = new MessageFormatParser(features);
			exceptionPartNameExceptionPart_5019Parser = parser;
		}
		return exceptionPartNameExceptionPart_5019Parser;
	}

	/**
	 * @generated
	 */
	private IParser parametersNameParameters_5020Parser;

	/**
	 * @generated
	 */
	private IParser getParametersNameParameters_5020Parser() {
		if (parametersNameParameters_5020Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getParameters_NameParameters() };
			MessageFormatParser parser = new MessageFormatParser(features);
			parametersNameParameters_5020Parser = parser;
		}
		return parametersNameParameters_5020Parser;
	}

	/**
	 * @generated
	 */
	private IParser returnNameReturn_5021Parser;

	/**
	 * @generated
	 */
	private IParser getReturnNameReturn_5021Parser() {
		if (returnNameReturn_5021Parser == null) {
			EAttribute[] features = new EAttribute[] { FilesystemPackage.eINSTANCE
					.getReturn_NameReturn() };
			MessageFormatParser parser = new MessageFormatParser(features);
			returnNameReturn_5021Parser = parser;
		}
		return returnNameReturn_5021Parser;
	}

	/**
	 * @generated
	 */
	protected IParser getParser(int visualID) {
		switch (visualID) {
		case Data_TypeNameReturnEditPart.VISUAL_ID:
			return getData_TypeNameReturn_5001Parser();
		case IfNameExecutablePartEditPart.VISUAL_ID:
			return getIfNameExecutablePart_5002Parser();
		case CaseNameExecutablePartEditPart.VISUAL_ID:
			return getCaseNameExecutablePart_5003Parser();
		case InsertNameExecutablePartEditPart.VISUAL_ID:
			return getInsertNameExecutablePart_5004Parser();
		case UpdateNameExecutablePartEditPart.VISUAL_ID:
			return getUpdateNameExecutablePart_5005Parser();
		case DeleteNameExecutablePartEditPart.VISUAL_ID:
			return getDeleteNameExecutablePart_5006Parser();
		case OutputNameExecutablePartEditPart.VISUAL_ID:
			return getOutputNameExecutablePart_5007Parser();
		case SelectNameExecutablePartEditPart.VISUAL_ID:
			return getSelectNameExecutablePart_5008Parser();
		case CursorNameExecutablePartEditPart.VISUAL_ID:
			return getCursorNameExecutablePart_5009Parser();
		case WhileNameExecutablePartEditPart.VISUAL_ID:
			return getWhileNameExecutablePart_5010Parser();
		case ForNameExecutablePartEditPart.VISUAL_ID:
			return getForNameExecutablePart_5011Parser();
		case LoopNameExecutablePartEditPart.VISUAL_ID:
			return getLoopNameExecutablePart_5012Parser();
		case ExceptionCommandNameExceptionPartEditPart.VISUAL_ID:
			return getExceptionCommandNameExceptionPart_5013Parser();
		case ParameterInNameParametersEditPart.VISUAL_ID:
			return getParameterInNameParameters_5014Parser();
		case ParameterOutNameParametersEditPart.VISUAL_ID:
			return getParameterOutNameParameters_5015Parser();
		case ParameterInOutNameParametersEditPart.VISUAL_ID:
			return getParameterInOutNameParameters_5016Parser();
		case DeclarativePartNameDeclarativePartEditPart.VISUAL_ID:
			return getDeclarativePartNameDeclarativePart_5017Parser();
		case ExecutablePartNameExecutablePartEditPart.VISUAL_ID:
			return getExecutablePartNameExecutablePart_5018Parser();
		case ExceptionPartNameExceptionPartEditPart.VISUAL_ID:
			return getExceptionPartNameExceptionPart_5019Parser();
		case ParametersNameParametersEditPart.VISUAL_ID:
			return getParametersNameParameters_5020Parser();
		case ReturnNameReturnEditPart.VISUAL_ID:
			return getReturnNameReturn_5021Parser();
		}
		return null;
	}

	/**
	 * Utility method that consults ParserService
	 * @generated
	 */
	public static IParser getParser(IElementType type, EObject object,
			String parserHint) {
		return ParserService.getInstance().getParser(
				new HintAdapter(type, object, parserHint));
	}

	/**
	 * @generated
	 */
	public IParser getParser(IAdaptable hint) {
		String vid = (String) hint.getAdapter(String.class);
		if (vid != null) {
			return getParser(FilesystemVisualIDRegistry.getVisualID(vid));
		}
		View view = (View) hint.getAdapter(View.class);
		if (view != null) {
			return getParser(FilesystemVisualIDRegistry.getVisualID(view));
		}
		return null;
	}

	/**
	 * @generated
	 */
	public boolean provides(IOperation operation) {
		if (operation instanceof GetParserOperation) {
			IAdaptable hint = ((GetParserOperation) operation).getHint();
			if (FilesystemElementTypes.getElement(hint) == null) {
				return false;
			}
			return getParser(hint) != null;
		}
		return false;
	}

	/**
	 * @generated
	 */
	private static class HintAdapter extends ParserHintAdapter {

		/**
		 * @generated
		 */
		private final IElementType elementType;

		/**
		 * @generated
		 */
		public HintAdapter(IElementType type, EObject object, String parserHint) {
			super(object, parserHint);
			assert type != null;
			elementType = type;
		}

		/**
		 * @generated
		 */
		public Object getAdapter(Class adapter) {
			if (IElementType.class.equals(adapter)) {
				return elementType;
			}
			return super.getAdapter(adapter);
		}
	}

}
