@namespace(uri="crystal", prefix="crystal")
package crystal;

@gmf.diagram(foo="bar", rcp="false", onefile="true", diagram.extension="crystal")
class Crystal {
  val Links[*] links;
  val Subprograms[*] subprograms;
}

@gmf.node(figure="rectangle", border.width="1", label.readOnly="true")
abstract class Subprograms {
  @gmf.compartment
  val DataAbstractions[*] declarativePart;

  @gmf.compartment
  val Statements[*] executablePart;
}

@gmf.node(figure="rectangle", border.width="1", label.readOnly="true")
abstract class NamedBlocks extends Subprograms {
  attr String name;
  
  @gmf.compartment
  val DataAbstractions[*] parameters;
}

@gmf.node(label="name", label.text="Procedure", border.color="255,13,13")
class Procedure extends NamedBlocks {
}

@gmf.node(label="name", label.text="Function", border.color="25,191,108")
class Function extends NamedBlocks {

  @gmf.compartment
  val DataAbstractions[1] returnPart;
}

@gmf.node(label="description", label.text="Anonymous Block", border.color="43,106,215", border.style="dash")
class AnonymousBlock extends Subprograms {
  attr String description;
}

@gmf.node(label="name", figure="rectangle", border.width="1", label.icon="true", label.readOnly="true", label.placement="internal")
abstract class DataAbstractions {
  attr String name;
  attr ParameterType type;
}

@gmf.node(label.text="Data Type")
class DataType extends DataAbstractions {
  attr String className;
  attr DataTypeOptions options;
  attr int precision;
  attr int scale;
}

@gmf.node(label.text="Collection")
class Collections extends DataAbstractions {
  attr String className;
  attr String code;
  attr String typeName;
}

@gmf.node(label.text="Record")
class Records extends DataAbstractions {
  attr String className;
  attr String code;
  attr String typeName;
}

@gmf.node(label.text="Cursor")
class Cursor extends DataAbstractions {
  attr String className;
  attr String cursorQuery;
}

@gmf.node(label="description", label.icon="true", label.placement="internal")
abstract class Statements {
  attr String description;
  attr boolean isStart;
}

@gmf.node(figure="rectangle")
abstract class CallBlocks extends Statements {
  attr String nameSubroutine;
}

@gmf.node(figure="rectangle")
abstract class CursorOperations extends Statements {
  attr String cursorName;
}

@gmf.node(figure="rectangle")
abstract class SQLOperations extends Statements {
  attr String code;
}

@gmf.node(figure="rectangle")
abstract class IterationStructures extends Statements {

  @gmf.compartment
  val Statements[*] interations_statements;
}

@gmf.node(figure="rectangle")
abstract class ConditionalStructures extends Statements {
}

@gmf.node(figure="rectangle")
abstract class AdditionalOperations extends Statements {
}

@gmf.node(figure="rectangle")
class Expression extends AdditionalOperations {
  attr String className;
  attr String value;
}

@gmf.node(figure="rectangle")
class Exception extends AdditionalOperations {
  attr String className;
  attr String code;
}

@gmf.node(figure="rectangle")
class If extends ConditionalStructures {
  attr String className;
  attr String condition;

  @gmf.compartment
  val Statements[*] true_statements;

  @gmf.compartment
  val Statements[*] false_statements;
}

@gmf.node(figure="rectangle")
class Case extends ConditionalStructures {
  attr String className;

  @gmf.compartment
  val Options[*] options;

  @gmf.compartment
  val Statements[*] default_statements;
}

@gmf.node(figure="rectangle", label="description", label.icon="true", label.placement="internal")
class Options {
  attr String className;
  attr String condition;
  attr String description;

  @gmf.compartment
  val Statements[*] case_statements;
}

@gmf.node(figure="rectangle")
class Insert extends SQLOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class Update extends SQLOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class Delete extends SQLOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class Select extends SQLOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class While extends IterationStructures {
  attr String className;
  attr String condition;
}

@gmf.node(figure="rectangle")
class For extends IterationStructures {
  attr String className;
  attr String counter;
  attr ForCounter typeCounter;
  attr int lowestNumber;
  attr int highestNumber;
}

@gmf.node(figure="rectangle")
class Loop extends IterationStructures {
  attr String className;
  attr String breakCondition;
}

@gmf.node(figure="rectangle")
class Open extends CursorOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class Fetch extends CursorOperations {
  attr String className;
  attr String variableName;
}

@gmf.node(figure="rectangle")
class Close extends CursorOperations {
  attr String className;
}

@gmf.node(figure="rectangle")
class CallProcedure extends CallBlocks {
  attr String className;
}

@gmf.node(figure="rectangle")
class CallFunction extends CallBlocks {
  attr String className;
}

abstract class Links {
  attr String name;
}

@gmf.link(source="source", target="target", incoming="true", target.decoration="arrow", color="0,0,0", width="1", label="name", label.text="Statement Connection", label.icon="true")
class Transition extends Links {
  ref Statements source;
  ref Statements target;
}

@gmf.link(source="source", target="target", incoming="true", target.decoration="arrow", style="dash", color="0,0,0", width="1", label="name", label.text="Case Connection", label.icon="true")
class OptionsTransition extends Links {
  ref Options source;
  ref Options target;
}

enum ParameterType {
  IN = 0;
  OUT = 1;
  IN_OUT = 2;
}

enum ForCounter {
  NORMAL = 0;
  REVERSE = 1;
}

enum DataTypeOptions {
  CHAR = 0;
  NCHAR = 1;
  NVARCHAR2 = 2;
  VARCHAR2 = 3;
  LONG = 4;
  RAW = 5;
  LONG_RAW = 6;
  NUMBER = 7;
  NUMERIC = 8;
  FLOAT = 9;
  DEC = 10;
  DECIMAL = 11;
  INTEGER = 12;
  INT = 13;
  SMALLINT = 14;
  REAL = 15;
  DOUBLE = 16;
  DATE = 17;
  TIMESTAMP_WITH_TIME_ZONE = 18;
  TIMESTAMP_WITH_LOCAL_TIME_ZONE = 19;
  INTERVAL_YEAR_TO_MONTH = 20;
  INTERVAL_DAY_TO_SECOND = 21;
  BFILE = 22;
  BLOB = 23;
  CLOB = 24;
  NCLOB = 25;
  ROWID = 26;
  UROWID = 27;
}