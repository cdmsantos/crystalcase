#auto-generated by CrystalCASE

[%

for(element in Procedure.allInstances()) {

	out.println("CREATE OR REPLACE PROCEDURE "+element.name); --static
	
	//PARAMETROS
	printParametersPart(element);
	
	out.println("AS"); --static

	//DECLARAÇÃO DE VARIÁVEIS
	printDeclarativePart(element);
	
	out.println("BEGIN"); --static
	
	//PARTE EXECUTÁVEL
	var firstElement = getFirstElement(element.executablePart);
	printStatements(firstElement);
	printElementsByTransition(firstElement);
	
	out.println("END;"); --static
	out.println("/"); --static
	out.println(); --static
}

for(element in Function.allInstances()) {
	
	out.println(); --static
	out.println("CREATE OR REPLACE FUNCTION " + element.name); --static
	
	//PARAMETROS
	printParametersPart(element);
	
	//RETORNO
	var returnStatement;
	if(not isEmpty(element.returnPart)){
		for(backStatement in element.returnPart) {
			returnStatement = backStatement;
			out.println("RETURN " + backStatement.options);
			out.println("IS " + backStatement.name + " " + backStatement.options + ";");
		}
	}
	
	out.println("AS"); --static

	//DECLARAÇÃO DE VARIÁVEIS
	printDeclarativePart(element);
	
	out.println("BEGIN"); --static
	
	//PARTE EXECUTÁVEL
	var firstElement = getFirstElement(element.executablePart);
	printStatements(firstElement);
	printElementsByTransition(firstElement);

	out.println("RETURN " + returnStatement.name + ";");
	out.println("END;"); --static
	out.println("/"); --static
	out.println(); --static
}

operation getFirstElement(object){
	for(element in object) {
		if(element.isStart == true){
			return element;
		}
	}
}

operation Statements getNext() {
  return Transition.all.
  	select(t|t.source = self).
  	collect(t|t.target).
  	flatten();
}

operation isEmpty (object) {
   if(object.size > 0){
      return false;
   }
   return true;
}

operation printDeclarativePart(object) {
	if(not isEmpty(object.declarativePart)){
		--out.println("DECLARE"); --static
		for(declaration in object.declarativePart){	
			if(declaration.className == "DataType") {                
				out.println("   " + declaration.name + " " + declaration.options + ";");
			} else if(declaration.className == "Cursor") {
				out.println("   " + "CURSOR " + declaration.name + " IS " + declaration.cursorQuery + ";");
			} else {
				out.println("   " + declaration.code + ";"); //Collections and Records
				out.println("   " + declaration.name + " " + declaration.typeName + ";");
			}
		}
	}
}

operation printElementsByTransition(object) {
	var i = 0 ;
	var element;
	for(transition in Transition.all) {
		if(i = 0) { 
			element = object.getNext();
			i = 1;
		} else{
			element = element.first().getNext();
		}
		printStatements(element.first());
	}
}

operation printCase(object) {
	out.println("   " + "CASE");
	for(selector in object.cases){
		out.println("      " + "WHEN " + selector.condition + " THEN ");
		var firstElement = getFirstElement(selector.caseStatements);
		//out.println(selector);
		printStatements(firstElement);
		//printElementsByTransition(firstElement);
	}
	out.println("   " + "END;");
}

operation printIf(object) {
	out.println("   " + "IF " + object.condition + " THEN");
	var firstElement = getFirstElement(object.ifs);
	printStatements(firstElement);
	//printElementsByTransition(firstElement);
	if(not isEmpty(object.elses)) {
		out.println("   " + "ELSE"); --static
		var firstElement = getFirstElement(object.elses);
		printStatements(firstElement);
		//printElementsByTransition(firstElement);
	}
	out.println("   " + "END IF;"); --static
}

operation printWhile(object) {
	out.println("   " + "WHILE " + object.condition);
	out.println("   " + "LOOP");
	
	var firstElement = getFirstElement(object.whileStatements);
	printStatements(firstElement);
	//printElementsByTransition(firstElement);
	
	out.println("   " + "END LOOP;"); --static
}

operation printLoop(object) {
	out.println("   " + "LOOP"); --static
	var firstElement = getFirstElement(object.loopStatements);
	printStatements(firstElement);
	//printElementsByTransition(firstElement);
	out.println("   " + "EXIT WHEN " + object.breakCondition + ";");
	out.println("   " + "END LOOP;"); --static
}

operation printFor(object) {
	out.println("   " + "FOR " + object.counter + " IN " + object.typeCounter + " " + object.lowestNumber + ".." + object.highestNumber);
	out.println("   " + "LOOP"); --static
	
	var firstElement = getFirstElement(object.forStatements);
	printStatements(firstElement);
	//printElementsByTransition(firstElement);
	
	out.println("   " + "END LOOP;"); --static
}

operation printStatements(object) {
	if(not (object == null) ) {
		if(object.className == "If"){
			printIf(object);
		} else if (object.className == "Case") {
			printCase(object);	
		} else if(object.className == "While") {
			printWhile(object);
		} else if(object.className == "Loop") {
			printLoop(object);
		} else if(object.className == "For") {
			printFor(object);
		} else if(object.className == "CallProcedure" or object.className == "CallFunction") {
			out.println("      " + "EXEC " + object.nameSubroutine + ";");
		} else if(object.className == "Open") {
			out.println("      " + "OPEN " + object.cursorName + ";");
		} else if(object.className == "Fetch") {
			out.println("      " + "FETCH " + object.cursorName + " INTO " + object.variableName + ";");
		} else if(object.className == "Close") {
			out.println("      " + "CLOSE " + object.cursorName + ";");
		} else if (object.className == "Selector") {
			out.println("SELECTOR"); 
		} else {
			out.println("      " + object.code + ";");	
		}
	}
	out.println(); --static
}

operation printParametersPart(object) {
	if(not isEmpty(object.parameters)) {
		out.println("("); --static
		for(parameters in object.parameters) {
			if(parameters.className == "DataType") {
				out.println("   " + parameters.name + " " + parameters.type + " " + parameters.options);	
			} else  {
				out.println("   " + parameters.code);
			}
		}
		out.println(")"); --static
	}
}

operation Statements printReturnPart(object) {
	var returnStatement;
	for(backStatement in object.returnPart) {
		returnStatement = backStatement;
		out.println("RETURN " + backStatement.options);
		out.println("IS " + backStatement.name + " " + backStatement.options + ";");
	}
	return returnStatement;
}
%]